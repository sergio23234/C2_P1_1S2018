
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import Principal.NCJS;
import Principal.Nodo_error;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_CJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symj.class;
}

  /** Default constructor. */
  public Sintactico_CJS() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico_CJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_CJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\007\004\000\002\007\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\012\005\000\002\012\007\000\002\012" +
    "\011\000\002\011\006\000\002\013\011\000\002\013\012" +
    "\000\002\014\006\000\002\015\011\000\002\016\006\000" +
    "\002\016\007\000\002\016\006\000\002\016\005\000\002" +
    "\017\017\000\002\017\017\000\002\020\011\000\002\004" +
    "\007\000\002\022\012\000\002\023\007\000\002\024\005" +
    "\000\002\024\005\000\002\024\010\000\002\025\003\000" +
    "\002\025\003\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\026\003\000\002\026\003\000\002\032" +
    "\003\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\003\000\002\030\005\000\002\030\003\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\033" +
    "\004\000\002\033\003\000\002\033\003\000\002\031\005" +
    "\000\002\031\005\000\002\031\004\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\020\032\005\034\023\035\004\040\012\046" +
    "\010\050\011\052\027\001\002\000\002\001\002\000\004" +
    "\017\174\001\002\000\004\024\171\001\002\000\030\002" +
    "\ufffa\027\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa\040\ufffa" +
    "\042\ufffa\046\ufffa\050\ufffa\052\ufffa\001\002\000\004\017" +
    "\165\001\002\000\004\017\157\001\002\000\004\055\150" +
    "\001\002\000\030\002\ufffb\027\ufffb\032\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\040\ufffb\042\ufffb\046\ufffb\050\ufffb\052\ufffb" +
    "\001\002\000\022\002\uffff\032\005\034\023\035\004\040" +
    "\012\046\010\050\011\052\027\001\002\000\030\002\ufffd" +
    "\027\ufffd\032\ufffd\034\ufffd\035\ufffd\036\ufffd\040\ufffd\042" +
    "\ufffd\046\ufffd\050\ufffd\052\ufffd\001\002\000\004\002\147" +
    "\001\002\000\030\002\ufff9\027\ufff9\032\ufff9\034\ufff9\035" +
    "\ufff9\036\ufff9\040\ufff9\042\ufff9\046\ufff9\050\ufff9\052\ufff9" +
    "\001\002\000\030\002\ufff7\027\ufff7\032\ufff7\034\ufff7\035" +
    "\ufff7\036\ufff7\040\ufff7\042\ufff7\046\ufff7\050\ufff7\052\ufff7" +
    "\001\002\000\030\002\ufff5\027\ufff5\032\ufff5\034\ufff5\035" +
    "\ufff5\036\ufff5\040\ufff5\042\ufff5\046\ufff5\050\ufff5\052\ufff5" +
    "\001\002\000\030\002\ufff6\027\ufff6\032\ufff6\034\ufff6\035" +
    "\ufff6\036\ufff6\040\ufff6\042\ufff6\046\ufff6\050\ufff6\052\ufff6" +
    "\001\002\000\004\017\103\001\002\000\030\002\ufff8\027" +
    "\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\040\ufff8\042\ufff8" +
    "\046\ufff8\050\ufff8\052\ufff8\001\002\000\030\002\ufffc\027" +
    "\ufffc\032\ufffc\034\ufffc\035\ufffc\036\ufffc\040\ufffc\042\ufffc" +
    "\046\ufffc\050\ufffc\052\ufffc\001\002\000\004\002\000\001" +
    "\002\000\004\017\030\001\002\000\014\005\036\016\033" +
    "\054\037\055\031\056\035\001\002\000\036\007\uffda\010" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\020\uffda" +
    "\021\uffda\023\uffda\024\uffda\025\uffda\030\uffda\031\uffda\001" +
    "\002\000\036\007\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9" +
    "\014\uffd9\015\uffd9\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025" +
    "\uffd9\030\uffd9\031\uffd9\001\002\000\040\006\101\007\uffde" +
    "\010\uffde\011\uffde\012\uffde\013\uffde\014\uffde\015\uffde\020" +
    "\uffde\021\uffde\023\uffde\024\uffde\025\uffde\030\uffde\031\uffde" +
    "\001\002\000\036\007\uffd1\010\uffd1\011\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\030\uffd1\031\uffd1\001\002\000\036\007\uffdc\010" +
    "\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\020\uffdc" +
    "\021\uffdc\023\uffdc\024\uffdc\025\uffdc\030\uffdc\031\uffdc\001" +
    "\002\000\036\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025" +
    "\uffdb\030\uffdb\031\uffdb\001\002\000\036\007\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\020\uffdf\021" +
    "\uffdf\023\uffdf\024\uffdf\025\uffdf\030\uffdf\031\uffdf\001\002" +
    "\000\004\020\056\001\002\000\024\007\044\010\045\011" +
    "\046\012\042\013\047\014\043\020\uffd8\023\uffd8\024\uffd8" +
    "\001\002\000\014\005\036\016\033\054\037\055\031\056" +
    "\035\001\002\000\014\005\036\016\033\054\037\055\031" +
    "\056\035\001\002\000\014\005\036\016\033\054\037\055" +
    "\031\056\035\001\002\000\014\005\036\016\033\054\037" +
    "\055\031\056\035\001\002\000\014\005\036\016\033\054" +
    "\037\055\031\056\035\001\002\000\014\005\036\016\033" +
    "\054\037\055\031\056\035\001\002\000\036\007\uffd3\010" +
    "\uffd3\011\uffd3\012\uffd3\013\047\014\uffd3\015\uffd3\020\uffd3" +
    "\021\uffd3\023\uffd3\024\uffd3\025\uffd3\030\uffd3\031\uffd3\001" +
    "\002\000\036\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013\047" +
    "\014\uffd5\015\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\030\uffd5\031\uffd5\001\002\000\036\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\047\014\uffd6\015\uffd6\020\uffd6\021" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\030\uffd6\031\uffd6\001\002" +
    "\000\036\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\047\014" +
    "\uffd7\015\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7" +
    "\030\uffd7\031\uffd7\001\002\000\036\007\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\013\047\014\uffd2\015\uffd2\020\uffd2\021\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\030\uffd2\031\uffd2\001\002\000" +
    "\036\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\047\014\uffd4" +
    "\015\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\030" +
    "\uffd4\031\uffd4\001\002\000\004\026\057\001\002\000\006" +
    "\036\062\042\060\001\002\000\004\024\077\001\002\000" +
    "\010\027\071\036\070\042\067\001\002\000\014\005\036" +
    "\016\033\054\037\055\031\056\035\001\002\000\004\024" +
    "\064\001\002\000\020\032\005\034\023\035\004\040\012" +
    "\046\010\050\011\052\027\001\002\000\026\027\uffec\032" +
    "\005\034\023\035\004\036\uffec\040\012\042\uffec\046\010" +
    "\050\011\052\027\001\002\000\030\002\ufffe\027\ufffe\032" +
    "\ufffe\034\ufffe\035\ufffe\036\ufffe\040\ufffe\042\ufffe\046\ufffe" +
    "\050\ufffe\052\ufffe\001\002\000\004\024\075\001\002\000" +
    "\014\005\036\016\033\054\037\055\031\056\035\001\002" +
    "\000\030\002\uffed\027\uffed\032\uffed\034\uffed\035\uffed\036" +
    "\uffed\040\uffed\042\uffed\046\uffed\050\uffed\052\uffed\001\002" +
    "\000\004\024\073\001\002\000\020\032\005\034\023\035" +
    "\004\040\012\046\010\050\011\052\027\001\002\000\026" +
    "\027\uffeb\032\005\034\023\035\004\036\uffeb\040\012\042" +
    "\uffeb\046\010\050\011\052\027\001\002\000\020\032\005" +
    "\034\023\035\004\040\012\046\010\050\011\052\027\001" +
    "\002\000\026\027\uffea\032\005\034\023\035\004\036\uffea" +
    "\040\012\042\uffea\046\010\050\011\052\027\001\002\000" +
    "\020\032\005\034\023\035\004\040\012\046\010\050\011" +
    "\052\027\001\002\000\026\027\uffe9\032\005\034\023\035" +
    "\004\036\uffe9\040\012\042\uffe9\046\010\050\011\052\027" +
    "\001\002\000\004\016\102\001\002\000\036\007\uffdd\010" +
    "\uffdd\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\020\uffdd" +
    "\021\uffdd\023\uffdd\024\uffdd\025\uffdd\030\uffdd\031\uffdd\001" +
    "\002\000\002\001\002\000\004\023\105\001\002\000\016" +
    "\005\036\016\033\025\106\054\037\055\031\056\035\001" +
    "\002\000\016\005\036\016\033\025\106\054\037\055\031" +
    "\056\035\001\002\000\012\020\uffc5\023\uffc5\030\uffc5\031" +
    "\uffc5\001\002\000\010\023\124\030\126\031\125\001\002" +
    "\000\034\007\044\010\115\011\046\012\042\013\047\014" +
    "\043\015\114\020\uffcf\021\116\023\uffcf\025\112\030\uffcf" +
    "\031\uffcf\001\002\000\004\021\123\001\002\000\014\005" +
    "\036\016\033\054\037\055\031\056\035\001\002\000\016" +
    "\005\uffca\016\uffca\021\121\054\uffca\055\uffca\056\uffca\001" +
    "\002\000\016\005\uffc9\016\uffc9\021\120\054\uffc9\055\uffc9" +
    "\056\uffc9\001\002\000\004\021\117\001\002\000\014\005" +
    "\uffce\016\uffce\054\uffce\055\uffce\056\uffce\001\002\000\014" +
    "\005\uffcb\016\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002\000" +
    "\014\005\uffcc\016\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002" +
    "\000\026\007\044\010\045\011\046\012\042\013\047\014" +
    "\043\020\uffd0\023\uffd0\030\uffd0\031\uffd0\001\002\000\014" +
    "\005\uffcd\016\uffcd\054\uffcd\055\uffcd\056\uffcd\001\002\000" +
    "\002\001\002\000\016\005\036\016\033\025\106\054\037" +
    "\055\031\056\035\001\002\000\016\005\036\016\033\025" +
    "\106\054\037\055\031\056\035\001\002\000\012\020\uffc8" +
    "\023\uffc8\030\uffc8\031\uffc8\001\002\000\012\020\uffc7\023" +
    "\uffc7\030\uffc7\031\uffc7\001\002\000\006\007\132\010\133" +
    "\001\002\000\004\007\141\001\002\000\004\010\134\001" +
    "\002\000\004\020\135\001\002\000\004\026\136\001\002" +
    "\000\020\032\005\034\023\035\004\040\012\046\010\050" +
    "\011\052\027\001\002\000\022\027\140\032\005\034\023" +
    "\035\004\040\012\046\010\050\011\052\027\001\002\000" +
    "\030\002\uffe7\027\uffe7\032\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\040\uffe7\042\uffe7\046\uffe7\050\uffe7\052\uffe7\001\002\000" +
    "\004\020\142\001\002\000\004\026\143\001\002\000\020" +
    "\032\005\034\023\035\004\040\012\046\010\050\011\052" +
    "\027\001\002\000\022\027\145\032\005\034\023\035\004" +
    "\040\012\046\010\050\011\052\027\001\002\000\030\002" +
    "\uffe8\027\uffe8\032\uffe8\034\uffe8\035\uffe8\036\uffe8\040\uffe8" +
    "\042\uffe8\046\uffe8\050\uffe8\052\uffe8\001\002\000\012\020" +
    "\uffc6\023\uffc6\030\uffc6\031\uffc6\001\002\000\004\002\001" +
    "\001\002\000\004\017\151\001\002\000\002\001\002\000" +
    "\004\020\153\001\002\000\004\026\154\001\002\000\020" +
    "\032\005\034\023\035\004\040\012\046\010\050\011\052" +
    "\027\001\002\000\022\027\156\032\005\034\023\035\004" +
    "\040\012\046\010\050\011\052\027\001\002\000\030\002" +
    "\uffe4\027\uffe4\032\uffe4\034\uffe4\035\uffe4\036\uffe4\040\uffe4" +
    "\042\uffe4\046\uffe4\050\uffe4\052\uffe4\001\002\000\016\005" +
    "\036\016\033\025\106\054\037\055\031\056\035\001\002" +
    "\000\010\020\161\030\126\031\125\001\002\000\004\026" +
    "\162\001\002\000\020\032\005\034\023\035\004\040\012" +
    "\046\010\050\011\052\027\001\002\000\022\027\164\032" +
    "\005\034\023\035\004\040\012\046\010\050\011\052\027" +
    "\001\002\000\030\002\uffe6\027\uffe6\032\uffe6\034\uffe6\035" +
    "\uffe6\036\uffe6\040\uffe6\042\uffe6\046\uffe6\050\uffe6\052\uffe6" +
    "\001\002\000\014\005\036\016\033\054\037\055\031\056" +
    "\035\001\002\000\004\020\167\001\002\000\004\023\170" +
    "\001\002\000\030\002\uffe5\027\uffe5\032\uffe5\034\uffe5\035" +
    "\uffe5\036\uffe5\040\uffe5\042\uffe5\046\uffe5\050\uffe5\052\uffe5" +
    "\001\002\000\014\005\036\016\033\054\037\055\031\056" +
    "\035\001\002\000\004\023\173\001\002\000\032\002\ufff1" +
    "\023\ufff1\027\ufff1\032\ufff1\034\ufff1\035\ufff1\036\ufff1\040" +
    "\ufff1\042\ufff1\046\ufff1\050\ufff1\052\ufff1\001\002\000\016" +
    "\005\036\016\033\025\106\054\037\055\031\056\035\001" +
    "\002\000\010\020\176\030\126\031\125\001\002\000\004" +
    "\026\177\001\002\000\020\032\005\034\023\035\004\040" +
    "\012\046\010\050\011\052\027\001\002\000\022\027\201" +
    "\032\005\034\023\035\004\040\012\046\010\050\011\052" +
    "\027\001\002\000\032\002\ufff0\027\ufff0\032\ufff0\033\203" +
    "\034\ufff0\035\ufff0\036\ufff0\040\ufff0\042\ufff0\046\ufff0\050" +
    "\ufff0\052\ufff0\001\002\000\030\002\uffef\027\uffef\032\uffef" +
    "\034\uffef\035\uffef\036\uffef\040\uffef\042\uffef\046\uffef\050" +
    "\uffef\052\uffef\001\002\000\004\026\204\001\002\000\020" +
    "\032\005\034\023\035\004\040\012\046\010\050\011\052" +
    "\027\001\002\000\022\027\206\032\005\034\023\035\004" +
    "\040\012\046\010\050\011\052\027\001\002\000\030\002" +
    "\uffee\027\uffee\032\uffee\034\uffee\035\uffee\036\uffee\040\uffee" +
    "\042\uffee\046\uffee\050\uffee\052\uffee\001\002\000\006\023" +
    "\211\024\210\001\002\000\016\005\036\016\033\026\212" +
    "\054\037\055\031\056\035\001\002\000\030\002\ufff4\027" +
    "\ufff4\032\ufff4\034\ufff4\035\ufff4\036\ufff4\040\ufff4\042\ufff4" +
    "\046\ufff4\050\ufff4\052\ufff4\001\002\000\002\001\002\000" +
    "\004\023\214\001\002\000\030\002\ufff3\027\ufff3\032\ufff3" +
    "\034\ufff3\035\ufff3\036\ufff3\040\ufff3\042\ufff3\046\ufff3\050" +
    "\ufff3\052\ufff3\001\002\000\004\027\216\001\002\000\004" +
    "\023\217\001\002\000\030\002\ufff2\027\ufff2\032\ufff2\034" +
    "\ufff2\035\ufff2\036\ufff2\040\ufff2\042\ufff2\046\ufff2\050\ufff2" +
    "\052\ufff2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\215\000\034\002\015\003\025\004\017\005\005\007" +
    "\013\010\014\011\024\012\020\013\012\015\006\017\016" +
    "\020\023\022\021\001\001\000\004\005\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\004\017\005\005\010\065\011\024\012\020" +
    "\013\012\015\006\017\016\020\023\022\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\031\026\033\027\040\032" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\025\031\026\033\027\054\001\001\000\010\025" +
    "\031\026\033\027\053\001\001\000\010\025\031\026\033" +
    "\027\052\001\001\000\010\025\031\026\033\027\051\001" +
    "\001\000\010\025\031\026\033\027\050\001\001\000\010" +
    "\025\031\026\033\027\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\031\026\033\027\040\032\062\001\001\000\002\001" +
    "\001\000\030\004\017\005\005\007\064\010\014\011\024" +
    "\012\020\013\012\015\006\017\016\020\023\022\021\001" +
    "\001\000\026\004\017\005\005\010\065\011\024\012\020" +
    "\013\012\015\006\017\016\020\023\022\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\031\026\033" +
    "\027\040\032\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\017\005\005\007\073\010\014\011\024" +
    "\012\020\013\012\015\006\017\016\020\023\022\021\001" +
    "\001\000\026\004\017\005\005\010\065\011\024\012\020" +
    "\013\012\015\006\017\016\020\023\022\021\001\001\000" +
    "\030\004\017\005\005\007\075\010\014\011\024\012\020" +
    "\013\012\015\006\017\016\020\023\022\021\001\001\000" +
    "\026\004\017\005\005\010\065\011\024\012\020\013\012" +
    "\015\006\017\016\020\023\022\021\001\001\000\030\004" +
    "\017\005\005\007\077\010\014\011\024\012\020\013\012" +
    "\015\006\017\016\020\023\022\021\001\001\000\026\004" +
    "\017\005\005\010\065\011\024\012\020\013\012\015\006" +
    "\017\016\020\023\022\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\005\011\103\001\001\000\002" +
    "\001\001\000\014\025\031\026\033\027\110\030\106\031" +
    "\107\001\001\000\014\025\031\026\033\027\110\030\106" +
    "\031\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\112\001\001\000\002\001\001\000\010\025\031" +
    "\026\033\027\121\001\001\000\002\001\001\000\010\025" +
    "\031\026\033\027\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\130\001\001\000\014" +
    "\025\031\026\033\027\110\030\106\031\127\001\001\000" +
    "\014\025\031\026\033\027\110\030\106\031\126\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\017\005\005\007\136\010\014\011" +
    "\024\012\020\013\012\015\006\017\016\020\023\022\021" +
    "\001\001\000\026\004\017\005\005\010\065\011\024\012" +
    "\020\013\012\015\006\017\016\020\023\022\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\017\005\005\007\143\010\014\011\024\012\020" +
    "\013\012\015\006\017\016\020\023\022\021\001\001\000" +
    "\026\004\017\005\005\010\065\011\024\012\020\013\012" +
    "\015\006\017\016\020\023\022\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\017\005\005\007\154\010\014\011\024" +
    "\012\020\013\012\015\006\017\016\020\023\022\021\001" +
    "\001\000\026\004\017\005\005\010\065\011\024\012\020" +
    "\013\012\015\006\017\016\020\023\022\021\001\001\000" +
    "\002\001\001\000\014\025\031\026\033\027\110\030\106" +
    "\031\157\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\017\005\005\007\162\010\014\011\024\012\020" +
    "\013\012\015\006\017\016\020\023\022\021\001\001\000" +
    "\026\004\017\005\005\010\065\011\024\012\020\013\012" +
    "\015\006\017\016\020\023\022\021\001\001\000\002\001" +
    "\001\000\012\025\031\026\033\027\040\032\165\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\025\031\026\033\027\040\032\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\025\031\026\033\027" +
    "\110\030\106\031\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\004\017\005\005\007\177\010\014\011" +
    "\024\012\020\013\012\015\006\017\016\020\023\022\021" +
    "\001\001\000\026\004\017\005\005\010\065\011\024\012" +
    "\020\013\012\015\006\017\016\020\023\022\021\001\001" +
    "\000\004\014\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\017\005\005\007\204\010\014\011\024" +
    "\012\020\013\012\015\006\017\016\020\023\022\021\001" +
    "\001\000\026\004\017\005\005\010\065\011\024\012\020" +
    "\013\012\015\006\017\016\020\023\022\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\025\031\026\033" +
    "\027\040\032\212\001\001\000\002\001\001\000\004\006" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_CJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_CJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_CJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Nodo_error> Errores = new ArrayList<Nodo_error>();
    public static boolean errores=false;
    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right) +", Linea: "+(s.left+1)+ " no esperado");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }

 /*codig de usuario */
 String total = "";
 public NCJS RCJS = null;
 //public ArrayList<Nodo> e = new ArrayList<Nodo>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_CJS$actions {


    public String estado="";

  private final Sintactico_CJS parser;

  /** Constructor */
  CUP$Sintactico_CJS$actions(Sintactico_CJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_CJS$do_action_part00000000(
    int                        CUP$Sintactico_CJS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_CJS$parser,
    java.util.Stack            CUP$Sintactico_CJS$stack,
    int                        CUP$Sintactico_CJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_CJS$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_CJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_CJS$parser.done_parsing();
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= UNO 
            {
              Object RESULT =null;

              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UNO ::= ESTRUCTURA_CUERPO 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		 RCJS=e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("UNO",1, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESTRUCTURA_CUERPO ::= ESTRUCTURA_CUERPO ESTRUCTURA_CUERPO_P 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="cuerpo"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA_CUERPO ::= ESTRUCTURA_CUERPO_P 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",5, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_ASIGNAR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_SI 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_SELE 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_PARA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_MIEN 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_IMPRI 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_FUNCI 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_DEC_VAR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA_DEC_VAR ::= RDIM LISTA_VAR SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="variable"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DEC_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURA_DEC_VAR ::= RDIM LISTA_VAR SDPN EXPRESION SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="variable"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DEC_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURA_DEC_VAR ::= RDIM LISTA_VAR SDPN SILL LISTA_EXP SFLL SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="variable"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DEC_VAR",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURA_ASIGNAR ::= LISTA_VAR SDPN EXPRESION SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="asignar"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ASIGNAR",7, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTRUCTURA_SI ::= RSI SIPA OP_LOGICA SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="si"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SI",9, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTRUCTURA_SI ::= RSI SIPA OP_LOGICA SFPA SILL ESTRUCTURA_CUERPO SFLL ESTRUCTURA_SINO 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="si"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); nuevo.hijos.add(e3); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SI",9, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTRUCTURA_SINO ::= RSIN SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="sino"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SINO",10, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTRUCTURA_SELE ::= RSEL SIPA EXPRESION SFPA SILL CUERPO_SELEC SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="seleccion"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SELE",11, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_SELEC ::= RCAS EXPRESION SDPN ESTRUCTURA_CUERPO 
            {
              NCJS RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="caso"; nuevo.hijos.add(e2); nuevo.hijos.add(e3); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELEC",12, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_SELEC ::= CUERPO_SELEC RCAS EXPRESION SDPN ESTRUCTURA_CUERPO 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="caso"; nuevo.hijos.add(e2); nuevo.hijos.add(e3); e1.hijos.add(nuevo); RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELEC",12, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_SELEC ::= CUERPO_SELEC RDEF SDPN ESTRUCTURA_CUERPO 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="default"; nuevo.hijos.add(e3); e1.hijos.add(nuevo); RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELEC",12, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_SELEC ::= RDEF SDPN ESTRUCTURA_CUERPO 
            {
              NCJS RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="default"; nuevo.hijos.add(e3); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELEC",12, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ESTRUCTURA_PARA ::= RPAR SIPA ESTRUCTURA_ASIGNAR SPYC OP_LOGICA SPYC LISTA_VAR SMAS SMAS SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-10)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e4 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="para"; nuevo.valor="sumar"; nuevo.hijos.add(e1);  nuevo.hijos.add(e2); nuevo.hijos.add(e3); nuevo.hijos.add(e4);RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PARA",13, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ESTRUCTURA_PARA ::= RPAR SIPA ESTRUCTURA_ASIGNAR SPYC OP_LOGICA SPYC LISTA_VAR SMEN SMEN SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-10)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-10)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-10)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e4 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="para"; nuevo.valor="restar"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); nuevo.hijos.add(e3); nuevo.hijos.add(e4);RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PARA",13, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-12)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ESTRUCTURA_MIEN ::= RMIE SIPA OP_LOGICA SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="mientras"; nuevo.hijos.add(e1);nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MIEN",14, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ESTRUCTURA_IMPRI ::= RIMP SIPA EXPRESION SFPA SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="imprimir"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IMPRI",2, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ESTRUCTURA_FUNCI ::= RFUN PID SIPA LISTA_VAR SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="funcion"; nuevo.valor=e1.toString(); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCI",16, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ESTRUCTURA_MENS ::= RMEN SIPA EXPRESION SFPA SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="mensaje"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MENS",17, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ESTRUCTURA_VARIAS ::= PID SPUN RCON 
            {
              NCJS RESULT =null;
		
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VARIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ESTRUCTURA_VARIAS ::= PID SPUN RATE 
            {
              NCJS RESULT =null;
		
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VARIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTRUCTURA_VARIAS ::= RDOC SPUN ROBT SIPA EXPRESION SFPA 
            {
              NCJS RESULT =null;
		
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VARIAS",18, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // A_VAR ::= PCOM 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="string"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // A_VAR ::= PNUM 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="doble"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // A_VAR ::= PNUM SPUN PNUM 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="doble"; nuevo.valor=e1.toString()+"."+e2.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // A_VAR ::= PFEC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="fecha";  nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // A_VAR ::= PHOR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="hora";   nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Estructura_VAR ::= PID 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="ID";      nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Estructura_VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Estructura_VAR ::= A_VAR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Estructura_VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("EXPRESION",24, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OP_ARITMETICA ::= OP_ARITMETICA SMAS OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="+"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OP_ARITMETICA ::= OP_ARITMETICA SMEN OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="-"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OP_ARITMETICA ::= OP_ARITMETICA SMUL OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="*"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OP_ARITMETICA ::= OP_ARITMETICA SDIV OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="/"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OP_ARITMETICA ::= OP_ARITMETICA SPOT OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="^"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OP_ARITMETICA ::= OP_ARITMETICA SMOD OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="%"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OP_ARITMETICA ::= Estructura_VAR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_COMPARACION ::= OP_ARITMETICA Tipo_COMPARACION OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPC"; nuevo.valor=e3; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_COMPARACION ::= OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_COMPARACION ::= SIGU SIGU 
            {
              String RESULT =null;
		RESULT ="==";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_COMPARACION ::= SNOT SIGU 
            {
              String RESULT =null;
		RESULT ="!=";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_COMPARACION ::= SMAY SIGU 
            {
              String RESULT =null;
		RESULT =">=";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_COMPARACION ::= SMEN SIGU 
            {
              String RESULT =null;
		RESULT ="<=";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_COMPARACION ::= SMAY 
            {
              String RESULT =null;
		RESULT =">";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_COMPARACION ::= SMEN 
            {
              String RESULT =null;
		RESULT ="<";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_LOGICA ::= OP_LOGICA SOR OP_LOGICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPL"; nuevo.valor="OR";  nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",23, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OP_LOGICA ::= OP_LOGICA SAND OP_LOGICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPL"; nuevo.valor="AND"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",23, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OP_LOGICA ::= SNOT OP_LOGICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPL"; nuevo.valor="NOT"; nuevo.hijos.add(e1);                       RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",23, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OP_LOGICA ::= OP_COMPARACION 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",23, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_CJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_CJS$do_action(
    int                        CUP$Sintactico_CJS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_CJS$parser,
    java.util.Stack            CUP$Sintactico_CJS$stack,
    int                        CUP$Sintactico_CJS$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_CJS$do_action_part00000000(
                               CUP$Sintactico_CJS$act_num,
                               CUP$Sintactico_CJS$parser,
                               CUP$Sintactico_CJS$stack,
                               CUP$Sintactico_CJS$top);
    }
}

}
