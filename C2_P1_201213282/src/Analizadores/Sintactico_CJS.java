
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import Principal.NCJS;
import Principal.Nodo_error;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_CJS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symj.class;
}

  /** Default constructor. */
  public Sintactico_CJS() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico_CJS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_CJS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\004\004\000\002\004\003\000\002\005\003" +
    "\000\002\005\004\000\002\011\004\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\004\000\002\014\004\000\002\014\006\000\002\014\010" +
    "\000\002\007\005\000\002\007\003\000\002\013\006\000" +
    "\002\015\012\000\002\015\011\000\002\016\007\000\002" +
    "\017\011\000\002\020\006\000\002\020\007\000\002\020" +
    "\006\000\002\020\005\000\002\021\016\000\002\021\016" +
    "\000\002\022\011\000\002\006\007\000\002\023\011\000" +
    "\002\023\010\000\002\024\007\000\002\025\005\000\002" +
    "\025\005\000\002\025\010\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\004\000\002\026\004" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\033\003\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\003\000\002\031\005\000\002\031\003" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\003\000\002\034\003\000\002" +
    "\032\005\000\002\032\005\000\002\032\004\000\002\032" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\022\032\005\034\023\035\004\040\013\046" +
    "\010\050\012\052\027\055\022\001\002\000\004\055\022" +
    "\001\002\000\004\017\206\001\002\000\006\022\134\024" +
    "\203\001\002\000\032\002\ufff6\027\ufff6\032\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\040\ufff6\042\ufff6\046\ufff6\050\ufff6\052" +
    "\ufff6\055\ufff6\001\002\000\004\017\177\001\002\000\024" +
    "\002\ufffd\032\ufffd\034\ufffd\035\ufffd\040\ufffd\046\ufffd\050" +
    "\ufffd\052\ufffd\055\ufffd\001\002\000\004\017\171\001\002" +
    "\000\004\055\156\001\002\000\032\002\ufff7\027\ufff7\032" +
    "\ufff7\034\ufff7\035\ufff7\036\ufff7\040\ufff7\042\ufff7\046\ufff7" +
    "\050\ufff7\052\ufff7\055\ufff7\001\002\000\024\002\ufffc\032" +
    "\ufffc\034\ufffc\035\ufffc\040\ufffc\046\ufffc\050\ufffc\052\ufffc" +
    "\055\ufffc\001\002\000\004\002\154\001\002\000\024\002" +
    "\uffff\032\005\034\023\035\004\040\013\046\010\050\012" +
    "\052\027\055\022\001\002\000\032\002\ufff5\027\ufff5\032" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\040\ufff5\042\ufff5\046\ufff5" +
    "\050\ufff5\052\ufff5\055\ufff5\001\002\000\032\002\ufff3\027" +
    "\ufff3\032\ufff3\034\ufff3\035\ufff3\036\ufff3\040\ufff3\042\ufff3" +
    "\046\ufff3\050\ufff3\052\ufff3\055\ufff3\001\002\000\016\007" +
    "\uffed\010\uffed\020\uffed\022\uffed\023\uffed\024\uffed\001\002" +
    "\000\004\017\106\001\002\000\032\002\ufff4\027\ufff4\032" +
    "\ufff4\034\ufff4\035\ufff4\036\ufff4\040\ufff4\042\ufff4\046\ufff4" +
    "\050\ufff4\052\ufff4\055\ufff4\001\002\000\032\002\ufff8\027" +
    "\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\040\ufff8\042\ufff8" +
    "\046\ufff8\050\ufff8\052\ufff8\055\ufff8\001\002\000\004\002" +
    "\000\001\002\000\004\017\030\001\002\000\020\005\037" +
    "\007\040\010\036\016\033\054\041\055\031\056\035\001" +
    "\002\000\036\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\014\uffd3\015\uffd3\020\uffd3\021\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\030\uffd3\031\uffd3\001\002\000\036\007\uffd2\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\020\uffd2\021" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\030\uffd2\031\uffd2\001\002" +
    "\000\036\007\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\030\uffd8\031\uffd8\001\002\000\036\007\uffca\010\uffca\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\020\uffca\021\uffca" +
    "\023\uffca\024\uffca\025\uffca\030\uffca\031\uffca\001\002\000" +
    "\036\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7" +
    "\015\uffd7\020\uffd7\021\uffd7\023\uffd7\024\uffd7\025\uffd7\030" +
    "\uffd7\031\uffd7\001\002\000\004\016\105\001\002\000\036" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\030\uffd4" +
    "\031\uffd4\001\002\000\004\016\104\001\002\000\036\007" +
    "\uffd9\010\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9" +
    "\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9\030\uffd9\031" +
    "\uffd9\001\002\000\004\020\060\001\002\000\024\007\046" +
    "\010\047\011\050\012\044\013\051\014\045\020\uffd1\023" +
    "\uffd1\024\uffd1\001\002\000\020\005\037\007\040\010\036" +
    "\016\033\054\041\055\031\056\035\001\002\000\020\005" +
    "\037\007\040\010\036\016\033\054\041\055\031\056\035" +
    "\001\002\000\020\005\037\007\040\010\036\016\033\054" +
    "\041\055\031\056\035\001\002\000\020\005\037\007\040" +
    "\010\036\016\033\054\041\055\031\056\035\001\002\000" +
    "\020\005\037\007\040\010\036\016\033\054\041\055\031" +
    "\056\035\001\002\000\020\005\037\007\040\010\036\016" +
    "\033\054\041\055\031\056\035\001\002\000\036\007\uffcc" +
    "\010\uffcc\011\uffcc\012\uffcc\013\051\014\uffcc\015\uffcc\020" +
    "\uffcc\021\uffcc\023\uffcc\024\uffcc\025\uffcc\030\uffcc\031\uffcc" +
    "\001\002\000\036\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\051\014\uffce\015\uffce\020\uffce\021\uffce\023\uffce\024\uffce" +
    "\025\uffce\030\uffce\031\uffce\001\002\000\036\007\uffcf\010" +
    "\uffcf\011\uffcf\012\uffcf\013\051\014\uffcf\015\uffcf\020\uffcf" +
    "\021\uffcf\023\uffcf\024\uffcf\025\uffcf\030\uffcf\031\uffcf\001" +
    "\002\000\036\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\051" +
    "\014\uffd0\015\uffd0\020\uffd0\021\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\030\uffd0\031\uffd0\001\002\000\036\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\051\014\uffcb\015\uffcb\020\uffcb\021" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\030\uffcb\031\uffcb\001\002" +
    "\000\036\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\051\014" +
    "\uffcd\015\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\030\uffcd\031\uffcd\001\002\000\004\026\061\001\002\000" +
    "\006\036\064\042\062\001\002\000\004\024\102\001\002" +
    "\000\010\027\074\036\073\042\072\001\002\000\020\005" +
    "\037\007\040\010\036\016\033\054\041\055\031\056\035" +
    "\001\002\000\004\024\066\001\002\000\020\032\005\034" +
    "\023\035\004\046\010\050\012\052\027\055\022\001\002" +
    "\000\026\027\ufff9\032\ufff9\034\ufff9\035\ufff9\036\ufff9\042" +
    "\ufff9\046\ufff9\050\ufff9\052\ufff9\055\ufff9\001\002\000\026" +
    "\027\uffe7\032\005\034\023\035\004\036\uffe7\042\uffe7\046" +
    "\010\050\012\052\027\055\022\001\002\000\026\027\ufffa" +
    "\032\ufffa\034\ufffa\035\ufffa\036\ufffa\042\ufffa\046\ufffa\050" +
    "\ufffa\052\ufffa\055\ufffa\001\002\000\004\024\100\001\002" +
    "\000\020\005\037\007\040\010\036\016\033\054\041\055" +
    "\031\056\035\001\002\000\032\002\uffe8\027\uffe8\032\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\040\uffe8\042\uffe8\046\uffe8\050" +
    "\uffe8\052\uffe8\055\uffe8\001\002\000\004\024\076\001\002" +
    "\000\020\032\005\034\023\035\004\046\010\050\012\052" +
    "\027\055\022\001\002\000\026\027\uffe6\032\005\034\023" +
    "\035\004\036\uffe6\042\uffe6\046\010\050\012\052\027\055" +
    "\022\001\002\000\020\032\005\034\023\035\004\046\010" +
    "\050\012\052\027\055\022\001\002\000\026\027\uffe5\032" +
    "\005\034\023\035\004\036\uffe5\042\uffe5\046\010\050\012" +
    "\052\027\055\022\001\002\000\020\032\005\034\023\035" +
    "\004\046\010\050\012\052\027\055\022\001\002\000\026" +
    "\027\uffe4\032\005\034\023\035\004\036\uffe4\042\uffe4\046" +
    "\010\050\012\052\027\055\022\001\002\000\036\007\uffd6" +
    "\010\uffd6\011\uffd6\012\uffd6\013\uffd6\014\uffd6\015\uffd6\020" +
    "\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\030\uffd6\031\uffd6" +
    "\001\002\000\036\007\uffd5\010\uffd5\011\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5" +
    "\025\uffd5\030\uffd5\031\uffd5\001\002\000\004\055\022\001" +
    "\002\000\022\005\037\007\040\010\036\016\033\025\110" +
    "\054\041\055\031\056\035\001\002\000\022\005\037\007" +
    "\040\010\036\016\033\025\110\054\041\055\031\056\035" +
    "\001\002\000\012\020\uffbe\023\uffbe\030\uffbe\031\uffbe\001" +
    "\002\000\010\023\126\030\127\031\130\001\002\000\034" +
    "\007\046\010\117\011\050\012\044\013\051\014\045\015" +
    "\116\020\uffc8\021\120\023\uffc8\025\114\030\uffc8\031\uffc8" +
    "\001\002\000\004\021\125\001\002\000\020\005\037\007" +
    "\040\010\036\016\033\054\041\055\031\056\035\001\002" +
    "\000\022\005\uffc3\007\uffc3\010\uffc3\016\uffc3\021\123\054" +
    "\uffc3\055\uffc3\056\uffc3\001\002\000\022\005\uffc2\007\uffc2" +
    "\010\uffc2\016\uffc2\021\122\054\uffc2\055\uffc2\056\uffc2\001" +
    "\002\000\004\021\121\001\002\000\020\005\uffc7\007\uffc7" +
    "\010\uffc7\016\uffc7\054\uffc7\055\uffc7\056\uffc7\001\002\000" +
    "\020\005\uffc4\007\uffc4\010\uffc4\016\uffc4\054\uffc4\055\uffc4" +
    "\056\uffc4\001\002\000\020\005\uffc5\007\uffc5\010\uffc5\016" +
    "\uffc5\054\uffc5\055\uffc5\056\uffc5\001\002\000\026\007\046" +
    "\010\047\011\050\012\044\013\051\014\045\020\uffc9\023" +
    "\uffc9\030\uffc9\031\uffc9\001\002\000\020\005\uffc6\007\uffc6" +
    "\010\uffc6\016\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000" +
    "\004\055\022\001\002\000\022\005\037\007\040\010\036" +
    "\016\033\025\110\054\041\055\031\056\035\001\002\000" +
    "\022\005\037\007\040\010\036\016\033\025\110\054\041" +
    "\055\031\056\035\001\002\000\012\020\uffc0\023\uffc0\030" +
    "\uffc0\031\uffc0\001\002\000\012\020\uffc1\023\uffc1\030\uffc1" +
    "\031\uffc1\001\002\000\010\007\135\010\136\022\134\001" +
    "\002\000\004\055\151\001\002\000\004\007\144\001\002" +
    "\000\004\010\137\001\002\000\004\020\140\001\002\000" +
    "\004\026\141\001\002\000\020\032\005\034\023\035\004" +
    "\046\010\050\012\052\027\055\022\001\002\000\022\027" +
    "\143\032\005\034\023\035\004\046\010\050\012\052\027" +
    "\055\022\001\002\000\032\002\uffe2\027\uffe2\032\uffe2\034" +
    "\uffe2\035\uffe2\036\uffe2\040\uffe2\042\uffe2\046\uffe2\050\uffe2" +
    "\052\uffe2\055\uffe2\001\002\000\004\020\145\001\002\000" +
    "\004\026\146\001\002\000\020\032\005\034\023\035\004" +
    "\046\010\050\012\052\027\055\022\001\002\000\022\027" +
    "\150\032\005\034\023\035\004\046\010\050\012\052\027" +
    "\055\022\001\002\000\032\002\uffe3\027\uffe3\032\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\040\uffe3\042\uffe3\046\uffe3\050\uffe3" +
    "\052\uffe3\055\uffe3\001\002\000\016\007\uffee\010\uffee\020" +
    "\uffee\022\uffee\023\uffee\024\uffee\001\002\000\012\020\uffbf" +
    "\023\uffbf\030\uffbf\031\uffbf\001\002\000\024\002\ufffe\032" +
    "\ufffe\034\ufffe\035\ufffe\040\ufffe\046\ufffe\050\ufffe\052\ufffe" +
    "\055\ufffe\001\002\000\004\002\001\001\002\000\024\002" +
    "\ufffb\032\ufffb\034\ufffb\035\ufffb\040\ufffb\046\ufffb\050\ufffb" +
    "\052\ufffb\055\ufffb\001\002\000\004\017\157\001\002\000" +
    "\006\020\161\055\022\001\002\000\006\020\165\022\134" +
    "\001\002\000\004\026\162\001\002\000\020\032\005\034" +
    "\023\035\004\046\010\050\012\052\027\055\022\001\002" +
    "\000\022\027\164\032\005\034\023\035\004\046\010\050" +
    "\012\052\027\055\022\001\002\000\024\002\uffde\032\uffde" +
    "\034\uffde\035\uffde\040\uffde\046\uffde\050\uffde\052\uffde\055" +
    "\uffde\001\002\000\004\026\166\001\002\000\020\032\005" +
    "\034\023\035\004\046\010\050\012\052\027\055\022\001" +
    "\002\000\022\027\170\032\005\034\023\035\004\046\010" +
    "\050\012\052\027\055\022\001\002\000\024\002\uffdf\032" +
    "\uffdf\034\uffdf\035\uffdf\040\uffdf\046\uffdf\050\uffdf\052\uffdf" +
    "\055\uffdf\001\002\000\022\005\037\007\040\010\036\016" +
    "\033\025\110\054\041\055\031\056\035\001\002\000\010" +
    "\020\173\030\127\031\130\001\002\000\004\026\174\001" +
    "\002\000\020\032\005\034\023\035\004\046\010\050\012" +
    "\052\027\055\022\001\002\000\022\027\176\032\005\034" +
    "\023\035\004\046\010\050\012\052\027\055\022\001\002" +
    "\000\032\002\uffe1\027\uffe1\032\uffe1\034\uffe1\035\uffe1\036" +
    "\uffe1\040\uffe1\042\uffe1\046\uffe1\050\uffe1\052\uffe1\055\uffe1" +
    "\001\002\000\020\005\037\007\040\010\036\016\033\054" +
    "\041\055\031\056\035\001\002\000\020\007\046\010\047" +
    "\011\050\012\044\013\051\014\045\020\201\001\002\000" +
    "\004\023\202\001\002\000\032\002\uffe0\027\uffe0\032\uffe0" +
    "\034\uffe0\035\uffe0\036\uffe0\040\uffe0\042\uffe0\046\uffe0\050" +
    "\uffe0\052\uffe0\055\uffe0\001\002\000\020\005\037\007\040" +
    "\010\036\016\033\054\041\055\031\056\035\001\002\000" +
    "\004\023\205\001\002\000\050\002\uffec\005\uffec\007\uffec" +
    "\010\uffec\016\uffec\025\uffec\027\uffec\032\uffec\034\uffec\035" +
    "\uffec\036\uffec\040\uffec\042\uffec\046\uffec\050\uffec\052\uffec" +
    "\054\uffec\055\uffec\056\uffec\001\002\000\022\005\037\007" +
    "\040\010\036\016\033\025\110\054\041\055\031\056\035" +
    "\001\002\000\010\020\210\030\127\031\130\001\002\000" +
    "\004\026\211\001\002\000\020\032\005\034\023\035\004" +
    "\046\010\050\012\052\027\055\022\001\002\000\022\027" +
    "\214\032\005\034\023\035\004\046\010\050\012\052\027" +
    "\055\022\001\002\000\004\027\221\001\002\000\034\002" +
    "\uffea\027\uffea\032\uffea\033\215\034\uffea\035\uffea\036\uffea" +
    "\040\uffea\042\uffea\046\uffea\050\uffea\052\uffea\055\uffea\001" +
    "\002\000\004\026\216\001\002\000\020\032\005\034\023" +
    "\035\004\046\010\050\012\052\027\055\022\001\002\000" +
    "\022\027\220\032\005\034\023\035\004\046\010\050\012" +
    "\052\027\055\022\001\002\000\004\027\uffe9\001\002\000" +
    "\032\002\uffeb\027\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\040\uffeb\042\uffeb\046\uffeb\050\uffeb\052\uffeb\055\uffeb\001" +
    "\002\000\010\022\134\023\225\024\224\001\002\000\032" +
    "\002\ufff2\027\ufff2\032\ufff2\034\ufff2\035\ufff2\036\ufff2\040" +
    "\ufff2\042\ufff2\046\ufff2\050\ufff2\052\ufff2\055\ufff2\001\002" +
    "\000\022\005\037\007\040\010\036\016\033\026\226\054" +
    "\041\055\031\056\035\001\002\000\032\002\ufff1\027\ufff1" +
    "\032\ufff1\034\ufff1\035\ufff1\036\ufff1\040\ufff1\042\ufff1\046" +
    "\ufff1\050\ufff1\052\ufff1\055\ufff1\001\002\000\002\001\002" +
    "\000\004\023\230\001\002\000\032\002\ufff0\027\ufff0\032" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\040\ufff0\042\ufff0\046\ufff0" +
    "\050\ufff0\052\ufff0\055\ufff0\001\002\000\004\027\232\001" +
    "\002\000\004\023\233\001\002\000\032\002\uffef\027\uffef" +
    "\032\uffef\034\uffef\035\uffef\036\uffef\040\uffef\042\uffef\046" +
    "\uffef\050\uffef\052\uffef\055\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\231\000\032\002\015\003\025\004\016\005\010\006" +
    "\020\007\005\012\014\013\024\015\013\017\006\021\017" +
    "\022\023\001\001\000\006\007\221\014\222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\005\152\006\020\007\005\012\014\013" +
    "\024\015\013\017\006\021\017\022\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\031\027\033\030\042\033" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\031\027" +
    "\033\030\056\001\001\000\010\026\031\027\033\030\055" +
    "\001\001\000\010\026\031\027\033\030\054\001\001\000" +
    "\010\026\031\027\033\030\053\001\001\000\010\026\031" +
    "\027\033\030\052\001\001\000\010\026\031\027\033\030" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\026\031\027\033\030" +
    "\042\033\064\001\001\000\002\001\001\000\024\006\020" +
    "\007\005\011\067\012\066\013\024\015\013\017\006\021" +
    "\017\022\023\001\001\000\002\001\001\000\022\006\020" +
    "\007\005\012\070\013\024\015\013\017\006\021\017\022" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\031\027\033\030\042\033\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\006\020\007\005\011\076" +
    "\012\066\013\024\015\013\017\006\021\017\022\023\001" +
    "\001\000\022\006\020\007\005\012\070\013\024\015\013" +
    "\017\006\021\017\022\023\001\001\000\024\006\020\007" +
    "\005\011\100\012\066\013\024\015\013\017\006\021\017" +
    "\022\023\001\001\000\022\006\020\007\005\012\070\013" +
    "\024\015\013\017\006\021\017\022\023\001\001\000\024" +
    "\006\020\007\005\011\102\012\066\013\024\015\013\017" +
    "\006\021\017\022\023\001\001\000\022\006\020\007\005" +
    "\012\070\013\024\015\013\017\006\021\017\022\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\005" +
    "\013\106\001\001\000\014\026\031\027\033\030\112\031" +
    "\110\032\111\001\001\000\014\026\031\027\033\030\112" +
    "\031\110\032\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\034\114\001\001\000\002\001\001\000\010" +
    "\026\031\027\033\030\123\001\001\000\002\001\001\000" +
    "\010\026\031\027\033\030\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\132\001\001" +
    "\000\014\026\031\027\033\030\112\031\110\032\131\001" +
    "\001\000\014\026\031\027\033\030\112\031\110\032\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\006\020\007" +
    "\005\011\141\012\066\013\024\015\013\017\006\021\017" +
    "\022\023\001\001\000\022\006\020\007\005\012\070\013" +
    "\024\015\013\017\006\021\017\022\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\020\007\005\011\146\012\066\013\024\015\013\017\006" +
    "\021\017\022\023\001\001\000\022\006\020\007\005\012" +
    "\070\013\024\015\013\017\006\021\017\022\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\006\020\007\005\011\162\012\066" +
    "\013\024\015\013\017\006\021\017\022\023\001\001\000" +
    "\022\006\020\007\005\012\070\013\024\015\013\017\006" +
    "\021\017\022\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\020\007\005\011\166\012\066\013\024" +
    "\015\013\017\006\021\017\022\023\001\001\000\022\006" +
    "\020\007\005\012\070\013\024\015\013\017\006\021\017" +
    "\022\023\001\001\000\002\001\001\000\014\026\031\027" +
    "\033\030\112\031\110\032\171\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\006\020\007\005\011\174\012" +
    "\066\013\024\015\013\017\006\021\017\022\023\001\001" +
    "\000\022\006\020\007\005\012\070\013\024\015\013\017" +
    "\006\021\017\022\023\001\001\000\002\001\001\000\010" +
    "\026\031\027\033\030\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\031\027\033" +
    "\030\042\033\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\026\031\027\033\030\112\031\110\032\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\006" +
    "\020\007\005\011\211\012\066\013\024\015\013\017\006" +
    "\021\017\022\023\001\001\000\024\006\020\007\005\012" +
    "\070\013\024\015\013\016\212\017\006\021\017\022\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\006\020\007\005\011\216\012\066\013\024" +
    "\015\013\017\006\021\017\022\023\001\001\000\022\006" +
    "\020\007\005\012\070\013\024\015\013\017\006\021\017" +
    "\022\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\031\027\033" +
    "\030\042\033\226\001\001\000\002\001\001\000\004\010" +
    "\230\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_CJS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_CJS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_CJS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Nodo_error> Errores = new ArrayList<Nodo_error>();
    public static boolean errores=false;
    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right) +", Linea: "+(s.left+1)+ " no esperado");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }

 /*codig de usuario */
 String total = "";
 public NCJS RCJS = null;
 //public ArrayList<Nodo> e = new ArrayList<Nodo>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_CJS$actions {


    public String estado="";

  private final Sintactico_CJS parser;

  /** Constructor */
  CUP$Sintactico_CJS$actions(Sintactico_CJS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_CJS$do_action_part00000000(
    int                        CUP$Sintactico_CJS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_CJS$parser,
    java.util.Stack            CUP$Sintactico_CJS$stack,
    int                        CUP$Sintactico_CJS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_CJS$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_CJS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_CJS$parser.done_parsing();
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= UNO 
            {
              Object RESULT =null;

              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UNO ::= ESTRUCTURA_FUN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		 RCJS=e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("UNO",1, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESTRUCTURA_FUN ::= ESTRUCTURA_FUN ESTRUCTURA_FUN1 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="cuerpo"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUN",2, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA_FUN ::= ESTRUCTURA_FUN1 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="cuerpo"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUN",2, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA_FUN1 ::= ESTRUCTURA_CUERPO_P 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es cuu"); RESULT=e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUN1",3, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ESTRUCTURA_FUN1 ::= RFUN ESTRUCTURA_FUNCI 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("entro a funcion"); RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUN1",3, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ESTRUCTURA_CUERPO ::= ESTRUCTURA_CUERPO ESTRUCTURA_CUERPO_P 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("MAS DE UNA"); NCJS nuevo = new NCJS(); nuevo.etiqueta ="cuerpo"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_CUERPO ::= ESTRUCTURA_CUERPO_P 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("entro a cuerpo");NCJS nuevo = new NCJS(); nuevo.etiqueta ="cuerpo"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO",7, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_ASIGNAR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es ASG");RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_SI 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es SI");RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_SELE 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es SEL");RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_PARA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es PAR");RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_MIEN 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es MIE");RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURA_CUERPO_P ::= ESTRUCTURA_IMPRI 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es IMP");RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURA_CUERPO_P ::= RDIM ESTRUCTURA_DEC_VAR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es DEC");RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CUERPO_P",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURA_DEC_VAR ::= LISTA_VAR SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="variable"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DEC_VAR",10, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTRUCTURA_DEC_VAR ::= LISTA_VAR SDPN EXPRESION SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="variable"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DEC_VAR",10, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTRUCTURA_DEC_VAR ::= LISTA_VAR SDPN SILL LISTA_EXP SFLL SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="variable"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_DEC_VAR",10, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_VAR ::= LISTA_VAR SCOM PID 
            {
              NCJS RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="ID"; nuevo.valor=e1.toString(); e2.hijos.add(nuevo); RESULT=e2;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_VAR ::= PID 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="ID"; nuevo.valor=e1.toString(); RESULT=nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("LISTA_VAR",5, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTRUCTURA_ASIGNAR ::= LISTA_VAR SDPN EXPRESION SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="asignar"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ASIGNAR",9, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ESTRUCTURA_SI ::= RSI SIPA OP_LOGICA SFPA SILL ESTRUCTURA_CUERPO ESTRUCTURA_SINO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="si"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); if(e3!=null){nuevo.hijos.add(e3);} RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESTRUCTURA_SI ::= RSI SIPA OP_LOGICA SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="si"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SI",11, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ESTRUCTURA_SINO ::= SFLL RSIN SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="sino"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SINO",12, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ESTRUCTURA_SELE ::= RSEL SIPA EXPRESION SFPA SILL CUERPO_SELEC SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="seleccion"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_SELE",13, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_SELEC ::= RCAS EXPRESION SDPN ESTRUCTURA_CUERPO 
            {
              NCJS RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="caso"; nuevo.hijos.add(e2); nuevo.hijos.add(e3); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELEC",14, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CUERPO_SELEC ::= CUERPO_SELEC RCAS EXPRESION SDPN ESTRUCTURA_CUERPO 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="caso"; nuevo.hijos.add(e2); nuevo.hijos.add(e3); e1.hijos.add(nuevo); RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELEC",14, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CUERPO_SELEC ::= CUERPO_SELEC RDEF SDPN ESTRUCTURA_CUERPO 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="default"; nuevo.hijos.add(e3); e1.hijos.add(nuevo); RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELEC",14, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CUERPO_SELEC ::= RDEF SDPN ESTRUCTURA_CUERPO 
            {
              NCJS RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="default"; nuevo.hijos.add(e3); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("CUERPO_SELEC",14, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ESTRUCTURA_PARA ::= RPAR SIPA ESTRUCTURA_ASIGNAR OP_LOGICA SPYC LISTA_VAR SMAS SMAS SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-9)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e4 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="para"; nuevo.valor="sumar"; nuevo.hijos.add(e1);  nuevo.hijos.add(e2); nuevo.hijos.add(e3); nuevo.hijos.add(e4);RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PARA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ESTRUCTURA_PARA ::= RPAR SIPA ESTRUCTURA_ASIGNAR OP_LOGICA SPYC LISTA_VAR SMEN SMEN SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-9)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-9)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-9)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-8)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e4 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="para"; nuevo.valor="restar"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); nuevo.hijos.add(e3); nuevo.hijos.add(e4);RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_PARA",15, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-11)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ESTRUCTURA_MIEN ::= RMIE SIPA OP_LOGICA SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="mientras"; nuevo.hijos.add(e1);nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MIEN",16, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ESTRUCTURA_IMPRI ::= RIMP SIPA OP_ARITMETICA SFPA SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="imprimir"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_IMPRI",4, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESTRUCTURA_FUNCI ::= PID SIPA LISTA_VAR SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="funcion"; nuevo.valor=e1.toString(); nuevo.hijos.add(e2); nuevo.hijos.add(e3);RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCI",17, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTRUCTURA_FUNCI ::= PID SIPA SFPA SILL ESTRUCTURA_CUERPO SFLL 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		NCJS e3 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="funcion"; nuevo.valor=e1.toString(); nuevo.hijos.add(e3);RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FUNCI",17, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ESTRUCTURA_MENS ::= RMEN SIPA EXPRESION SFPA SPYC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="mensaje"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_MENS",18, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ESTRUCTURA_VARIAS ::= PID SPUN RCON 
            {
              NCJS RESULT =null;
		
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VARIAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ESTRUCTURA_VARIAS ::= PID SPUN RATE 
            {
              NCJS RESULT =null;
		
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VARIAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESTRUCTURA_VARIAS ::= RDOC SPUN ROBT SIPA EXPRESION SFPA 
            {
              NCJS RESULT =null;
		
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VARIAS",19, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // A_VAR ::= PCOM 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("COM");NCJS nuevo = new NCJS(); nuevo.etiqueta ="string"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // A_VAR ::= PNUM 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("NUM");NCJS nuevo = new NCJS(); nuevo.etiqueta ="doble"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // A_VAR ::= PFEC 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es fecha");NCJS nuevo = new NCJS(); nuevo.etiqueta ="fecha";  nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // A_VAR ::= SMAS PNUM 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("NUM");NCJS nuevo = new NCJS(); nuevo.etiqueta ="doble"; nuevo.valor=e1.toString();RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // A_VAR ::= SMEN PNUM 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("-NUM");NCJS nuevo = new NCJS(); nuevo.etiqueta ="doble"; nuevo.valor="-"+e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // A_VAR ::= PHOR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		System.out.println("es hora");NCJS nuevo = new NCJS(); nuevo.etiqueta ="hora";   nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("A_VAR",20, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Estructura_VAR ::= PID 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		 NCJS nuevo = new NCJS(); nuevo.etiqueta ="ID";      nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Estructura_VAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Estructura_VAR ::= A_VAR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Estructura_VAR",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP_ARITMETICA ::= OP_ARITMETICA SMAS OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="+"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP_ARITMETICA ::= OP_ARITMETICA SMEN OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="-"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP_ARITMETICA ::= OP_ARITMETICA SMUL OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="*"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP_ARITMETICA ::= OP_ARITMETICA SDIV OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="/"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_ARITMETICA ::= OP_ARITMETICA SPOT OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="^"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_ARITMETICA ::= OP_ARITMETICA SMOD OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="%"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_ARITMETICA ::= Estructura_VAR 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP_COMPARACION ::= OP_ARITMETICA Tipo_COMPARACION OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).right;
		String e3 = (String)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPC"; nuevo.valor=e3; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",23, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP_COMPARACION ::= OP_ARITMETICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_COMPARACION",23, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_COMPARACION ::= SIGU SIGU 
            {
              String RESULT =null;
		RESULT ="==";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_COMPARACION ::= SNOT SIGU 
            {
              String RESULT =null;
		RESULT ="!=";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_COMPARACION ::= SMAY SIGU 
            {
              String RESULT =null;
		RESULT =">=";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo_COMPARACION ::= SMEN SIGU 
            {
              String RESULT =null;
		RESULT ="<=";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo_COMPARACION ::= SMAY 
            {
              String RESULT =null;
		RESULT =">";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo_COMPARACION ::= SMEN 
            {
              String RESULT =null;
		RESULT ="<";
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("Tipo_COMPARACION",26, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OP_LOGICA ::= OP_LOGICA SOR OP_LOGICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPL"; nuevo.valor="OR";  nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",24, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OP_LOGICA ::= OP_LOGICA SAND OP_LOGICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e2 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPL"; nuevo.valor="AND"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",24, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // OP_LOGICA ::= SNOT OP_LOGICA 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPL"; nuevo.valor="NOT"; nuevo.hijos.add(e1);                       RESULT = nuevo;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",24, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.elementAt(CUP$Sintactico_CJS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // OP_LOGICA ::= OP_COMPARACION 
            {
              NCJS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()).right;
		NCJS e1 = (NCJS)((java_cup.runtime.Symbol) CUP$Sintactico_CJS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CJS$result = parser.getSymbolFactory().newSymbol("OP_LOGICA",24, ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CJS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CJS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_CJS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_CJS$do_action(
    int                        CUP$Sintactico_CJS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_CJS$parser,
    java.util.Stack            CUP$Sintactico_CJS$stack,
    int                        CUP$Sintactico_CJS$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_CJS$do_action_part00000000(
                               CUP$Sintactico_CJS$act_num,
                               CUP$Sintactico_CJS$parser,
                               CUP$Sintactico_CJS$stack,
                               CUP$Sintactico_CJS$top);
    }
}

}
