/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
import java_cup.runtime.*;
import java.io.Reader;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico_CCSS</tt>
 */
public class lexico_CCSS implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\52\1\53\1\5\1\54\1\53\1\53\16\52\4\0\1\53\1\0"+
    "\1\2\1\0\1\51\3\0\1\17\1\20\1\4\1\6\1\13\1\7"+
    "\1\10\1\3\12\1\1\11\1\12\1\0\1\14\3\0\1\31\1\35"+
    "\1\43\1\22\1\24\1\42\1\32\1\44\1\21\1\50\1\51\1\27"+
    "\1\37\1\45\1\26\1\34\1\36\1\30\1\41\1\23\1\33\1\40"+
    "\1\51\1\25\1\47\1\46\1\15\1\0\1\16\1\0\1\51\1\0"+
    "\1\31\1\35\1\43\1\22\1\24\1\42\1\32\1\44\1\21\1\50"+
    "\1\51\1\27\1\37\1\45\1\26\1\34\1\36\1\30\1\41\1\23"+
    "\1\33\1\40\1\51\1\25\1\47\1\46\1\0\1\53\2\0\6\52"+
    "\1\55\32\52\2\0\4\51\4\0\1\51\2\0\1\52\7\0\1\51"+
    "\4\0\1\51\5\0\27\51\1\0\37\51\1\0\70\51\2\21\115\51"+
    "\1\41\u0142\51\4\0\14\51\16\0\5\51\7\0\1\51\1\0\1\51"+
    "\21\0\160\52\5\51\1\0\2\51\2\0\4\51\10\0\1\51\1\0"+
    "\3\51\1\0\1\51\1\0\24\51\1\0\123\51\1\0\213\51\1\0"+
    "\5\52\2\0\236\51\11\0\46\51\2\0\1\51\7\0\47\51\7\0"+
    "\1\51\1\0\55\52\1\0\1\52\1\0\2\52\1\0\2\52\1\0"+
    "\1\52\10\0\33\51\5\0\3\51\15\0\5\52\6\0\1\51\4\0"+
    "\13\52\5\0\53\51\37\52\4\0\2\51\1\52\143\51\1\0\1\51"+
    "\10\52\1\0\6\52\2\51\2\52\1\0\4\52\2\51\12\52\3\51"+
    "\2\0\1\51\17\0\1\52\1\51\1\52\36\51\33\52\2\0\131\51"+
    "\13\52\1\51\16\0\12\52\41\51\11\52\2\51\4\0\1\51\5\0"+
    "\26\51\4\52\1\51\11\52\1\51\3\52\1\51\5\52\22\0\31\51"+
    "\3\52\104\0\1\51\1\0\13\51\67\0\33\52\1\0\4\52\66\51"+
    "\3\52\1\51\22\52\1\51\7\52\12\51\2\52\2\0\12\52\1\0"+
    "\7\51\1\0\7\51\1\0\3\52\1\0\10\51\2\0\2\51\2\0"+
    "\26\51\1\0\7\51\1\0\1\51\3\0\4\51\2\0\1\52\1\51"+
    "\7\52\2\0\2\52\2\0\3\52\1\51\10\0\1\52\4\0\2\51"+
    "\1\0\3\51\2\52\2\0\12\52\4\51\7\0\1\51\5\0\3\52"+
    "\1\0\6\51\4\0\2\51\2\0\26\51\1\0\7\51\1\0\2\51"+
    "\1\0\2\51\1\0\2\51\2\0\1\52\1\0\5\52\4\0\2\52"+
    "\2\0\3\52\3\0\1\52\7\0\4\51\1\0\1\51\7\0\14\52"+
    "\3\51\1\52\13\0\3\52\1\0\11\51\1\0\3\51\1\0\26\51"+
    "\1\0\7\51\1\0\2\51\1\0\5\51\2\0\1\52\1\51\10\52"+
    "\1\0\3\52\1\0\3\52\2\0\1\51\17\0\2\51\2\52\2\0"+
    "\12\52\1\0\1\51\17\0\3\52\1\0\10\51\2\0\2\51\2\0"+
    "\26\51\1\0\7\51\1\0\2\51\1\0\5\51\2\0\1\52\1\51"+
    "\7\52\2\0\2\52\2\0\3\52\10\0\2\52\4\0\2\51\1\0"+
    "\3\51\2\52\2\0\12\52\1\0\1\51\20\0\1\52\1\51\1\0"+
    "\6\51\3\0\3\51\1\0\4\51\3\0\2\51\1\0\1\51\1\0"+
    "\2\51\3\0\2\51\3\0\3\51\3\0\14\51\4\0\5\52\3\0"+
    "\3\52\1\0\4\52\2\0\1\51\6\0\1\52\16\0\12\52\11\0"+
    "\1\51\7\0\3\52\1\0\10\51\1\0\3\51\1\0\27\51\1\0"+
    "\12\51\1\0\5\51\3\0\1\51\7\52\1\0\3\52\1\0\4\52"+
    "\7\0\2\52\1\0\2\51\6\0\2\51\2\52\2\0\12\52\22\0"+
    "\2\52\1\0\10\51\1\0\3\51\1\0\27\51\1\0\12\51\1\0"+
    "\5\51\2\0\1\52\1\51\7\52\1\0\3\52\1\0\4\52\7\0"+
    "\2\52\7\0\1\51\1\0\2\51\2\52\2\0\12\52\1\0\2\51"+
    "\17\0\2\52\1\0\10\51\1\0\3\51\1\0\51\51\2\0\1\51"+
    "\7\52\1\0\3\52\1\0\4\52\1\51\10\0\1\52\10\0\2\51"+
    "\2\52\2\0\12\52\12\0\6\51\2\0\2\52\1\0\22\51\3\0"+
    "\30\51\1\0\11\51\1\0\1\51\2\0\7\51\3\0\1\52\4\0"+
    "\6\52\1\0\1\52\1\0\10\52\22\0\2\52\15\0\60\51\1\52"+
    "\2\51\7\52\4\0\10\51\10\52\1\0\12\52\47\0\2\51\1\0"+
    "\1\51\2\0\2\51\1\0\1\51\2\0\1\51\6\0\4\51\1\0"+
    "\7\51\1\0\3\51\1\0\1\51\1\0\1\51\2\0\2\51\1\0"+
    "\4\51\1\52\2\51\6\52\1\0\2\52\1\51\2\0\5\51\1\0"+
    "\1\51\1\0\6\52\2\0\12\52\2\0\4\51\40\0\1\51\27\0"+
    "\2\52\6\0\12\52\13\0\1\52\1\0\1\52\1\0\1\52\4\0"+
    "\2\52\10\51\1\0\44\51\4\0\24\52\1\0\2\52\5\51\13\52"+
    "\1\0\44\52\11\0\1\52\71\0\53\51\24\52\1\51\12\52\6\0"+
    "\6\51\4\52\4\51\3\52\1\51\3\52\2\51\7\52\3\51\4\52"+
    "\15\51\14\52\1\51\17\52\2\0\46\51\1\0\1\51\5\0\1\51"+
    "\2\0\53\51\1\0\u014d\51\1\0\4\51\2\0\7\51\1\0\1\51"+
    "\1\0\4\51\2\0\51\51\1\0\4\51\2\0\41\51\1\0\4\51"+
    "\2\0\7\51\1\0\1\51\1\0\4\51\2\0\17\51\1\0\71\51"+
    "\1\0\4\51\2\0\103\51\2\0\3\52\40\0\20\51\20\0\125\51"+
    "\14\0\u026c\51\2\0\21\51\1\0\32\51\5\0\113\51\3\0\3\51"+
    "\17\0\15\51\1\0\4\51\3\52\13\0\22\51\3\52\13\0\22\51"+
    "\2\52\14\0\15\51\1\0\3\51\1\0\2\52\14\0\64\51\40\52"+
    "\3\0\1\51\3\0\2\51\1\52\2\0\12\52\41\0\3\52\2\0"+
    "\12\52\6\0\130\51\10\0\51\51\1\52\1\51\5\0\106\51\12\0"+
    "\35\51\3\0\14\52\4\0\14\52\12\0\12\52\36\51\2\0\5\51"+
    "\13\0\54\51\4\0\21\52\7\51\2\52\6\0\12\52\46\0\27\51"+
    "\5\52\4\0\65\51\12\52\1\0\35\52\2\0\13\52\6\0\12\52"+
    "\15\0\1\51\130\0\5\52\57\51\21\52\7\51\4\0\12\52\21\0"+
    "\11\52\14\0\3\52\36\51\15\52\2\51\12\52\54\51\16\52\14\0"+
    "\44\51\24\52\10\0\12\52\3\0\3\51\12\52\44\51\122\0\3\52"+
    "\1\0\25\52\4\51\1\52\4\51\3\52\2\51\11\0\300\51\47\52"+
    "\25\0\4\52\u0116\51\2\0\6\51\2\0\46\51\2\0\6\51\2\0"+
    "\10\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0\37\51\2\0"+
    "\65\51\1\0\7\51\1\0\1\51\3\0\3\51\1\0\7\51\3\0"+
    "\4\51\2\0\6\51\4\0\15\51\5\0\3\51\1\0\7\51\16\0"+
    "\5\52\30\0\1\54\1\54\5\52\20\0\2\51\23\0\1\51\13\0"+
    "\5\52\5\0\6\52\1\0\1\51\15\0\1\51\20\0\15\51\3\0"+
    "\33\51\25\0\15\52\4\0\1\52\3\0\14\52\21\0\1\51\4\0"+
    "\1\51\2\0\12\51\1\0\1\51\3\0\5\51\6\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\4\51\1\0\13\51\2\0\4\51\5\0"+
    "\5\51\4\0\1\51\21\0\51\51\u0a77\0\57\51\1\0\57\51\1\0"+
    "\205\51\6\0\4\51\3\52\2\51\14\0\46\51\1\0\1\51\5\0"+
    "\1\51\2\0\70\51\7\0\1\51\17\0\1\52\27\51\11\0\7\51"+
    "\1\0\7\51\1\0\7\51\1\0\7\51\1\0\7\51\1\0\7\51"+
    "\1\0\7\51\1\0\7\51\1\0\40\52\57\0\1\51\u01d5\0\3\51"+
    "\31\0\11\51\6\52\1\0\5\51\2\0\5\51\4\0\126\51\2\0"+
    "\2\52\2\0\3\51\1\0\132\51\1\0\4\51\5\0\51\51\3\0"+
    "\136\51\21\0\33\51\65\0\20\51\u0200\0\u19b6\51\112\0\u51cd\51\63\0"+
    "\u048d\51\103\0\56\51\2\0\u010d\51\3\0\20\51\12\52\2\51\24\0"+
    "\57\51\1\52\4\0\12\52\1\0\31\51\7\0\1\52\120\51\2\52"+
    "\45\0\11\51\2\0\147\51\2\0\4\51\1\0\4\51\14\0\13\51"+
    "\115\0\12\51\1\52\3\51\1\52\4\51\1\52\27\51\5\52\20\0"+
    "\1\51\7\0\64\51\14\0\2\52\62\51\21\52\13\0\12\52\6\0"+
    "\22\52\6\51\3\0\1\51\4\0\12\52\34\51\10\52\2\0\27\51"+
    "\15\52\14\0\35\51\3\0\4\52\57\51\16\52\16\0\1\51\12\52"+
    "\46\0\51\51\16\52\11\0\3\51\1\52\10\51\2\52\2\0\12\52"+
    "\6\0\27\51\3\0\1\51\1\52\4\0\60\51\1\52\1\51\3\52"+
    "\2\51\2\52\5\51\2\52\1\51\1\52\1\51\30\0\3\51\2\0"+
    "\13\51\5\52\2\0\3\51\2\52\12\0\6\51\2\0\6\51\2\0"+
    "\6\51\11\0\7\51\1\0\7\51\221\0\43\51\10\52\1\0\2\52"+
    "\2\0\12\52\6\0\u2ba4\51\14\0\27\51\4\0\61\51\u2104\0\u016e\51"+
    "\2\0\152\51\46\0\7\51\14\0\5\51\5\0\1\51\1\52\12\51"+
    "\1\0\15\51\1\0\5\51\1\0\1\51\1\0\2\51\1\0\2\51"+
    "\1\0\154\51\41\0\u016b\51\22\0\100\51\2\0\66\51\50\0\15\51"+
    "\3\0\20\52\20\0\7\52\14\0\2\51\30\0\3\51\31\0\1\51"+
    "\6\0\5\51\1\0\207\51\2\0\1\52\4\0\1\51\13\0\12\52"+
    "\7\0\32\51\4\0\1\51\1\0\32\51\13\0\131\51\3\0\6\51"+
    "\2\0\6\51\2\0\6\51\2\0\3\51\3\0\2\51\3\0\2\51"+
    "\22\0\3\52\4\0\14\51\1\0\32\51\1\0\23\51\1\0\2\51"+
    "\1\0\17\51\2\0\16\51\42\0\173\51\105\0\65\51\210\0\1\52"+
    "\202\0\35\51\3\0\61\51\57\0\37\51\21\0\33\51\65\0\36\51"+
    "\2\0\44\51\4\0\10\51\1\0\5\51\52\0\236\51\2\0\12\52"+
    "\u0356\0\6\51\2\0\1\51\1\0\54\51\1\0\2\51\3\0\1\51"+
    "\2\0\27\51\252\0\26\51\12\0\32\51\106\0\70\51\6\0\2\51"+
    "\100\0\1\51\3\52\1\0\2\52\5\0\4\52\4\51\1\0\3\51"+
    "\1\0\33\51\4\0\3\52\4\0\1\52\40\0\35\51\203\0\66\51"+
    "\12\0\26\51\12\0\23\51\215\0\111\51\u03b7\0\3\52\65\51\17\52"+
    "\37\0\12\52\20\0\3\52\55\51\13\52\2\0\1\52\22\0\31\51"+
    "\7\0\12\52\6\0\3\52\44\51\16\52\1\0\12\52\100\0\3\52"+
    "\60\51\16\52\4\51\13\0\12\52\u04a6\0\53\51\15\52\10\0\12\52"+
    "\u0936\0\u036f\51\221\0\143\51\u0b9d\0\u042f\51\u33d1\0\u0239\51\u04c7\0\105\51"+
    "\13\0\1\51\56\52\20\0\4\52\15\51\u4060\0\2\51\u2163\0\5\52"+
    "\3\0\26\52\2\0\7\52\36\0\4\52\224\0\3\52\u01bb\0\125\51"+
    "\1\0\107\51\1\0\2\51\2\0\1\51\2\0\2\51\2\0\4\51"+
    "\1\0\14\51\1\0\1\51\1\0\7\51\1\0\101\51\1\0\4\51"+
    "\2\0\10\51\1\0\7\51\1\0\34\51\1\0\4\51\1\0\5\51"+
    "\1\0\1\51\3\0\7\51\1\0\u0154\51\2\0\31\51\1\0\31\51"+
    "\1\0\37\51\1\0\31\51\1\0\37\51\1\0\31\51\1\0\37\51"+
    "\1\0\31\51\1\0\37\51\1\0\31\51\1\0\10\51\2\0\62\52"+
    "\u1600\0\4\51\1\0\33\51\1\0\2\51\1\0\1\51\2\0\1\51"+
    "\1\0\12\51\1\0\4\51\1\0\1\51\1\0\1\51\6\0\1\51"+
    "\4\0\1\51\1\0\1\51\1\0\1\51\1\0\3\51\1\0\2\51"+
    "\1\0\1\51\2\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\2\51\1\0\1\51\2\0\4\51\1\0\7\51"+
    "\1\0\4\51\1\0\4\51\1\0\1\51\1\0\12\51\1\0\21\51"+
    "\5\0\3\51\1\0\5\51\1\0\21\51\u1144\0\ua6d7\51\51\0\u1035\51"+
    "\13\0\336\51\u3fe2\0\u021e\51\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\52\36\0\140\52\200\0\360\52\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\20\21\4\0\1\22\26\21\1\2\1\23"+
    "\2\0\27\21\1\24\1\0\30\21\1\5\2\21\1\25"+
    "\3\21\1\26\2\21\1\27\1\30\21\21\1\31\20\21"+
    "\1\32\1\33\5\21\1\34\1\21\1\35\4\21\1\36"+
    "\5\21\1\37\3\21\1\40\1\21\1\41\3\21\1\42"+
    "\1\21\1\43\2\21\1\44\1\45\1\21\1\46\1\47"+
    "\5\21\1\50\1\21\1\51\2\21\1\52\3\21\1\53"+
    "\1\21\1\54";

  private static int [] zzUnpackAction() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\56\0\346\0\56"+
    "\0\56\0\56\0\56\0\56\0\56\0\56\0\56\0\56"+
    "\0\56\0\56\0\u0114\0\u0142\0\u0170\0\u019e\0\u01cc\0\u01fa"+
    "\0\u0228\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u019e\0\u04ac"+
    "\0\u04da\0\u0508\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c"+
    "\0\u064a\0\u0678\0\u06a6\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c"+
    "\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u0872\0\u03f4\0\u0422\0\u08a0"+
    "\0\u08ce\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4\0\u09e2\0\u0a10"+
    "\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u08a0\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32"+
    "\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\u0fa2"+
    "\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4\0\u1112"+
    "\0\u1140\0\u116e\0\u08ce\0\u119c\0\u11ca\0\u019e\0\u11f8\0\u1226"+
    "\0\u1254\0\u019e\0\u1282\0\u12b0\0\u019e\0\u019e\0\u12de\0\u130c"+
    "\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c"+
    "\0\u14aa\0\u14d8\0\u1506\0\u1534\0\u1562\0\u1590\0\u15be\0\u019e"+
    "\0\u15ec\0\u161a\0\u1648\0\u1676\0\u16a4\0\u16d2\0\u1700\0\u172e"+
    "\0\u175c\0\u178a\0\u17b8\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e"+
    "\0\u019e\0\u019e\0\u18cc\0\u18fa\0\u1928\0\u1956\0\u1984\0\u019e"+
    "\0\u19b2\0\u019e\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u019e\0\u1a98"+
    "\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u019e\0\u1b7e\0\u1bac\0\u1bda"+
    "\0\u019e\0\u1c08\0\u019e\0\u1c36\0\u1c64\0\u1c92\0\u019e\0\u1cc0"+
    "\0\u019e\0\u1cee\0\u1d1c\0\u019e\0\u019e\0\u1d4a\0\u019e\0\u019e"+
    "\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u019e\0\u1e5e\0\u019e"+
    "\0\u1e8c\0\u1eba\0\u019e\0\u1ee8\0\u1f16\0\u1f44\0\u019e\0\u1f72"+
    "\0\u019e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\2\26\1\27\1\30\1\26"+
    "\1\31\1\32\2\26\1\33\1\26\1\34\1\35\1\26"+
    "\1\36\1\37\1\40\1\41\2\26\1\42\1\26\1\2"+
    "\1\7\61\0\1\3\6\0\1\43\45\0\56\44\3\0"+
    "\1\45\1\46\56\0\1\7\45\0\1\7\3\0\1\26"+
    "\5\0\1\26\11\0\1\26\1\47\23\26\1\50\4\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\3\26"+
    "\1\51\26\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\3\26\1\52\4\26\1\53\21\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\32\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\13\26\1\54\16\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\3\26"+
    "\1\55\26\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\6\26\1\56\3\26\1\57\17\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\7\26\1\60\22\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\5\26"+
    "\1\61\24\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\1\62\7\26\1\63\21\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\1\64\2\26\1\65\26\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\5\26"+
    "\1\66\24\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\3\26\1\67\1\26\1\70\2\26\1\71\1\26"+
    "\1\72\17\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\5\26\1\73\24\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\3\26\1\74\26\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\12\26\1\75\17\26"+
    "\2\0\1\26\1\0\1\76\54\0\2\44\1\77\53\44"+
    "\56\100\56\101\1\0\1\26\5\0\1\26\11\0\15\26"+
    "\1\102\14\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\7\26\1\103\22\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\4\26\1\104\25\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\16\26\1\105\13\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\10\26"+
    "\1\106\21\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\2\26\1\107\27\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\1\110\31\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\2\26\1\111\27\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\12\26\1\112"+
    "\17\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\7\26\1\113\22\26\2\0\1\26\1\0\1\26\5\0"+
    "\1\26\11\0\24\26\1\114\5\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\26\26\1\115\3\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\20\26\1\116"+
    "\11\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\7\26\1\117\22\26\2\0\1\26\1\0\1\26\5\0"+
    "\1\26\11\0\7\26\1\120\14\26\1\121\5\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\24\26\1\122"+
    "\5\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\6\26\1\123\23\26\2\0\1\26\1\0\1\26\5\0"+
    "\1\26\11\0\13\26\1\124\16\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\7\26\1\125\22\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\7\26\1\126"+
    "\22\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\11\26\1\127\20\26\2\0\1\26\1\0\1\26\5\0"+
    "\1\26\11\0\20\26\1\130\11\26\2\0\1\26\5\100"+
    "\1\131\50\100\4\101\1\132\51\101\1\0\1\26\5\0"+
    "\1\26\11\0\12\26\1\133\17\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\3\26\1\134\26\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\2\26\1\135"+
    "\27\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\2\26\1\136\1\137\26\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\15\26\1\140\14\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\7\26\1\141\22\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\24\26"+
    "\1\142\5\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\5\26\1\143\24\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\13\26\1\144\16\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\1\26\1\145\30\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\12\26"+
    "\1\146\17\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\12\26\1\147\17\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\1\150\31\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\2\26\1\151\27\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\16\26\1\152"+
    "\13\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\1\26\1\153\30\26\2\0\1\26\1\0\1\26\5\0"+
    "\1\26\11\0\2\26\1\154\27\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\5\26\1\155\24\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\1\156\31\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\20\26"+
    "\1\157\11\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\1\160\31\26\2\0\1\26\1\0\1\26\5\0"+
    "\1\26\11\0\7\26\1\161\22\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\2\26\1\162\27\26\2\0"+
    "\1\26\3\101\1\163\1\132\51\101\1\0\1\26\5\0"+
    "\1\26\11\0\1\164\31\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\22\26\1\165\7\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\5\26\1\166\24\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\3\26"+
    "\1\167\26\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\6\26\1\170\23\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\12\26\1\171\17\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\10\26\1\172\21\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\3\26"+
    "\1\173\26\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\7\26\1\174\22\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\5\26\1\175\24\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\3\26\1\176\26\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\20\26"+
    "\1\177\11\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\20\26\1\200\11\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\14\26\1\201\15\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\1\202\31\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\10\26\1\203"+
    "\21\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\5\26\1\204\24\26\2\0\1\26\1\0\1\26\5\0"+
    "\1\26\11\0\7\26\1\205\22\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\7\26\1\206\22\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\2\26\1\207"+
    "\27\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\1\210\31\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\25\26\1\211\4\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\1\212\31\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\1\213\31\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\3\26\1\214\26\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\23\26"+
    "\1\215\6\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\4\26\1\216\25\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\3\26\1\217\26\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\3\26\1\220\26\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\10\26"+
    "\1\221\21\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\3\26\1\222\26\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\22\26\1\223\7\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\22\26\1\224\7\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\6\26"+
    "\1\225\23\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\22\26\1\226\7\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\2\26\1\227\27\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\3\26\1\230\26\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\10\26"+
    "\1\231\21\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\2\26\1\232\27\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\10\26\1\233\21\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\17\26\1\234\12\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\5\26"+
    "\1\235\24\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\6\26\1\236\23\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\21\26\1\237\10\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\7\26\1\240\22\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\10\26"+
    "\1\241\21\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\2\26\1\242\27\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\16\26\1\243\13\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\1\26\1\244\30\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\1\26"+
    "\1\245\30\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\12\26\1\246\17\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\12\26\1\247\17\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\3\26\1\250\26\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\10\26"+
    "\1\251\21\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\5\26\1\252\24\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\6\26\1\253\23\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\1\26\1\254\30\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\3\26"+
    "\1\255\26\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\6\26\1\256\23\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\10\26\1\257\21\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\24\26\1\260\5\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\6\26"+
    "\1\261\23\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\1\262\31\26\2\0\1\26\1\0\1\26\5\0"+
    "\1\26\11\0\1\26\1\263\30\26\2\0\1\26\1\0"+
    "\1\26\5\0\1\26\11\0\3\26\1\264\26\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\5\26\1\265"+
    "\24\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\1\266\31\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\6\26\1\267\23\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\6\26\1\270\23\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\6\26\1\271\23\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\3\26"+
    "\1\272\26\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\5\26\1\273\24\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\4\26\1\274\25\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\275\11\0\32\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\2\26\1\276\27\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\10\26"+
    "\1\277\21\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\22\26\1\300\7\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\10\26\1\301\21\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\24\26\1\302\5\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\16\26"+
    "\1\303\13\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\10\26\1\304\21\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\10\26\1\305\21\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\16\26\1\306\13\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\2\26"+
    "\1\307\27\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\2\26\1\310\27\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\10\26\1\311\21\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\10\26\1\312\21\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\2\26"+
    "\1\313\27\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\3\26\1\314\26\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\3\26\1\315\26\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\6\26\1\316\23\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\1\26"+
    "\1\317\30\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\5\26\1\320\24\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\24\26\1\321\5\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\24\26\1\322\5\26"+
    "\2\0\1\26\1\0\1\26\5\0\1\26\11\0\5\26"+
    "\1\323\24\26\2\0\1\26\1\0\1\26\5\0\1\26"+
    "\11\0\20\26\1\324\11\26\2\0\1\26\1\0\1\26"+
    "\5\0\1\26\11\0\2\26\1\325\27\26\2\0\1\26"+
    "\1\0\1\26\5\0\1\26\11\0\1\326\31\26\2\0"+
    "\1\26\1\0\1\26\5\0\1\26\11\0\5\26\1\327"+
    "\24\26\2\0\1\26\1\0\1\26\5\0\1\26\11\0"+
    "\5\26\1\330\24\26\2\0\1\26\1\0\1\26\5\0"+
    "\1\26\11\0\24\26\1\331\5\26\2\0\1\26";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8096];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\1\1\13\11\20\1\4\0"+
    "\31\1\2\0\30\1\1\0\177\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[217];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
    private Symbol Symbol(int type){
        return new Symbol(type ,yyline, yycolumn);
    }
    private Symbol Symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    public static void errorLexico(String error,int x, int y ){
       errores+="error lexico \""+error+"\" en linea: "+Integer.toString(y)+" colulmna: "+Integer.toString(x)+"\n";
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_CCSS(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2908) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter Invalido: "+yytext()+" Linea: "+ (int)(yyline+1)+" columa:"+(int)yycolumn+";");
            }
          case 45: break;
          case 2: 
            { return new Symbol(symc.PNUM,yyline,yycolumn,yytext());
            }
          case 46: break;
          case 3: 
            { return new Symbol(symc.SDIV,yyline,yycolumn,yytext());
            }
          case 47: break;
          case 4: 
            { return new Symbol(symc.SMUL,yyline,yycolumn,yytext());
            }
          case 48: break;
          case 5: 
            { /*Ignore*/
            }
          case 49: break;
          case 6: 
            { return new Symbol(symc.SMAS,yyline,yycolumn,yytext());
            }
          case 50: break;
          case 7: 
            { return new Symbol(symc.SMEN,yyline,yycolumn,yytext());
            }
          case 51: break;
          case 8: 
            { return new Symbol(symc.SPUN,yyline,yycolumn,yytext());
            }
          case 52: break;
          case 9: 
            { return new Symbol(symc.SDPU,yyline,yycolumn,yytext());
            }
          case 53: break;
          case 10: 
            { return new Symbol(symc.SPYC,yyline,yycolumn,yytext());
            }
          case 54: break;
          case 11: 
            { return new Symbol(symc.SCOM,yyline,yycolumn,yytext());
            }
          case 55: break;
          case 12: 
            { return new Symbol(symc.SIGU,yyline,yycolumn,yytext());
            }
          case 56: break;
          case 13: 
            { return new Symbol(symc.SICO,yyline,yycolumn,yytext());
            }
          case 57: break;
          case 14: 
            { return new Symbol(symc.SFCO,yyline,yycolumn,yytext());
            }
          case 58: break;
          case 15: 
            { return new Symbol(symc.SIPA,yyline,yycolumn,yytext());
            }
          case 59: break;
          case 16: 
            { return new Symbol(symc.SFPA,yyline,yycolumn,yytext());
            }
          case 60: break;
          case 17: 
            { return new Symbol(symc.PID,yyline, yycolumn,yytext());
            }
          case 61: break;
          case 18: 
            { return new Symbol(symc.RID,yyline,yycolumn,yytext());
            }
          case 62: break;
          case 19: 
            { return new Symbol(symc.PCOM,yyline,yycolumn,yytext());
            }
          case 63: break;
          case 20: 
            { System.out.println("comentario");/*Ignorar*/
            }
          case 64: break;
          case 21: 
            { return new Symbol(symc.RTEX,yyline,yycolumn,yytext());
            }
          case 65: break;
          case 22: 
            { return new Symbol(symc.RLET,yyline,yycolumn,yytext());
            }
          case 66: break;
          case 23: 
            { return new Symbol(symc.RGRU,yyline,yycolumn,yytext());
            }
          case 67: break;
          case 24: 
            { return new Symbol(symc.RBOR,yyline,yycolumn,yytext());
            }
          case 68: break;
          case 25: 
            { return new Symbol(symc.ROPA,yyline,yycolumn,yytext());
            }
          case 69: break;
          case 26: 
            { return new Symbol(symc.RDER,yyline,yycolumn,yytext());
            }
          case 70: break;
          case 27: 
            { return new Symbol(symc.RTAM,yyline,yycolumn,yytext());
            }
          case 71: break;
          case 28: 
            { return new Symbol(symc.RVIS,yyline,yycolumn,yytext());
            }
          case 72: break;
          case 29: 
            { return new Symbol(symc.RFOR,yyline,yycolumn,yytext());
            }
          case 73: break;
          case 30: 
            { return new Symbol(symc.RCUR,yyline,yycolumn,yytext());
            }
          case 74: break;
          case 31: 
            { return new Symbol(symc.RALI,yyline,yycolumn,yytext());
            }
          case 75: break;
          case 32: 
            { return new Symbol(symc.RVER,yyline,yycolumn,yytext());
            }
          case 76: break;
          case 33: 
            { return new Symbol(symc.RCEN,yyline,yycolumn,yytext());
            }
          case 77: break;
          case 34: 
            { return new Symbol(symc.RNEG,yyline,yycolumn,yytext());
            }
          case 78: break;
          case 35: 
            { return new Symbol(symc.RIZQ,yyline,yycolumn,yytext());
            }
          case 79: break;
          case 36: 
            { return new Symbol(symc.RMIN,yyline,yycolumn,yytext());
            }
          case 80: break;
          case 37: 
            { return new Symbol(symc.RMAY,yyline,yycolumn,yytext());
            }
          case 81: break;
          case 38: 
            { return new Symbol(symc.RCOL,yyline,yycolumn,yytext());
            }
          case 82: break;
          case 39: 
            { return new Symbol(symc.RCAP,yyline,yycolumn,yytext());
            }
          case 83: break;
          case 40: 
            { return new Symbol(symc.RHOR,yyline,yycolumn,yytext());
            }
          case 84: break;
          case 41: 
            { return new Symbol(symc.RTAE,yyline,yycolumn,yytext());
            }
          case 85: break;
          case 42: 
            { return new Symbol(symc.RJUS,yyline,yycolumn,yytext());
            }
          case 86: break;
          case 43: 
            { return new Symbol(symc.RFEL,yyline,yycolumn,yytext());
            }
          case 87: break;
          case 44: 
            { return new Symbol(symc.RAUR,yyline,yycolumn,yytext());
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
