/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
import java_cup.runtime.*;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico_CHTML</tt>
 */
public class lexico_chtml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYCABEZA = 2;
  public static final int YYCUERPO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\34\1\1\1\1\1\42\1\1\1\1\16\34\4\0\1\1\1\0"+
    "\1\2\1\0\1\34\10\0\1\16\1\0\1\5\12\34\1\0\1\31"+
    "\1\3\1\30\1\4\2\0\1\20\1\21\1\6\1\23\1\17\1\13"+
    "\1\36\1\7\1\14\1\32\1\41\1\12\1\11\1\15\1\24\1\27"+
    "\1\34\1\26\1\33\1\10\1\25\1\40\1\34\1\35\1\34\1\22"+
    "\4\0\1\37\1\0\1\20\1\21\1\6\1\23\1\17\1\13\1\36"+
    "\1\7\1\14\1\32\1\41\1\12\1\11\1\15\1\24\1\27\1\34"+
    "\1\26\1\33\1\10\1\25\1\40\1\34\1\35\1\34\1\22\1\0"+
    "\1\1\2\0\6\34\1\43\32\34\2\0\4\34\4\0\1\34\2\0"+
    "\1\34\7\0\1\34\4\0\1\34\5\0\27\34\1\0\37\34\1\0"+
    "\70\34\2\14\115\34\1\33\u0142\34\4\0\14\34\16\0\5\34\7\0"+
    "\1\34\1\0\1\34\21\0\160\34\5\34\1\0\2\34\2\0\4\34"+
    "\10\0\1\34\1\0\3\34\1\0\1\34\1\0\24\34\1\0\123\34"+
    "\1\0\213\34\1\0\5\34\2\0\236\34\11\0\46\34\2\0\1\34"+
    "\7\0\47\34\7\0\1\34\1\0\55\34\1\0\1\34\1\0\2\34"+
    "\1\0\2\34\1\0\1\34\10\0\33\34\5\0\3\34\15\0\5\34"+
    "\6\0\1\34\4\0\13\34\5\0\53\34\37\34\4\0\2\34\1\34"+
    "\143\34\1\0\1\34\10\34\1\0\6\34\2\34\2\34\1\0\4\34"+
    "\2\34\12\34\3\34\2\0\1\34\17\0\1\34\1\34\1\34\36\34"+
    "\33\34\2\0\131\34\13\34\1\34\16\0\12\34\41\34\11\34\2\34"+
    "\4\0\1\34\5\0\26\34\4\34\1\34\11\34\1\34\3\34\1\34"+
    "\5\34\22\0\31\34\3\34\104\0\1\34\1\0\13\34\67\0\33\34"+
    "\1\0\4\34\66\34\3\34\1\34\22\34\1\34\7\34\12\34\2\34"+
    "\2\0\12\34\1\0\7\34\1\0\7\34\1\0\3\34\1\0\10\34"+
    "\2\0\2\34\2\0\26\34\1\0\7\34\1\0\1\34\3\0\4\34"+
    "\2\0\1\34\1\34\7\34\2\0\2\34\2\0\3\34\1\34\10\0"+
    "\1\34\4\0\2\34\1\0\3\34\2\34\2\0\12\34\4\34\7\0"+
    "\1\34\5\0\3\34\1\0\6\34\4\0\2\34\2\0\26\34\1\0"+
    "\7\34\1\0\2\34\1\0\2\34\1\0\2\34\2\0\1\34\1\0"+
    "\5\34\4\0\2\34\2\0\3\34\3\0\1\34\7\0\4\34\1\0"+
    "\1\34\7\0\14\34\3\34\1\34\13\0\3\34\1\0\11\34\1\0"+
    "\3\34\1\0\26\34\1\0\7\34\1\0\2\34\1\0\5\34\2\0"+
    "\1\34\1\34\10\34\1\0\3\34\1\0\3\34\2\0\1\34\17\0"+
    "\2\34\2\34\2\0\12\34\1\0\1\34\17\0\3\34\1\0\10\34"+
    "\2\0\2\34\2\0\26\34\1\0\7\34\1\0\2\34\1\0\5\34"+
    "\2\0\1\34\1\34\7\34\2\0\2\34\2\0\3\34\10\0\2\34"+
    "\4\0\2\34\1\0\3\34\2\34\2\0\12\34\1\0\1\34\20\0"+
    "\1\34\1\34\1\0\6\34\3\0\3\34\1\0\4\34\3\0\2\34"+
    "\1\0\1\34\1\0\2\34\3\0\2\34\3\0\3\34\3\0\14\34"+
    "\4\0\5\34\3\0\3\34\1\0\4\34\2\0\1\34\6\0\1\34"+
    "\16\0\12\34\11\0\1\34\7\0\3\34\1\0\10\34\1\0\3\34"+
    "\1\0\27\34\1\0\12\34\1\0\5\34\3\0\1\34\7\34\1\0"+
    "\3\34\1\0\4\34\7\0\2\34\1\0\2\34\6\0\2\34\2\34"+
    "\2\0\12\34\22\0\2\34\1\0\10\34\1\0\3\34\1\0\27\34"+
    "\1\0\12\34\1\0\5\34\2\0\1\34\1\34\7\34\1\0\3\34"+
    "\1\0\4\34\7\0\2\34\7\0\1\34\1\0\2\34\2\34\2\0"+
    "\12\34\1\0\2\34\17\0\2\34\1\0\10\34\1\0\3\34\1\0"+
    "\51\34\2\0\1\34\7\34\1\0\3\34\1\0\4\34\1\34\10\0"+
    "\1\34\10\0\2\34\2\34\2\0\12\34\12\0\6\34\2\0\2\34"+
    "\1\0\22\34\3\0\30\34\1\0\11\34\1\0\1\34\2\0\7\34"+
    "\3\0\1\34\4\0\6\34\1\0\1\34\1\0\10\34\22\0\2\34"+
    "\15\0\60\34\1\34\2\34\7\34\4\0\10\34\10\34\1\0\12\34"+
    "\47\0\2\34\1\0\1\34\2\0\2\34\1\0\1\34\2\0\1\34"+
    "\6\0\4\34\1\0\7\34\1\0\3\34\1\0\1\34\1\0\1\34"+
    "\2\0\2\34\1\0\4\34\1\34\2\34\6\34\1\0\2\34\1\34"+
    "\2\0\5\34\1\0\1\34\1\0\6\34\2\0\12\34\2\0\4\34"+
    "\40\0\1\34\27\0\2\34\6\0\12\34\13\0\1\34\1\0\1\34"+
    "\1\0\1\34\4\0\2\34\10\34\1\0\44\34\4\0\24\34\1\0"+
    "\2\34\5\34\13\34\1\0\44\34\11\0\1\34\71\0\53\34\24\34"+
    "\1\34\12\34\6\0\6\34\4\34\4\34\3\34\1\34\3\34\2\34"+
    "\7\34\3\34\4\34\15\34\14\34\1\34\17\34\2\0\46\34\1\0"+
    "\1\34\5\0\1\34\2\0\53\34\1\0\u014d\34\1\0\4\34\2\0"+
    "\7\34\1\0\1\34\1\0\4\34\2\0\51\34\1\0\4\34\2\0"+
    "\41\34\1\0\4\34\2\0\7\34\1\0\1\34\1\0\4\34\2\0"+
    "\17\34\1\0\71\34\1\0\4\34\2\0\103\34\2\0\3\34\40\0"+
    "\20\34\20\0\125\34\14\0\u026c\34\2\0\21\34\1\0\32\34\5\0"+
    "\113\34\3\0\3\34\17\0\15\34\1\0\4\34\3\34\13\0\22\34"+
    "\3\34\13\0\22\34\2\34\14\0\15\34\1\0\3\34\1\0\2\34"+
    "\14\0\64\34\40\34\3\0\1\34\3\0\2\34\1\34\2\0\12\34"+
    "\41\0\3\34\2\0\12\34\6\0\130\34\10\0\51\34\1\34\1\34"+
    "\5\0\106\34\12\0\35\34\3\0\14\34\4\0\14\34\12\0\12\34"+
    "\36\34\2\0\5\34\13\0\54\34\4\0\21\34\7\34\2\34\6\0"+
    "\12\34\46\0\27\34\5\34\4\0\65\34\12\34\1\0\35\34\2\0"+
    "\13\34\6\0\12\34\15\0\1\34\130\0\5\34\57\34\21\34\7\34"+
    "\4\0\12\34\21\0\11\34\14\0\3\34\36\34\15\34\2\34\12\34"+
    "\54\34\16\34\14\0\44\34\24\34\10\0\12\34\3\0\3\34\12\34"+
    "\44\34\122\0\3\34\1\0\25\34\4\34\1\34\4\34\3\34\2\34"+
    "\11\0\300\34\47\34\25\0\4\34\u0116\34\2\0\6\34\2\0\46\34"+
    "\2\0\6\34\2\0\10\34\1\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\37\34\2\0\65\34\1\0\7\34\1\0\1\34\3\0\3\34"+
    "\1\0\7\34\3\0\4\34\2\0\6\34\4\0\15\34\5\0\3\34"+
    "\1\0\7\34\16\0\5\34\30\0\1\42\1\42\5\34\20\0\2\34"+
    "\23\0\1\34\13\0\5\34\5\0\6\34\1\0\1\34\15\0\1\34"+
    "\20\0\15\34\3\0\33\34\25\0\15\34\4\0\1\34\3\0\14\34"+
    "\21\0\1\34\4\0\1\34\2\0\12\34\1\0\1\34\3\0\5\34"+
    "\6\0\1\34\1\0\1\34\1\0\1\34\1\0\1\41\3\34\1\0"+
    "\13\34\2\0\4\34\5\0\5\34\4\0\1\34\21\0\51\34\u0a77\0"+
    "\57\34\1\0\57\34\1\0\205\34\6\0\4\34\3\34\2\34\14\0"+
    "\46\34\1\0\1\34\5\0\1\34\2\0\70\34\7\0\1\34\17\0"+
    "\1\34\27\34\11\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34"+
    "\1\0\7\34\1\0\7\34\1\0\7\34\1\0\7\34\1\0\40\34"+
    "\57\0\1\34\u01d5\0\3\34\31\0\11\34\6\34\1\0\5\34\2\0"+
    "\5\34\4\0\126\34\2\0\2\34\2\0\3\34\1\0\132\34\1\0"+
    "\4\34\5\0\51\34\3\0\136\34\21\0\33\34\65\0\20\34\u0200\0"+
    "\u19b6\34\112\0\u51cd\34\63\0\u048d\34\103\0\56\34\2\0\u010d\34\3\0"+
    "\20\34\12\34\2\34\24\0\57\34\1\34\4\0\12\34\1\0\31\34"+
    "\7\0\1\34\120\34\2\34\45\0\11\34\2\0\147\34\2\0\4\34"+
    "\1\0\4\34\14\0\13\34\115\0\12\34\1\34\3\34\1\34\4\34"+
    "\1\34\27\34\5\34\20\0\1\34\7\0\64\34\14\0\2\34\62\34"+
    "\21\34\13\0\12\34\6\0\22\34\6\34\3\0\1\34\4\0\12\34"+
    "\34\34\10\34\2\0\27\34\15\34\14\0\35\34\3\0\4\34\57\34"+
    "\16\34\16\0\1\34\12\34\46\0\51\34\16\34\11\0\3\34\1\34"+
    "\10\34\2\34\2\0\12\34\6\0\27\34\3\0\1\34\1\34\4\0"+
    "\60\34\1\34\1\34\3\34\2\34\2\34\5\34\2\34\1\34\1\34"+
    "\1\34\30\0\3\34\2\0\13\34\5\34\2\0\3\34\2\34\12\0"+
    "\6\34\2\0\6\34\2\0\6\34\11\0\7\34\1\0\7\34\221\0"+
    "\43\34\10\34\1\0\2\34\2\0\12\34\6\0\u2ba4\34\14\0\27\34"+
    "\4\0\61\34\u2104\0\u016e\34\2\0\152\34\46\0\7\34\14\0\5\34"+
    "\5\0\1\34\1\34\12\34\1\0\15\34\1\0\5\34\1\0\1\34"+
    "\1\0\2\34\1\0\2\34\1\0\154\34\41\0\u016b\34\22\0\100\34"+
    "\2\0\66\34\50\0\15\34\3\0\20\34\20\0\7\34\14\0\2\34"+
    "\30\0\3\34\31\0\1\34\6\0\5\34\1\0\207\34\2\0\1\34"+
    "\4\0\1\34\13\0\12\34\7\0\32\34\4\0\1\34\1\0\32\34"+
    "\13\0\131\34\3\0\6\34\2\0\6\34\2\0\6\34\2\0\3\34"+
    "\3\0\2\34\3\0\2\34\22\0\3\34\4\0\14\34\1\0\32\34"+
    "\1\0\23\34\1\0\2\34\1\0\17\34\2\0\16\34\42\0\173\34"+
    "\105\0\65\34\210\0\1\34\202\0\35\34\3\0\61\34\57\0\37\34"+
    "\21\0\33\34\65\0\36\34\2\0\44\34\4\0\10\34\1\0\5\34"+
    "\52\0\236\34\2\0\12\34\u0356\0\6\34\2\0\1\34\1\0\54\34"+
    "\1\0\2\34\3\0\1\34\2\0\27\34\252\0\26\34\12\0\32\34"+
    "\106\0\70\34\6\0\2\34\100\0\1\34\3\34\1\0\2\34\5\0"+
    "\4\34\4\34\1\0\3\34\1\0\33\34\4\0\3\34\4\0\1\34"+
    "\40\0\35\34\203\0\66\34\12\0\26\34\12\0\23\34\215\0\111\34"+
    "\u03b7\0\3\34\65\34\17\34\37\0\12\34\20\0\3\34\55\34\13\34"+
    "\2\0\1\34\22\0\31\34\7\0\12\34\6\0\3\34\44\34\16\34"+
    "\1\0\12\34\100\0\3\34\60\34\16\34\4\34\13\0\12\34\u04a6\0"+
    "\53\34\15\34\10\0\12\34\u0936\0\u036f\34\221\0\143\34\u0b9d\0\u042f\34"+
    "\u33d1\0\u0239\34\u04c7\0\105\34\13\0\1\34\56\34\20\0\4\34\15\34"+
    "\u4060\0\2\34\u2163\0\5\34\3\0\26\34\2\0\7\34\36\0\4\34"+
    "\224\0\3\34\u01bb\0\125\34\1\0\107\34\1\0\2\34\2\0\1\34"+
    "\2\0\2\34\2\0\4\34\1\0\14\34\1\0\1\34\1\0\7\34"+
    "\1\0\101\34\1\0\4\34\2\0\10\34\1\0\7\34\1\0\34\34"+
    "\1\0\4\34\1\0\5\34\1\0\1\34\3\0\7\34\1\0\u0154\34"+
    "\2\0\31\34\1\0\31\34\1\0\37\34\1\0\31\34\1\0\37\34"+
    "\1\0\31\34\1\0\37\34\1\0\31\34\1\0\37\34\1\0\31\34"+
    "\1\0\10\34\2\0\62\34\u1600\0\4\34\1\0\33\34\1\0\2\34"+
    "\1\0\1\34\2\0\1\34\1\0\12\34\1\0\4\34\1\0\1\34"+
    "\1\0\1\34\6\0\1\34\4\0\1\34\1\0\1\34\1\0\1\34"+
    "\1\0\3\34\1\0\2\34\1\0\1\34\2\0\1\34\1\0\1\34"+
    "\1\0\1\34\1\0\1\34\1\0\1\34\1\0\2\34\1\0\1\34"+
    "\2\0\4\34\1\0\7\34\1\0\4\34\1\0\4\34\1\0\1\34"+
    "\1\0\12\34\1\0\21\34\5\0\3\34\1\0\5\34\1\0\21\34"+
    "\u1144\0\ua6d7\34\51\0\u1035\34\13\0\336\34\u3fe2\0\u021e\34\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\34\36\0\140\34\200\0\360\34\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\5\1\6\5\1\6"+
    "\1\7\16\10\6\0\4\5\1\0\1\5\1\11\2\10"+
    "\1\12\6\10\1\13\3\10\1\0\10\10\1\2\4\0"+
    "\1\14\1\5\1\15\3\5\24\10\4\0\1\16\1\5"+
    "\1\0\1\17\1\10\1\20\3\10\1\0\3\10\1\21"+
    "\4\10\1\17\5\10\1\22\3\0\1\5\3\0\1\23"+
    "\1\10\1\24\1\25\1\26\11\0\1\27\3\10\1\30"+
    "\1\31\1\10\1\32\2\10\1\33\1\34\1\35\2\0"+
    "\1\36\4\0\2\10\1\37\1\0\1\40\12\0\1\41"+
    "\1\42\1\10\1\43\1\0\1\10\3\0\1\44\2\0"+
    "\1\10\1\45\13\0\1\10\1\0\1\46\2\0\1\47"+
    "\2\0\1\10\1\50\12\0\1\51\1\0\1\52\3\0"+
    "\1\10\2\0\1\53\1\54\1\55\2\0\1\56\1\0"+
    "\1\57\1\0\1\60\1\61\1\62\1\0\1\63\1\0"+
    "\1\64\1\0\1\65\1\0\1\66\3\0\1\67\1\70"+
    "\1\71\4\0\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\154\0\264"+
    "\0\330\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4"+
    "\0\u01f8\0\u021c\0\154\0\154\0\u0240\0\u0264\0\u0288\0\u02ac"+
    "\0\u02d0\0\u02f4\0\u0318\0\u033c\0\u0360\0\u0384\0\u03a8\0\u03cc"+
    "\0\u03f0\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec"+
    "\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u0264\0\u05e8"+
    "\0\u060c\0\u0264\0\u0630\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4"+
    "\0\u0264\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0"+
    "\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\154\0\u08b8\0\u08dc"+
    "\0\u0900\0\u0924\0\154\0\u0948\0\u018c\0\u096c\0\u0990\0\u09b4"+
    "\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4"+
    "\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4"+
    "\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc\0\u0cf0\0\u0d14"+
    "\0\u018c\0\u0d38\0\u0d5c\0\u01f8\0\u0d80\0\u0da4\0\u0dc8\0\u0dec"+
    "\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0264\0\u0ec4\0\u0ee8"+
    "\0\u0f0c\0\u0f30\0\u0630\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4"+
    "\0\154\0\u1008\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0"+
    "\0\u0264\0\u1104\0\u1128\0\u0630\0\u0264\0\u114c\0\u1170\0\u1194"+
    "\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248\0\u126c\0\u0264\0\u1290"+
    "\0\u12b4\0\u12d8\0\u0264\0\u0264\0\u12fc\0\u0264\0\u1320\0\u1344"+
    "\0\u0264\0\u0264\0\154\0\u1368\0\u138c\0\u018c\0\u13b0\0\u13d4"+
    "\0\u13f8\0\u141c\0\u1440\0\u1464\0\154\0\u1488\0\154\0\u14ac"+
    "\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560\0\u1584\0\u15a8\0\u15cc"+
    "\0\u15f0\0\u0264\0\u0264\0\u1614\0\u0264\0\u1638\0\u165c\0\u1680"+
    "\0\u16a4\0\u16c8\0\154\0\u16ec\0\u1710\0\u1734\0\u0630\0\u1758"+
    "\0\u177c\0\u17a0\0\u17c4\0\u17e8\0\u180c\0\u1830\0\u1854\0\u1878"+
    "\0\u189c\0\u18c0\0\u18e4\0\u1908\0\u0264\0\u192c\0\u1950\0\154"+
    "\0\u1974\0\u1998\0\u19bc\0\u19e0\0\u1a04\0\u1a28\0\u1a4c\0\u1a70"+
    "\0\u1a94\0\u1ab8\0\u1adc\0\u1b00\0\u1b24\0\u1b48\0\u0264\0\u1b6c"+
    "\0\154\0\u1b90\0\u1bb4\0\u1bd8\0\u1bfc\0\u1c20\0\u1c44\0\u1c68"+
    "\0\154\0\154\0\u1c8c\0\u1cb0\0\154\0\u1cd4\0\154\0\u1cf8"+
    "\0\154\0\154\0\154\0\u1d1c\0\u0264\0\u1d40\0\154\0\u1d64"+
    "\0\154\0\u1d88\0\154\0\u1dac\0\u1dd0\0\u1df4\0\154\0\154"+
    "\0\154\0\u1e18\0\u1e3c\0\u1e60\0\u1e84\0\154\0\154";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\4\4"+
    "\1\12\2\4\1\10\1\13\22\4\2\0\1\4\1\5"+
    "\1\14\1\6\1\7\1\10\1\15\1\16\1\17\2\16"+
    "\1\20\2\16\1\10\1\16\1\21\5\16\1\22\1\16"+
    "\1\23\1\24\10\16\1\0\1\16\1\4\1\5\1\14"+
    "\1\6\1\7\1\10\1\25\1\26\1\27\2\26\1\30"+
    "\1\31\1\26\1\10\1\32\1\33\1\34\2\26\1\35"+
    "\1\26\1\36\1\37\1\23\1\24\1\26\1\40\2\26"+
    "\1\41\1\26\1\42\1\26\1\0\1\26\45\0\1\5"+
    "\42\0\44\43\7\0\1\44\15\0\1\45\32\0\1\46"+
    "\44\0\1\47\26\0\44\50\6\0\1\51\7\16\1\0"+
    "\1\16\1\21\7\16\2\0\1\52\7\16\1\0\1\16"+
    "\6\0\10\16\1\0\1\16\1\21\7\16\2\0\10\16"+
    "\1\0\1\16\6\0\6\16\1\53\1\16\1\0\1\16"+
    "\1\21\7\16\2\0\10\16\1\0\1\16\6\0\6\16"+
    "\1\54\1\16\1\0\1\16\1\21\7\16\2\0\10\16"+
    "\1\0\1\16\6\0\10\16\1\55\1\16\1\21\7\16"+
    "\2\0\10\16\1\0\1\16\6\0\10\16\1\0\1\16"+
    "\1\21\4\16\1\56\2\16\2\0\10\16\1\0\1\16"+
    "\6\0\2\26\1\57\1\26\1\60\3\26\1\0\1\26"+
    "\1\61\1\62\6\26\2\0\10\26\1\0\1\26\6\0"+
    "\10\26\1\0\1\26\1\63\7\26\2\0\10\26\1\0"+
    "\1\26\6\0\10\26\1\0\1\64\1\65\7\26\2\0"+
    "\10\26\1\0\1\26\6\0\6\26\1\66\1\26\1\0"+
    "\1\26\1\63\3\26\1\67\3\26\2\0\10\26\1\0"+
    "\1\26\6\0\3\26\1\70\4\26\1\0\1\26\1\63"+
    "\2\26\1\71\4\26\2\0\10\26\1\0\1\26\6\0"+
    "\7\26\1\72\1\0\1\26\1\63\7\26\2\0\10\26"+
    "\1\0\1\26\6\0\4\26\1\73\2\26\1\74\1\75"+
    "\1\26\1\63\7\26\2\0\10\26\1\0\1\26\6\0"+
    "\10\26\1\0\1\26\1\63\3\26\1\76\3\26\2\0"+
    "\10\26\1\0\1\26\6\0\10\26\1\0\1\26\1\63"+
    "\6\26\1\77\2\0\10\26\1\0\1\26\6\0\10\26"+
    "\1\0\1\26\1\63\4\26\1\100\2\26\2\0\10\26"+
    "\1\0\1\26\6\0\10\26\1\0\1\26\1\101\7\26"+
    "\2\0\10\26\1\0\1\26\6\0\10\26\1\0\1\26"+
    "\1\102\6\26\1\103\2\0\10\26\1\0\1\26\6\0"+
    "\10\26\1\0\1\26\1\63\5\26\1\104\1\26\2\0"+
    "\10\26\1\0\1\26\6\0\10\26\1\0\1\26\1\105"+
    "\7\26\2\0\10\26\1\0\1\26\4\0\2\106\10\0"+
    "\1\106\35\0\1\107\52\0\1\110\41\0\1\111\34\0"+
    "\1\112\37\0\1\113\47\0\10\16\1\0\1\16\1\21"+
    "\7\16\2\0\1\16\1\114\6\16\1\0\1\16\6\0"+
    "\10\16\1\0\1\16\1\21\7\16\2\0\1\16\1\115"+
    "\6\16\1\0\1\16\6\0\2\16\1\116\5\16\1\0"+
    "\1\16\1\21\7\16\2\0\10\16\1\0\1\16\6\0"+
    "\7\16\1\117\1\0\1\16\1\21\7\16\2\0\10\16"+
    "\1\0\1\16\22\0\1\16\27\0\2\16\1\120\5\16"+
    "\1\0\1\16\1\21\7\16\2\0\10\16\1\0\1\16"+
    "\6\0\6\26\1\121\1\26\1\0\1\26\1\63\7\26"+
    "\2\0\10\26\1\0\1\26\6\0\10\26\1\75\1\26"+
    "\1\63\7\26\2\0\1\122\7\26\1\0\1\26\6\0"+
    "\10\26\1\75\1\26\1\63\7\26\2\0\10\26\1\0"+
    "\1\26\6\0\10\26\1\0\1\26\1\63\7\26\2\0"+
    "\3\26\1\123\4\26\1\0\1\26\6\0\10\26\1\75"+
    "\1\26\1\63\1\124\6\26\2\0\10\26\1\0\1\26"+
    "\6\0\4\26\1\125\2\26\1\126\1\0\1\26\1\63"+
    "\7\26\2\0\10\26\1\0\1\26\6\0\7\26\1\127"+
    "\1\0\1\26\1\63\7\26\2\0\10\26\1\0\1\26"+
    "\6\0\10\26\1\0\1\26\1\130\7\26\2\0\10\26"+
    "\1\0\1\26\6\0\4\26\1\131\3\26\1\0\1\26"+
    "\1\63\7\26\2\0\10\26\1\0\1\26\6\0\2\26"+
    "\1\132\3\26\1\133\1\26\1\0\1\26\1\63\7\26"+
    "\2\0\10\26\1\0\1\26\6\0\1\134\7\26\1\0"+
    "\1\26\1\63\7\26\2\0\10\26\1\0\1\26\22\0"+
    "\1\26\27\0\2\26\1\135\5\26\1\0\1\26\1\63"+
    "\7\26\2\0\10\26\1\0\1\26\6\0\1\136\7\26"+
    "\1\0\1\26\1\63\7\26\2\0\10\26\1\0\1\26"+
    "\6\0\2\26\1\137\5\26\1\0\1\26\1\63\7\26"+
    "\2\0\10\26\1\0\1\26\6\0\7\26\1\140\1\75"+
    "\1\26\1\63\7\26\2\0\10\26\1\0\1\26\6\0"+
    "\4\26\1\141\3\26\1\75\1\26\1\63\7\26\2\0"+
    "\10\26\1\0\1\26\6\0\6\26\1\142\1\26\1\0"+
    "\1\26\1\63\7\26\2\0\10\26\1\0\1\26\6\0"+
    "\10\26\1\0\1\26\1\63\4\26\1\143\2\26\2\0"+
    "\10\26\1\0\1\26\6\0\4\26\1\144\3\26\1\75"+
    "\1\26\1\63\7\26\2\0\10\26\1\0\1\26\11\0"+
    "\1\145\60\0\1\146\33\0\1\147\45\0\1\150\31\0"+
    "\10\16\1\0\1\16\1\21\7\16\2\0\1\16\1\151"+
    "\6\16\1\0\1\16\6\0\10\16\1\0\1\16\1\21"+
    "\4\16\1\152\2\16\2\0\10\16\1\0\1\16\6\0"+
    "\10\16\1\153\1\16\1\21\7\16\2\0\10\16\1\0"+
    "\1\16\6\0\10\16\1\0\1\16\1\154\7\16\2\0"+
    "\10\16\1\0\1\16\6\0\1\155\7\26\1\0\1\26"+
    "\1\63\7\26\2\0\10\26\1\0\1\26\6\0\10\26"+
    "\1\0\1\26\1\156\7\26\2\0\10\26\1\0\1\26"+
    "\6\0\2\26\1\157\5\26\1\0\1\26\1\63\7\26"+
    "\2\0\10\26\1\0\1\26\6\0\4\26\1\160\3\26"+
    "\1\0\1\26\1\63\7\26\2\0\10\26\1\0\1\26"+
    "\6\0\10\26\1\0\1\26\1\63\7\26\2\0\5\26"+
    "\1\161\2\26\1\0\1\26\6\0\10\26\1\162\1\26"+
    "\1\63\7\26\2\0\10\26\1\0\1\26\6\0\10\26"+
    "\1\0\1\26\1\63\2\26\1\163\4\26\2\0\10\26"+
    "\1\0\1\26\6\0\10\26\1\75\1\26\1\63\7\26"+
    "\2\0\4\26\1\164\3\26\1\0\1\26\6\0\10\26"+
    "\1\0\1\26\1\165\7\26\2\0\10\26\1\0\1\26"+
    "\6\0\10\26\1\0\1\26\1\63\3\26\1\166\3\26"+
    "\2\0\10\26\1\0\1\26\6\0\7\26\1\167\1\0"+
    "\1\26\1\63\7\26\2\0\10\26\1\0\1\26\6\0"+
    "\1\26\1\170\6\26\1\0\1\26\1\63\7\26\2\0"+
    "\10\26\1\0\1\26\6\0\10\26\1\0\1\26\1\63"+
    "\3\26\1\171\3\26\2\0\10\26\1\0\1\26\6\0"+
    "\6\26\1\172\1\26\1\0\1\26\1\63\7\26\2\0"+
    "\10\26\1\0\1\26\6\0\10\26\1\0\1\26\1\173"+
    "\7\26\2\0\10\26\1\0\1\26\6\0\10\26\1\0"+
    "\1\174\1\63\7\26\2\0\10\26\1\0\1\26\6\0"+
    "\2\26\1\175\5\26\1\0\1\26\1\63\7\26\2\0"+
    "\10\26\1\0\1\26\6\0\7\26\1\176\1\0\1\26"+
    "\1\63\7\26\2\0\10\26\1\0\1\26\6\0\10\26"+
    "\1\0\1\26\1\63\6\26\1\177\2\0\10\26\1\0"+
    "\1\26\6\0\10\26\1\0\1\26\1\63\3\26\1\200"+
    "\3\26\2\0\10\26\1\0\1\26\12\0\1\201\60\0"+
    "\1\202\22\0\1\203\56\0\1\204\30\0\4\16\1\205"+
    "\3\16\1\0\1\16\1\21\7\16\2\0\10\16\1\0"+
    "\1\16\6\0\1\206\1\0\1\207\6\0\1\210\32\0"+
    "\10\26\1\0\1\26\1\63\7\26\2\0\7\26\1\211"+
    "\1\0\1\26\6\0\10\26\1\75\1\26\1\63\7\26"+
    "\2\0\5\26\1\212\2\26\1\0\1\26\6\0\10\26"+
    "\1\0\1\26\1\63\3\26\1\213\3\26\2\0\10\26"+
    "\1\0\1\26\6\0\10\26\1\0\1\26\1\214\7\26"+
    "\2\0\10\26\1\0\1\26\6\0\2\26\1\215\5\26"+
    "\1\0\1\26\1\63\7\26\2\0\10\26\1\0\1\26"+
    "\6\0\1\216\1\0\1\217\2\0\1\220\1\221\2\0"+
    "\1\222\1\0\1\223\2\0\1\224\2\0\1\225\3\0"+
    "\1\226\16\0\10\26\1\0\1\26\1\63\3\26\1\227"+
    "\3\26\2\0\10\26\1\0\1\26\6\0\10\26\1\0"+
    "\1\230\1\63\7\26\2\0\10\26\1\0\1\26\6\0"+
    "\1\231\7\26\1\75\1\26\1\63\7\26\2\0\10\26"+
    "\1\0\1\26\6\0\10\26\1\0\1\232\1\63\7\26"+
    "\2\0\10\26\1\0\1\26\6\0\10\26\1\0\1\26"+
    "\1\63\3\26\1\233\3\26\2\0\10\26\1\0\1\26"+
    "\6\0\7\26\1\234\1\0\1\26\1\63\7\26\2\0"+
    "\10\26\1\0\1\26\6\0\10\26\1\0\1\26\1\63"+
    "\3\26\1\235\3\26\2\0\10\26\1\0\1\26\6\0"+
    "\4\26\1\236\3\26\1\0\1\26\1\63\7\26\2\0"+
    "\10\26\1\0\1\26\6\0\10\26\1\0\1\26\1\63"+
    "\3\26\1\237\3\26\2\0\10\26\1\0\1\26\6\0"+
    "\7\26\1\240\1\0\1\26\1\63\7\26\2\0\10\26"+
    "\1\0\1\26\6\0\10\26\1\0\1\26\1\63\3\26"+
    "\1\241\3\26\2\0\10\26\1\0\1\26\6\0\10\26"+
    "\1\0\1\26\1\63\5\26\1\242\1\26\2\0\10\26"+
    "\1\0\1\26\24\0\1\243\26\0\1\244\53\0\1\245"+
    "\32\0\10\16\1\0\1\16\1\21\3\16\1\246\3\16"+
    "\2\0\10\16\1\0\1\16\6\0\1\247\23\0\1\250"+
    "\25\0\1\251\44\0\1\252\34\0\2\26\1\253\5\26"+
    "\1\0\1\26\1\63\7\26\2\0\10\26\1\0\1\26"+
    "\6\0\10\26\1\0\1\26\1\63\7\26\2\0\5\26"+
    "\1\254\2\26\1\0\1\26\10\0\1\255\7\0\1\256"+
    "\1\257\3\0\1\260\35\0\1\261\1\262\37\0\1\263"+
    "\40\0\1\264\47\0\1\265\52\0\1\266\46\0\1\267"+
    "\34\0\1\270\52\0\1\271\22\0\7\26\1\272\1\0"+
    "\1\26\1\63\7\26\2\0\10\26\1\0\1\26\6\0"+
    "\10\26\1\0\1\273\1\63\7\26\2\0\10\26\1\0"+
    "\1\26\6\0\10\26\1\0\1\26\1\274\7\26\2\0"+
    "\10\26\1\0\1\26\6\0\7\26\1\275\1\0\1\26"+
    "\1\63\7\26\2\0\10\26\1\0\1\26\6\0\10\26"+
    "\1\276\1\26\1\63\7\26\2\0\10\26\1\0\1\26"+
    "\6\0\10\26\1\0\1\277\1\63\7\26\2\0\10\26"+
    "\1\0\1\26\10\0\1\300\55\0\1\301\54\0\1\302"+
    "\43\0\1\303\20\0\1\304\41\0\1\305\43\0\10\26"+
    "\1\0\1\306\1\63\7\26\2\0\10\26\1\0\1\26"+
    "\6\0\10\26\1\0\1\26\1\307\7\26\2\0\10\26"+
    "\1\0\1\26\32\0\1\310\30\0\1\311\61\0\1\312"+
    "\27\0\1\313\34\0\1\314\51\0\1\315\31\0\1\316"+
    "\45\0\1\317\41\0\1\320\52\0\1\321\42\0\1\322"+
    "\35\0\10\26\1\75\1\26\1\63\2\26\1\323\4\26"+
    "\2\0\10\26\1\0\1\26\13\0\1\324\36\0\10\26"+
    "\1\0\1\26\1\63\5\26\1\325\1\26\2\0\10\26"+
    "\1\0\1\26\11\0\1\326\52\0\1\327\56\0\1\330"+
    "\35\0\1\331\36\0\1\332\31\0\10\26\1\0\1\26"+
    "\1\63\7\26\2\0\3\26\1\333\4\26\1\0\1\26"+
    "\20\0\1\334\51\0\1\335\25\0\1\336\45\0\1\337"+
    "\70\0\1\340\42\0\1\341\17\0\1\342\55\0\1\343"+
    "\33\0\1\344\46\0\1\345\41\0\1\346\34\0\10\26"+
    "\1\0\1\26\1\63\3\26\1\347\3\26\2\0\10\26"+
    "\1\0\1\26\14\0\1\350\41\0\1\351\54\0\1\352"+
    "\32\0\1\353\52\0\1\354\30\0\2\26\1\355\5\26"+
    "\1\0\1\26\1\63\7\26\2\0\10\26\1\0\1\26"+
    "\37\0\1\356\33\0\1\357\40\0\1\360\37\0\1\361"+
    "\33\0\1\362\52\0\1\363\44\0\1\364\40\0\1\365"+
    "\52\0\1\366\31\0\1\367\46\0\1\370\43\0\1\371"+
    "\52\0\1\372\43\0\1\373\36\0\1\374\32\0\10\26"+
    "\1\0\1\26\1\63\3\26\1\375\3\26\2\0\10\26"+
    "\1\0\1\26\10\0\1\376\57\0\1\377\56\0\1\u0100"+
    "\21\0\1\u0101\61\0\1\u0102\25\0\1\u0103\45\0\1\u0104"+
    "\46\0\1\u0105\40\0\1\u0106\44\0\1\u0107\42\0\1\u0108"+
    "\52\0\1\u0109\35\0\1\u010a\60\0\1\u010b\31\0\1\u010c"+
    "\30\0\1\u010d\57\0\1\u010e\43\0\1\u010f\17\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7848];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\13\1\2\11\16\1\6\0"+
    "\4\1\1\0\17\1\1\0\10\1\1\11\4\0\1\11"+
    "\31\1\4\0\2\1\1\0\6\1\1\0\16\1\1\11"+
    "\3\0\1\1\3\0\5\1\11\0\14\1\1\11\2\0"+
    "\1\1\4\0\2\1\1\11\1\0\1\11\12\0\4\1"+
    "\1\0\1\1\3\0\1\11\2\0\2\1\13\0\1\1"+
    "\1\0\1\1\2\0\1\11\2\0\2\1\12\0\1\1"+
    "\1\0\1\11\3\0\1\1\2\0\1\1\2\11\2\0"+
    "\1\11\1\0\1\11\1\0\3\11\1\0\1\1\1\0"+
    "\1\11\1\0\1\11\1\0\1\11\3\0\3\11\4\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[271];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
    private Symbol Symbol(int type){
        return new Symbol(type ,yyline, yycolumn);
    }
    private Symbol Symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    public static void errorLexico(String error,int x, int y ){
       errores+="error lexico \""+error+"\" en linea: "+Integer.toString(y)+" colulmna: "+Integer.toString(x)+"\n";
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_chtml(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2896) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter Invalido: "+yytext()+" Linea: "+ (int)(yyline+1)+" columa:"+(int)yycolumn+";");
            }
          case 60: break;
          case 2: 
            { /*Ignore*/
            }
          case 61: break;
          case 3: 
            { return new Symbol(sym.INI,yyline,yycolumn);
            }
          case 62: break;
          case 4: 
            { return new Symbol(sym.FIN,yyline,yycolumn);
            }
          case 63: break;
          case 5: 
            { return new Symbol(sym.PNOR,yyline,yycolumn,yytext());
            }
          case 64: break;
          case 6: 
            { return new Symbol(sym.SIGU,yyline,yycolumn);
            }
          case 65: break;
          case 7: 
            { return new Symbol(sym.SPYC,yyline,yycolumn);
            }
          case 66: break;
          case 8: 
            { return new Symbol(sym.PNOR,yyline, yycolumn,yytext());
            }
          case 67: break;
          case 9: 
            { return new Symbol(sym.IECT,yyline,yycolumn);
            }
          case 68: break;
          case 10: 
            { return new Symbol(sym.IECB,yyline,yycolumn);
            }
          case 69: break;
          case 11: 
            { return new Symbol(sym.PID ,yyline,yycolumn);
            }
          case 70: break;
          case 12: 
            { return new Symbol(sym.PCOM,yyline,yycolumn,yytext());
            }
          case 71: break;
          case 13: 
            { return new Symbol(sym.ICJS,yyline,yycolumn);
            }
          case 72: break;
          case 14: 
            { return new Symbol(sym.ICCS,yyline,yycolumn);
            }
          case 73: break;
          case 15: 
            { return new Symbol(sym.PRUT,yyline,yycolumn);
            }
          case 74: break;
          case 16: 
            { return new Symbol(sym.IECJ,yyline,yycolumn);
            }
          case 75: break;
          case 17: 
            { return new Symbol(sym.PALT,yyline,yycolumn);
            }
          case 76: break;
          case 18: 
            { return new Symbol(sym.IHTML,yyline, yycolumn);
            }
          case 77: break;
          case 19: 
            { return new Symbol(sym.PCLI,yyline,yycolumn);
            }
          case 78: break;
          case 20: 
            { return new Symbol(sym.IETE,yyline,yycolumn);
            }
          case 79: break;
          case 21: 
            { return new Symbol(sym.IETB,yyline,yycolumn);
            }
          case 80: break;
          case 22: 
            { return new Symbol(sym.IEFI,yyline,yycolumn);
            }
          case 81: break;
          case 23: 
            { return new Symbol(sym.PFON,yyline,yycolumn);
            }
          case 82: break;
          case 24: 
            { return new Symbol(sym.PANC,yyline,yycolumn);
            }
          case 83: break;
          case 25: 
            { return new Symbol(sym.IEBO,yyline,yycolumn);
            }
          case 84: break;
          case 26: 
            { return new Symbol(sym.IEPA,yyline,yycolumn);
            }
          case 85: break;
          case 27: 
            { return new Symbol(sym.PGRP,yyline,yycolumn);
            }
          case 86: break;
          case 28: 
            { return new Symbol(sym.PVAL,yyline,yycolumn);
            }
          case 87: break;
          case 29: 
            { yybegin(YYCUERPO);return new Symbol(sym.ICUER,yyline, yycolumn);
            }
          case 88: break;
          case 30: 
            { return new Symbol(sym.ITIT,yyline,yycolumn);
            }
          case 89: break;
          case 31: 
            { return new Symbol(sym.FECT,yyline,yycolumn);
            }
          case 90: break;
          case 32: 
            { return new Symbol(sym.FECB,yyline,yycolumn);
            }
          case 91: break;
          case 33: 
            { return new Symbol(sym.IEIM,yyline,yycolumn);
            }
          case 92: break;
          case 34: 
            { return new Symbol(sym.IEEN,yyline,yycolumn);
            }
          case 93: break;
          case 35: 
            { return new Symbol(sym.IEOP,yyline,yycolumn);
            }
          case 94: break;
          case 36: 
            { return new Symbol(sym.FCJS,yyline,yycolumn);
            }
          case 95: break;
          case 37: 
            { return new Symbol(sym.IETA,yyline,yycolumn);
            }
          case 96: break;
          case 38: 
            { return new Symbol(sym.IESP,yyline,yycolumn);
            }
          case 97: break;
          case 39: 
            { return new Symbol(sym.FCCS,yyline,yycolumn);
            }
          case 98: break;
          case 40: 
            { return new Symbol(sym.FECJ,yyline,yycolumn);
            }
          case 99: break;
          case 41: 
            { return new Symbol(sym.PALI,yyline,yycolumn);
            }
          case 100: break;
          case 42: 
            { return new Symbol(sym.FHTML,yyline, yycolumn);
            }
          case 101: break;
          case 43: 
            { return new Symbol(sym.FETE,yyline,yycolumn);
            }
          case 102: break;
          case 44: 
            { return new Symbol(sym.FETB,yyline,yycolumn);
            }
          case 103: break;
          case 45: 
            { return new Symbol(sym.FEFI,yyline,yycolumn);
            }
          case 104: break;
          case 46: 
            { return new Symbol(sym.FEBO,yyline,yycolumn);
            }
          case 105: break;
          case 47: 
            { return new Symbol(sym.FEPA,yyline,yycolumn);
            }
          case 106: break;
          case 48: 
            { return new Symbol(sym.ESAL,yyline,yycolumn);
            }
          case 107: break;
          case 49: 
            { yybegin(YYCABEZA); return new Symbol(sym.IENCA,yyline, yycolumn);
            }
          case 108: break;
          case 50: 
            { return new Symbol(sym.FTIT,yyline,yycolumn);
            }
          case 109: break;
          case 51: 
            { return new Symbol(sym.IECA,yyline,yycolumn);
            }
          case 110: break;
          case 52: 
            { yybegin(YYINITIAL); return new Symbol(sym.FCUER,yyline, yycolumn);
            }
          case 111: break;
          case 53: 
            { return new Symbol(sym.FEIM,yyline,yycolumn);
            }
          case 112: break;
          case 54: 
            { return new Symbol(sym.FEOP,yyline,yycolumn);
            }
          case 113: break;
          case 55: 
            { return new Symbol(sym.FETA,yyline,yycolumn);
            }
          case 114: break;
          case 56: 
            { return new Symbol(sym.FEEN,yyline,yycolumn);
            }
          case 115: break;
          case 57: 
            { return new Symbol(sym.FESP,yyline,yycolumn);
            }
          case 116: break;
          case 58: 
            { yybegin(YYINITIAL); return new Symbol(sym.FENCA,yyline, yycolumn);
            }
          case 117: break;
          case 59: 
            { return new Symbol(sym.FECA,yyline,yycolumn);
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
