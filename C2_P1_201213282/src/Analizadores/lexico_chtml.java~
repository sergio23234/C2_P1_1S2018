/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
import java_cup.runtime.*;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico_CHTML</tt>
 */
public class lexico_chtml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYCABEZA = 2;
  public static final int YYCUERPO = 4;
  public static final int YYTEXTO = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\37\1\1\1\1\1\30\1\1\1\1\16\37\4\0\1\1\1\0"+
    "\1\2\1\0\1\36\10\0\1\5\1\0\1\4\12\37\1\0\1\33"+
    "\1\3\1\32\1\6\2\0\1\20\1\21\1\7\1\23\1\17\1\14"+
    "\1\41\1\10\1\15\1\34\1\44\1\13\1\12\1\16\1\24\1\27"+
    "\1\36\1\26\1\35\1\11\1\25\1\43\1\36\1\40\1\36\1\22"+
    "\4\0\1\42\1\0\1\20\1\21\1\7\1\23\1\17\1\14\1\41"+
    "\1\10\1\15\1\34\1\44\1\13\1\12\1\16\1\24\1\27\1\36"+
    "\1\26\1\35\1\11\1\25\1\43\1\36\1\40\1\36\1\22\1\0"+
    "\1\1\2\0\6\37\1\31\32\37\2\0\4\36\4\0\1\36\2\0"+
    "\1\37\7\0\1\36\4\0\1\36\5\0\27\36\1\0\37\36\1\0"+
    "\70\36\2\15\115\36\1\35\u0142\36\4\0\14\36\16\0\5\36\7\0"+
    "\1\36\1\0\1\36\21\0\160\37\5\36\1\0\2\36\2\0\4\36"+
    "\10\0\1\36\1\0\3\36\1\0\1\36\1\0\24\36\1\0\123\36"+
    "\1\0\213\36\1\0\5\37\2\0\236\36\11\0\46\36\2\0\1\36"+
    "\7\0\47\36\7\0\1\36\1\0\55\37\1\0\1\37\1\0\2\37"+
    "\1\0\2\37\1\0\1\37\10\0\33\36\5\0\3\36\15\0\5\37"+
    "\6\0\1\36\4\0\13\37\5\0\53\36\37\37\4\0\2\36\1\37"+
    "\143\36\1\0\1\36\10\37\1\0\6\37\2\36\2\37\1\0\4\37"+
    "\2\36\12\37\3\36\2\0\1\36\17\0\1\37\1\36\1\37\36\36"+
    "\33\37\2\0\131\36\13\37\1\36\16\0\12\37\41\36\11\37\2\36"+
    "\4\0\1\36\5\0\26\36\4\37\1\36\11\37\1\36\3\37\1\36"+
    "\5\37\22\0\31\36\3\37\104\0\1\36\1\0\13\36\67\0\33\37"+
    "\1\0\4\37\66\36\3\37\1\36\22\37\1\36\7\37\12\36\2\37"+
    "\2\0\12\37\1\0\7\36\1\0\7\36\1\0\3\37\1\0\10\36"+
    "\2\0\2\36\2\0\26\36\1\0\7\36\1\0\1\36\3\0\4\36"+
    "\2\0\1\37\1\36\7\37\2\0\2\37\2\0\3\37\1\36\10\0"+
    "\1\37\4\0\2\36\1\0\3\36\2\37\2\0\12\37\4\36\7\0"+
    "\1\36\5\0\3\37\1\0\6\36\4\0\2\36\2\0\26\36\1\0"+
    "\7\36\1\0\2\36\1\0\2\36\1\0\2\36\2\0\1\37\1\0"+
    "\5\37\4\0\2\37\2\0\3\37\3\0\1\37\7\0\4\36\1\0"+
    "\1\36\7\0\14\37\3\36\1\37\13\0\3\37\1\0\11\36\1\0"+
    "\3\36\1\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36\2\0"+
    "\1\37\1\36\10\37\1\0\3\37\1\0\3\37\2\0\1\36\17\0"+
    "\2\36\2\37\2\0\12\37\1\0\1\36\17\0\3\37\1\0\10\36"+
    "\2\0\2\36\2\0\26\36\1\0\7\36\1\0\2\36\1\0\5\36"+
    "\2\0\1\37\1\36\7\37\2\0\2\37\2\0\3\37\10\0\2\37"+
    "\4\0\2\36\1\0\3\36\2\37\2\0\12\37\1\0\1\36\20\0"+
    "\1\37\1\36\1\0\6\36\3\0\3\36\1\0\4\36\3\0\2\36"+
    "\1\0\1\36\1\0\2\36\3\0\2\36\3\0\3\36\3\0\14\36"+
    "\4\0\5\37\3\0\3\37\1\0\4\37\2\0\1\36\6\0\1\37"+
    "\16\0\12\37\11\0\1\36\7\0\3\37\1\0\10\36\1\0\3\36"+
    "\1\0\27\36\1\0\12\36\1\0\5\36\3\0\1\36\7\37\1\0"+
    "\3\37\1\0\4\37\7\0\2\37\1\0\2\36\6\0\2\36\2\37"+
    "\2\0\12\37\22\0\2\37\1\0\10\36\1\0\3\36\1\0\27\36"+
    "\1\0\12\36\1\0\5\36\2\0\1\37\1\36\7\37\1\0\3\37"+
    "\1\0\4\37\7\0\2\37\7\0\1\36\1\0\2\36\2\37\2\0"+
    "\12\37\1\0\2\36\17\0\2\37\1\0\10\36\1\0\3\36\1\0"+
    "\51\36\2\0\1\36\7\37\1\0\3\37\1\0\4\37\1\36\10\0"+
    "\1\37\10\0\2\36\2\37\2\0\12\37\12\0\6\36\2\0\2\37"+
    "\1\0\22\36\3\0\30\36\1\0\11\36\1\0\1\36\2\0\7\36"+
    "\3\0\1\37\4\0\6\37\1\0\1\37\1\0\10\37\22\0\2\37"+
    "\15\0\60\36\1\37\2\36\7\37\4\0\10\36\10\37\1\0\12\37"+
    "\47\0\2\36\1\0\1\36\2\0\2\36\1\0\1\36\2\0\1\36"+
    "\6\0\4\36\1\0\7\36\1\0\3\36\1\0\1\36\1\0\1\36"+
    "\2\0\2\36\1\0\4\36\1\37\2\36\6\37\1\0\2\37\1\36"+
    "\2\0\5\36\1\0\1\36\1\0\6\37\2\0\12\37\2\0\4\36"+
    "\40\0\1\36\27\0\2\37\6\0\12\37\13\0\1\37\1\0\1\37"+
    "\1\0\1\37\4\0\2\37\10\36\1\0\44\36\4\0\24\37\1\0"+
    "\2\37\5\36\13\37\1\0\44\37\11\0\1\37\71\0\53\36\24\37"+
    "\1\36\12\37\6\0\6\36\4\37\4\36\3\37\1\36\3\37\2\36"+
    "\7\37\3\36\4\37\15\36\14\37\1\36\17\37\2\0\46\36\1\0"+
    "\1\36\5\0\1\36\2\0\53\36\1\0\u014d\36\1\0\4\36\2\0"+
    "\7\36\1\0\1\36\1\0\4\36\2\0\51\36\1\0\4\36\2\0"+
    "\41\36\1\0\4\36\2\0\7\36\1\0\1\36\1\0\4\36\2\0"+
    "\17\36\1\0\71\36\1\0\4\36\2\0\103\36\2\0\3\37\40\0"+
    "\20\36\20\0\125\36\14\0\u026c\36\2\0\21\36\1\0\32\36\5\0"+
    "\113\36\3\0\3\36\17\0\15\36\1\0\4\36\3\37\13\0\22\36"+
    "\3\37\13\0\22\36\2\37\14\0\15\36\1\0\3\36\1\0\2\37"+
    "\14\0\64\36\40\37\3\0\1\36\3\0\2\36\1\37\2\0\12\37"+
    "\41\0\3\37\2\0\12\37\6\0\130\36\10\0\51\36\1\37\1\36"+
    "\5\0\106\36\12\0\35\36\3\0\14\37\4\0\14\37\12\0\12\37"+
    "\36\36\2\0\5\36\13\0\54\36\4\0\21\37\7\36\2\37\6\0"+
    "\12\37\46\0\27\36\5\37\4\0\65\36\12\37\1\0\35\37\2\0"+
    "\13\37\6\0\12\37\15\0\1\36\130\0\5\37\57\36\21\37\7\36"+
    "\4\0\12\37\21\0\11\37\14\0\3\37\36\36\15\37\2\36\12\37"+
    "\54\36\16\37\14\0\44\36\24\37\10\0\12\37\3\0\3\36\12\37"+
    "\44\36\122\0\3\37\1\0\25\37\4\36\1\37\4\36\3\37\2\36"+
    "\11\0\300\36\47\37\25\0\4\37\u0116\36\2\0\6\36\2\0\46\36"+
    "\2\0\6\36\2\0\10\36\1\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\37\36\2\0\65\36\1\0\7\36\1\0\1\36\3\0\3\36"+
    "\1\0\7\36\3\0\4\36\2\0\6\36\4\0\15\36\5\0\3\36"+
    "\1\0\7\36\16\0\5\37\30\0\1\30\1\30\5\37\20\0\2\36"+
    "\23\0\1\36\13\0\5\37\5\0\6\37\1\0\1\36\15\0\1\36"+
    "\20\0\15\36\3\0\33\36\25\0\15\37\4\0\1\37\3\0\14\37"+
    "\21\0\1\36\4\0\1\36\2\0\12\36\1\0\1\36\3\0\5\36"+
    "\6\0\1\36\1\0\1\36\1\0\1\36\1\0\1\44\3\36\1\0"+
    "\13\36\2\0\4\36\5\0\5\36\4\0\1\36\21\0\51\36\u0a77\0"+
    "\57\36\1\0\57\36\1\0\205\36\6\0\4\36\3\37\2\36\14\0"+
    "\46\36\1\0\1\36\5\0\1\36\2\0\70\36\7\0\1\36\17\0"+
    "\1\37\27\36\11\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36"+
    "\1\0\7\36\1\0\7\36\1\0\7\36\1\0\7\36\1\0\40\37"+
    "\57\0\1\36\u01d5\0\3\36\31\0\11\36\6\37\1\0\5\36\2\0"+
    "\5\36\4\0\126\36\2\0\2\37\2\0\3\36\1\0\132\36\1\0"+
    "\4\36\5\0\51\36\3\0\136\36\21\0\33\36\65\0\20\36\u0200\0"+
    "\u19b6\36\112\0\u51cd\36\63\0\u048d\36\103\0\56\36\2\0\u010d\36\3\0"+
    "\20\36\12\37\2\36\24\0\57\36\1\37\4\0\12\37\1\0\31\36"+
    "\7\0\1\37\120\36\2\37\45\0\11\36\2\0\147\36\2\0\4\36"+
    "\1\0\4\36\14\0\13\36\115\0\12\36\1\37\3\36\1\37\4\36"+
    "\1\37\27\36\5\37\20\0\1\36\7\0\64\36\14\0\2\37\62\36"+
    "\21\37\13\0\12\37\6\0\22\37\6\36\3\0\1\36\4\0\12\37"+
    "\34\36\10\37\2\0\27\36\15\37\14\0\35\36\3\0\4\37\57\36"+
    "\16\37\16\0\1\36\12\37\46\0\51\36\16\37\11\0\3\36\1\37"+
    "\10\36\2\37\2\0\12\37\6\0\27\36\3\0\1\36\1\37\4\0"+
    "\60\36\1\37\1\36\3\37\2\36\2\37\5\36\2\37\1\36\1\37"+
    "\1\36\30\0\3\36\2\0\13\36\5\37\2\0\3\36\2\37\12\0"+
    "\6\36\2\0\6\36\2\0\6\36\11\0\7\36\1\0\7\36\221\0"+
    "\43\36\10\37\1\0\2\37\2\0\12\37\6\0\u2ba4\36\14\0\27\36"+
    "\4\0\61\36\u2104\0\u016e\36\2\0\152\36\46\0\7\36\14\0\5\36"+
    "\5\0\1\36\1\37\12\36\1\0\15\36\1\0\5\36\1\0\1\36"+
    "\1\0\2\36\1\0\2\36\1\0\154\36\41\0\u016b\36\22\0\100\36"+
    "\2\0\66\36\50\0\15\36\3\0\20\37\20\0\7\37\14\0\2\36"+
    "\30\0\3\36\31\0\1\36\6\0\5\36\1\0\207\36\2\0\1\37"+
    "\4\0\1\36\13\0\12\37\7\0\32\36\4\0\1\36\1\0\32\36"+
    "\13\0\131\36\3\0\6\36\2\0\6\36\2\0\6\36\2\0\3\36"+
    "\3\0\2\36\3\0\2\36\22\0\3\37\4\0\14\36\1\0\32\36"+
    "\1\0\23\36\1\0\2\36\1\0\17\36\2\0\16\36\42\0\173\36"+
    "\105\0\65\36\210\0\1\37\202\0\35\36\3\0\61\36\57\0\37\36"+
    "\21\0\33\36\65\0\36\36\2\0\44\36\4\0\10\36\1\0\5\36"+
    "\52\0\236\36\2\0\12\37\u0356\0\6\36\2\0\1\36\1\0\54\36"+
    "\1\0\2\36\3\0\1\36\2\0\27\36\252\0\26\36\12\0\32\36"+
    "\106\0\70\36\6\0\2\36\100\0\1\36\3\37\1\0\2\37\5\0"+
    "\4\37\4\36\1\0\3\36\1\0\33\36\4\0\3\37\4\0\1\37"+
    "\40\0\35\36\203\0\66\36\12\0\26\36\12\0\23\36\215\0\111\36"+
    "\u03b7\0\3\37\65\36\17\37\37\0\12\37\20\0\3\37\55\36\13\37"+
    "\2\0\1\37\22\0\31\36\7\0\12\37\6\0\3\37\44\36\16\37"+
    "\1\0\12\37\100\0\3\37\60\36\16\37\4\36\13\0\12\37\u04a6\0"+
    "\53\36\15\37\10\0\12\37\u0936\0\u036f\36\221\0\143\36\u0b9d\0\u042f\36"+
    "\u33d1\0\u0239\36\u04c7\0\105\36\13\0\1\36\56\37\20\0\4\37\15\36"+
    "\u4060\0\2\36\u2163\0\5\37\3\0\26\37\2\0\7\37\36\0\4\37"+
    "\224\0\3\37\u01bb\0\125\36\1\0\107\36\1\0\2\36\2\0\1\36"+
    "\2\0\2\36\2\0\4\36\1\0\14\36\1\0\1\36\1\0\7\36"+
    "\1\0\101\36\1\0\4\36\2\0\10\36\1\0\7\36\1\0\34\36"+
    "\1\0\4\36\1\0\5\36\1\0\1\36\3\0\7\36\1\0\u0154\36"+
    "\2\0\31\36\1\0\31\36\1\0\37\36\1\0\31\36\1\0\37\36"+
    "\1\0\31\36\1\0\37\36\1\0\31\36\1\0\37\36\1\0\31\36"+
    "\1\0\10\36\2\0\62\37\u1600\0\4\36\1\0\33\36\1\0\2\36"+
    "\1\0\1\36\2\0\1\36\1\0\12\36\1\0\4\36\1\0\1\36"+
    "\1\0\1\36\6\0\1\36\4\0\1\36\1\0\1\36\1\0\1\36"+
    "\1\0\3\36\1\0\2\36\1\0\1\36\2\0\1\36\1\0\1\36"+
    "\1\0\1\36\1\0\1\36\1\0\1\36\1\0\2\36\1\0\1\36"+
    "\2\0\4\36\1\0\7\36\1\0\4\36\1\0\4\36\1\0\1\36"+
    "\1\0\12\36\1\0\21\36\5\0\3\36\1\0\5\36\1\0\21\36"+
    "\u1144\0\ua6d7\36\51\0\u1035\36\13\0\336\36\u3fe2\0\u021e\36\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\37\36\0\140\37\200\0\360\37\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\3\1\1\5\1\1"+
    "\1\6\1\7\5\1\1\10\1\11\1\12\1\13\1\14"+
    "\16\15\1\16\2\15\6\0\7\17\1\20\2\15\1\21"+
    "\6\15\1\22\15\15\5\0\1\23\1\17\1\0\1\24"+
    "\3\17\1\15\1\0\23\15\1\0\1\15\5\0\1\25"+
    "\1\17\1\0\1\26\1\15\1\27\3\15\1\0\3\15"+
    "\1\30\4\15\1\26\5\15\2\0\1\31\3\0\1\17"+
    "\3\0\1\32\1\15\1\33\1\34\1\35\11\0\1\36"+
    "\3\15\1\37\1\40\1\15\1\41\2\15\1\42\1\43"+
    "\2\0\1\44\2\0\1\45\4\0\2\15\1\46\1\0"+
    "\1\47\12\0\1\50\1\51\1\15\1\52\1\0\1\15"+
    "\5\0\1\53\2\0\1\15\1\54\13\0\1\15\1\0"+
    "\1\55\4\0\1\56\2\0\1\15\1\57\12\0\1\60"+
    "\2\0\1\16\1\61\3\0\1\15\3\0\1\62\1\63"+
    "\2\0\1\64\1\0\1\65\1\0\1\66\1\67\1\70"+
    "\1\71\1\0\1\72\1\0\1\73\1\0\1\74\1\0"+
    "\1\75\3\0\1\76\1\77\1\100\4\0\1\101\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\224"+
    "\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\336\0\224\0\u01bc"+
    "\0\u01e1\0\u0206\0\u022b\0\u0250\0\224\0\224\0\u0275\0\336"+
    "\0\224\0\u029a\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0378"+
    "\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431\0\u0456\0\u047b\0\u04a0"+
    "\0\u04c5\0\u04ea\0\u050f\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8"+
    "\0\u05ed\0\u01e1\0\u0612\0\u0637\0\u065c\0\u0681\0\u06a6\0\u02bf"+
    "\0\u06cb\0\u06f0\0\u02bf\0\u0715\0\u073a\0\u075f\0\u0784\0\u07a9"+
    "\0\u07ce\0\u02bf\0\u07f3\0\u0818\0\u083d\0\u0862\0\u0887\0\u08ac"+
    "\0\u08d1\0\u08f6\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4"+
    "\0\u09f9\0\u0a1e\0\u0a43\0\u0a68\0\u05c8\0\u0a8d\0\u0ab2\0\u01e1"+
    "\0\u0ad7\0\u0afc\0\u0b21\0\u0b46\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda"+
    "\0\u0bff\0\u0c24\0\u0c49\0\u0c6e\0\u0c93\0\u0cb8\0\u0cdd\0\u0d02"+
    "\0\u0d27\0\u0d4c\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\u0e05\0\u0e2a"+
    "\0\u0e4f\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u01e1"+
    "\0\u0f52\0\u0f77\0\u0612\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030"+
    "\0\u1055\0\u107a\0\u109f\0\u10c4\0\u02bf\0\u10e9\0\u110e\0\u1133"+
    "\0\u1158\0\u0715\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211\0\u1236"+
    "\0\u125b\0\224\0\u1280\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339"+
    "\0\u135e\0\u02bf\0\u1383\0\u13a8\0\u0715\0\u02bf\0\u13cd\0\u13f2"+
    "\0\u1417\0\u143c\0\u1461\0\u1486\0\u14ab\0\u14d0\0\u14f5\0\u02bf"+
    "\0\u151a\0\u153f\0\u1564\0\u02bf\0\u02bf\0\u1589\0\u02bf\0\u15ae"+
    "\0\u15d3\0\u02bf\0\u02bf\0\u15f8\0\u161d\0\224\0\u1642\0\u1667"+
    "\0\u01e1\0\u168c\0\u16b1\0\u16d6\0\u16fb\0\u1720\0\u1745\0\224"+
    "\0\u176a\0\224\0\u178f\0\u17b4\0\u17d9\0\u17fe\0\u1823\0\u1848"+
    "\0\u186d\0\u1892\0\u18b7\0\u18dc\0\u02bf\0\u02bf\0\u1901\0\u02bf"+
    "\0\u1926\0\u194b\0\u1970\0\u1995\0\u19ba\0\u19df\0\u1a04\0\224"+
    "\0\u1a29\0\u1a4e\0\u1a73\0\u0715\0\u1a98\0\u1abd\0\u1ae2\0\u1b07"+
    "\0\u1b2c\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5\0\u1c0a\0\u1c2f"+
    "\0\u1c54\0\u02bf\0\u1c79\0\u1c9e\0\u1cc3\0\u1ce8\0\224\0\u1d0d"+
    "\0\u1d32\0\u1d57\0\u1d7c\0\u1da1\0\u1dc6\0\u1deb\0\u1e10\0\u1e35"+
    "\0\u1e5a\0\u1e7f\0\u1ea4\0\u1ec9\0\u1eee\0\u02bf\0\u1f13\0\u1f38"+
    "\0\224\0\224\0\u1f5d\0\u1f82\0\u1fa7\0\u1fcc\0\u1ff1\0\u2016"+
    "\0\u203b\0\224\0\224\0\u2060\0\u2085\0\224\0\u20aa\0\224"+
    "\0\u20cf\0\224\0\224\0\224\0\224\0\u20f4\0\u02bf\0\u2119"+
    "\0\224\0\u213e\0\224\0\u2163\0\224\0\u2188\0\u21ad\0\u21d2"+
    "\0\224\0\224\0\224\0\u21f7\0\u221c\0\u2241\0\u2266\0\224"+
    "\0\224";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\5\1\7\2\5\1\10\1\11\4\5"+
    "\1\12\2\5\1\13\10\5\2\0\14\5\1\14\1\15"+
    "\1\16\2\5\1\17\1\20\1\21\1\22\2\21\1\23"+
    "\11\21\1\24\1\21\2\0\1\25\1\26\3\21\1\5"+
    "\5\21\1\5\1\27\1\15\1\30\2\5\1\31\1\32"+
    "\1\33\1\34\2\33\1\35\1\36\1\33\1\37\1\40"+
    "\1\41\2\33\1\42\1\33\1\43\1\44\2\0\1\25"+
    "\1\26\1\33\1\45\1\33\1\5\1\33\1\46\1\33"+
    "\1\47\1\33\1\5\1\50\1\5\1\30\2\5\1\31"+
    "\5\51\1\52\13\51\2\0\2\5\3\51\1\5\5\51"+
    "\46\0\1\6\47\0\1\53\50\0\1\54\14\0\1\55"+
    "\34\0\1\56\45\0\1\57\27\0\1\14\43\0\45\60"+
    "\7\0\1\61\10\62\1\63\7\62\1\0\1\62\2\0"+
    "\1\64\10\62\7\0\11\62\1\63\7\62\1\0\1\62"+
    "\2\0\11\62\7\0\6\62\1\65\2\62\1\63\7\62"+
    "\1\0\1\62\2\0\11\62\7\0\6\62\1\66\2\62"+
    "\1\63\7\62\1\0\1\62\2\0\11\62\7\0\11\62"+
    "\1\63\4\62\1\67\2\62\1\0\1\62\2\0\11\62"+
    "\1\0\1\27\52\0\2\33\1\70\1\33\1\71\4\33"+
    "\1\72\1\73\6\33\1\0\1\33\2\0\11\33\7\0"+
    "\11\33\1\74\7\33\1\0\1\33\2\0\11\33\7\0"+
    "\10\33\1\75\1\76\7\33\1\0\1\33\2\0\11\33"+
    "\7\0\6\33\1\77\2\33\1\74\3\33\1\100\3\33"+
    "\1\0\1\33\2\0\11\33\7\0\3\33\1\101\5\33"+
    "\1\74\2\33\1\102\4\33\1\0\1\33\2\0\11\33"+
    "\7\0\7\33\1\103\1\33\1\74\7\33\1\0\1\33"+
    "\2\0\11\33\7\0\4\33\1\104\2\33\1\105\1\33"+
    "\1\74\7\33\1\0\1\33\2\0\11\33\7\0\11\33"+
    "\1\74\3\33\1\106\3\33\1\0\1\33\2\0\11\33"+
    "\7\0\11\33\1\74\6\33\1\107\1\0\1\33\2\0"+
    "\11\33\7\0\11\33\1\74\4\33\1\110\2\33\1\0"+
    "\1\33\2\0\11\33\7\0\11\33\1\111\7\33\1\0"+
    "\1\33\2\0\11\33\7\0\11\33\1\112\6\33\1\113"+
    "\1\0\1\33\2\0\11\33\7\0\11\33\1\74\5\33"+
    "\1\114\1\33\1\0\1\33\2\0\11\33\7\0\11\33"+
    "\1\115\7\33\1\0\1\33\2\0\11\33\1\0\1\50"+
    "\44\0\1\51\5\0\11\51\1\116\7\51\1\0\1\51"+
    "\2\0\11\51\1\0\1\51\5\0\6\51\1\117\2\51"+
    "\1\116\7\51\1\0\1\51\2\0\11\51\4\0\1\120"+
    "\51\0\1\121\52\0\1\122\43\0\1\123\35\0\1\124"+
    "\35\0\2\60\1\125\42\60\7\0\11\62\1\63\7\62"+
    "\1\0\1\62\2\0\1\62\1\126\7\62\5\0\1\127"+
    "\1\0\11\62\1\63\7\62\1\0\1\62\2\0\11\62"+
    "\7\0\11\62\1\63\7\62\1\0\1\62\2\0\1\62"+
    "\1\130\7\62\7\0\2\62\1\131\6\62\1\63\7\62"+
    "\1\0\1\62\2\0\11\62\7\0\7\62\1\132\1\62"+
    "\1\63\7\62\1\0\1\62\2\0\11\62\7\0\2\62"+
    "\1\133\6\62\1\63\7\62\1\0\1\62\2\0\11\62"+
    "\7\0\6\33\1\134\2\33\1\74\7\33\1\0\1\33"+
    "\2\0\11\33\5\0\1\135\1\0\11\33\1\74\7\33"+
    "\1\0\1\33\2\0\1\136\10\33\5\0\1\135\1\0"+
    "\11\33\1\74\7\33\1\0\1\33\2\0\11\33\7\0"+
    "\11\33\1\74\7\33\1\0\1\33\2\0\4\33\1\137"+
    "\4\33\5\0\1\135\1\0\11\33\1\74\1\140\6\33"+
    "\1\0\1\33\2\0\11\33\7\0\4\33\1\141\2\33"+
    "\1\142\1\33\1\74\7\33\1\0\1\33\2\0\11\33"+
    "\7\0\7\33\1\143\1\33\1\74\7\33\1\0\1\33"+
    "\2\0\11\33\7\0\11\33\1\144\7\33\1\0\1\33"+
    "\2\0\11\33\7\0\4\33\1\145\4\33\1\74\7\33"+
    "\1\0\1\33\2\0\11\33\7\0\2\33\1\146\3\33"+
    "\1\147\2\33\1\74\7\33\1\0\1\33\2\0\11\33"+
    "\7\0\1\150\10\33\1\74\7\33\1\0\1\33\2\0"+
    "\11\33\7\0\2\33\1\151\6\33\1\74\7\33\1\0"+
    "\1\33\2\0\11\33\7\0\1\152\10\33\1\74\7\33"+
    "\1\0\1\33\2\0\11\33\7\0\2\33\1\153\6\33"+
    "\1\74\7\33\1\0\1\33\2\0\11\33\5\0\1\135"+
    "\1\0\7\33\1\154\1\33\1\74\7\33\1\0\1\33"+
    "\2\0\11\33\5\0\1\135\1\0\4\33\1\155\4\33"+
    "\1\74\7\33\1\0\1\33\2\0\11\33\7\0\6\33"+
    "\1\156\2\33\1\74\7\33\1\0\1\33\2\0\11\33"+
    "\7\0\11\33\1\74\4\33\1\157\2\33\1\0\1\33"+
    "\2\0\11\33\5\0\1\135\1\0\4\33\1\160\4\33"+
    "\1\74\7\33\1\0\1\33\2\0\11\33\1\0\1\51"+
    "\3\0\1\161\1\0\11\51\1\116\7\51\1\0\1\51"+
    "\2\0\11\51\1\0\1\51\5\0\7\51\1\162\1\51"+
    "\1\116\7\51\1\0\1\51\2\0\11\51\5\0\1\163"+
    "\51\0\1\164\60\0\1\165\23\0\1\166\57\0\1\167"+
    "\33\0\11\62\1\63\7\62\1\0\1\62\2\0\1\62"+
    "\1\170\7\62\22\0\1\62\31\0\11\62\1\63\4\62"+
    "\1\171\2\62\1\0\1\62\2\0\11\62\5\0\1\172"+
    "\1\0\11\62\1\63\7\62\1\0\1\62\2\0\11\62"+
    "\7\0\11\62\1\173\7\62\1\0\1\62\2\0\11\62"+
    "\7\0\1\174\10\33\1\74\7\33\1\0\1\33\2\0"+
    "\11\33\22\0\1\33\31\0\11\33\1\175\7\33\1\0"+
    "\1\33\2\0\11\33\7\0\2\33\1\176\6\33\1\74"+
    "\7\33\1\0\1\33\2\0\11\33\7\0\4\33\1\177"+
    "\4\33\1\74\7\33\1\0\1\33\2\0\11\33\7\0"+
    "\11\33\1\74\7\33\1\0\1\33\2\0\6\33\1\200"+
    "\2\33\5\0\1\201\1\0\11\33\1\74\7\33\1\0"+
    "\1\33\2\0\11\33\7\0\11\33\1\74\2\33\1\202"+
    "\4\33\1\0\1\33\2\0\11\33\5\0\1\135\1\0"+
    "\11\33\1\74\7\33\1\0\1\33\2\0\5\33\1\203"+
    "\3\33\7\0\11\33\1\204\7\33\1\0\1\33\2\0"+
    "\11\33\7\0\11\33\1\74\3\33\1\205\3\33\1\0"+
    "\1\33\2\0\11\33\7\0\7\33\1\206\1\33\1\74"+
    "\7\33\1\0\1\33\2\0\11\33\7\0\1\33\1\207"+
    "\7\33\1\74\7\33\1\0\1\33\2\0\11\33\7\0"+
    "\11\33\1\74\3\33\1\210\3\33\1\0\1\33\2\0"+
    "\11\33\7\0\6\33\1\211\2\33\1\74\7\33\1\0"+
    "\1\33\2\0\11\33\7\0\11\33\1\212\7\33\1\0"+
    "\1\33\2\0\11\33\7\0\10\33\1\213\1\74\7\33"+
    "\1\0\1\33\2\0\11\33\7\0\2\33\1\214\6\33"+
    "\1\74\7\33\1\0\1\33\2\0\11\33\7\0\7\33"+
    "\1\215\1\33\1\74\7\33\1\0\1\33\2\0\11\33"+
    "\7\0\11\33\1\74\6\33\1\216\1\0\1\33\2\0"+
    "\11\33\7\0\11\33\1\74\3\33\1\217\3\33\1\0"+
    "\1\33\2\0\11\33\22\0\1\51\23\0\1\51\3\0"+
    "\1\220\1\0\11\51\1\116\7\51\1\0\1\51\2\0"+
    "\11\51\45\221\13\0\1\222\60\0\1\223\24\0\1\224"+
    "\56\0\1\225\32\0\4\62\1\226\4\62\1\63\7\62"+
    "\1\0\1\62\2\0\11\62\7\0\1\227\1\0\1\230"+
    "\5\0\1\231\34\0\11\33\1\74\7\33\1\0\1\33"+
    "\2\0\10\33\1\232\5\0\1\135\1\0\11\33\1\74"+
    "\7\33\1\0\1\33\2\0\6\33\1\233\2\33\7\0"+
    "\11\33\1\74\3\33\1\234\3\33\1\0\1\33\2\0"+
    "\11\33\7\0\11\33\1\235\7\33\1\0\1\33\2\0"+
    "\11\33\7\0\2\33\1\236\6\33\1\74\7\33\1\0"+
    "\1\33\2\0\11\33\7\0\1\237\1\0\1\240\2\0"+
    "\1\241\1\242\1\0\1\243\1\0\1\244\2\0\1\245"+
    "\2\0\1\246\5\0\1\247\16\0\11\33\1\74\3\33"+
    "\1\250\3\33\1\0\1\33\2\0\11\33\7\0\10\33"+
    "\1\251\1\74\7\33\1\0\1\33\2\0\11\33\5\0"+
    "\1\135\1\0\1\252\10\33\1\74\7\33\1\0\1\33"+
    "\2\0\11\33\7\0\10\33\1\253\1\74\7\33\1\0"+
    "\1\33\2\0\11\33\7\0\11\33\1\74\3\33\1\254"+
    "\3\33\1\0\1\33\2\0\11\33\7\0\7\33\1\255"+
    "\1\33\1\74\7\33\1\0\1\33\2\0\11\33\7\0"+
    "\11\33\1\74\3\33\1\256\3\33\1\0\1\33\2\0"+
    "\11\33\7\0\4\33\1\257\4\33\1\74\7\33\1\0"+
    "\1\33\2\0\11\33\7\0\11\33\1\74\3\33\1\260"+
    "\3\33\1\0\1\33\2\0\11\33\7\0\7\33\1\261"+
    "\1\33\1\74\7\33\1\0\1\33\2\0\11\33\7\0"+
    "\11\33\1\74\3\33\1\262\3\33\1\0\1\33\2\0"+
    "\11\33\7\0\11\33\1\74\5\33\1\263\1\33\1\0"+
    "\1\33\2\0\11\33\11\0\1\264\40\0\1\265\63\0"+
    "\1\266\30\0\1\267\53\0\1\270\34\0\11\62\1\63"+
    "\3\62\1\271\3\62\1\0\1\62\2\0\11\62\7\0"+
    "\1\272\24\0\1\273\25\0\1\274\45\0\1\275\35\0"+
    "\2\33\1\276\6\33\1\74\7\33\1\0\1\33\2\0"+
    "\11\33\7\0\11\33\1\74\7\33\1\0\1\33\2\0"+
    "\6\33\1\277\2\33\11\0\1\300\6\0\1\301\1\302"+
    "\3\0\1\303\36\0\1\304\1\305\41\0\1\306\41\0"+
    "\1\307\50\0\1\310\52\0\1\311\47\0\1\312\35\0"+
    "\1\313\53\0\1\314\24\0\7\33\1\315\1\33\1\74"+
    "\7\33\1\0\1\33\2\0\11\33\7\0\10\33\1\316"+
    "\1\74\7\33\1\0\1\33\2\0\11\33\7\0\11\33"+
    "\1\317\7\33\1\0\1\33\2\0\11\33\7\0\7\33"+
    "\1\320\1\33\1\74\7\33\1\0\1\33\2\0\11\33"+
    "\5\0\1\321\1\0\11\33\1\74\7\33\1\0\1\33"+
    "\2\0\11\33\7\0\10\33\1\322\1\74\7\33\1\0"+
    "\1\33\2\0\11\33\17\0\1\323\31\0\1\324\51\0"+
    "\1\325\55\0\1\326\57\0\1\327\44\0\1\330\20\0"+
    "\1\331\42\0\1\332\44\0\10\33\1\333\1\74\7\33"+
    "\1\0\1\33\2\0\11\33\7\0\11\33\1\334\7\33"+
    "\1\0\1\33\2\0\11\33\34\0\1\335\27\0\1\336"+
    "\65\0\1\337\25\0\1\340\36\0\1\341\51\0\1\342"+
    "\33\0\1\343\46\0\1\344\42\0\1\345\53\0\1\346"+
    "\43\0\1\347\34\0\1\135\1\0\11\33\1\74\2\33"+
    "\1\350\4\33\1\0\1\33\2\0\11\33\14\0\1\351"+
    "\37\0\11\33\1\74\5\33\1\352\1\33\1\0\1\33"+
    "\2\0\11\33\40\0\1\353\10\0\1\354\52\0\1\355"+
    "\52\0\1\356\61\0\1\357\34\0\1\360\37\0\1\361"+
    "\33\0\11\33\1\74\7\33\1\0\1\33\2\0\4\33"+
    "\1\362\4\33\20\0\1\363\52\0\1\364\27\0\1\365"+
    "\46\0\1\366\73\0\1\367\43\0\1\370\16\0\1\371"+
    "\55\0\1\372\35\0\1\373\46\0\1\374\43\0\1\375"+
    "\35\0\11\33\1\74\3\33\1\376\3\33\1\0\1\33"+
    "\2\0\11\33\15\0\1\377\40\0\1\u0100\41\0\1\u0101"+
    "\51\0\1\u0102\54\0\1\u0103\34\0\1\u0104\52\0\1\u0105"+
    "\32\0\2\33\1\u0106\6\33\1\74\7\33\1\0\1\33"+
    "\2\0\11\33\42\0\1\u0107\31\0\1\u0108\41\0\1\u0109"+
    "\40\0\1\u010a\35\0\1\u010b\52\0\1\u010c\45\0\1\u010d"+
    "\42\0\1\u010e\52\0\1\u010f\33\0\1\u0110\47\0\1\u0111"+
    "\44\0\1\u0112\52\0\1\u0113\44\0\1\u0114\44\0\1\u0115"+
    "\37\0\1\u0116\34\0\11\33\1\74\3\33\1\u0117\3\33"+
    "\1\0\1\33\2\0\11\33\11\0\1\u0118\57\0\1\u0119"+
    "\62\0\1\u011a\20\0\1\u011b\63\0\1\u011c\25\0\1\u011d"+
    "\45\0\1\u011e\47\0\1\u011f\41\0\1\u0120\45\0\1\u0121"+
    "\43\0\1\u0122\53\0\1\u0123\36\0\1\u0124\64\0\1\u0125"+
    "\27\0\1\u0126\32\0\1\u0127\57\0\1\u0128\44\0\1\u0129"+
    "\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8843];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\6\1\1\11\5\1\2\11"+
    "\2\1\1\11\21\1\6\0\37\1\5\0\2\1\1\0"+
    "\5\1\1\0\23\1\1\0\1\1\5\0\2\1\1\0"+
    "\6\1\1\0\16\1\2\0\1\11\3\0\1\1\3\0"+
    "\5\1\11\0\14\1\2\0\1\11\2\0\1\1\4\0"+
    "\2\1\1\11\1\0\1\11\12\0\4\1\1\0\1\1"+
    "\5\0\1\11\2\0\2\1\13\0\1\1\1\0\1\1"+
    "\4\0\1\11\2\0\2\1\12\0\1\1\2\0\2\11"+
    "\3\0\1\1\3\0\2\11\2\0\1\11\1\0\1\11"+
    "\1\0\4\11\1\0\1\1\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\3\0\3\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[297];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
    private Symbol Symbol(int type){
        return new Symbol(type ,yyline, yycolumn);
    }
    private Symbol Symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    public static void errorLexico(String error,int x, int y ){
       errores+="error lexico \""+error+"\" en linea: "+Integer.toString(y)+" colulmna: "+Integer.toString(x)+"\n";
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_chtml(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2896) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter Invalido: "+yytext()+" Linea: "+ (int)(yyline+1)+" columa:"+(int)yycolumn+";");
            }
          case 67: break;
          case 2: 
            { /*Ignore*/ System.out.println("EI");
            }
          case 68: break;
          case 3: 
            { System.out.print("<");	return new Symbol(sym.INI,yyline,yycolumn);
            }
          case 69: break;
          case 4: 
            { System.out.print(">");	return new Symbol(sym.FIN,yyline,yycolumn);
            }
          case 70: break;
          case 5: 
            { /*Ignore*/System.out.println("ESPACIOE");
            }
          case 71: break;
          case 6: 
            { System.out.print("<");return new Symbol(sym.INI,yyline,yycolumn);
            }
          case 72: break;
          case 7: 
            { System.out.print(">");return new Symbol(sym.FIN,yyline,yycolumn);
            }
          case 73: break;
          case 8: 
            { return new Symbol(sym.SIGU,yyline,yycolumn);
            }
          case 74: break;
          case 9: 
            { return new Symbol(sym.SPYC,yyline,yycolumn);
            }
          case 75: break;
          case 10: 
            { /*Ignore*/ System.out.print("  ");
            }
          case 76: break;
          case 11: 
            { return new Symbol(sym.INI,yyline,yycolumn);
            }
          case 77: break;
          case 12: 
            { return new Symbol(sym.FIN,yyline,yycolumn);
            }
          case 78: break;
          case 13: 
            { return new Symbol(sym.PNOR,yyline, yycolumn,yytext());
            }
          case 79: break;
          case 14: 
            { /*Ignore*/
            }
          case 80: break;
          case 15: 
            { System.out.println("I: "+yytext());	return new Symbol(sym.PNOR,yyline,yycolumn,yytext());
            }
          case 81: break;
          case 16: 
            { return new Symbol(sym.IECT,yyline,yycolumn);
            }
          case 82: break;
          case 17: 
            { return new Symbol(sym.IECB,yyline,yycolumn);
            }
          case 83: break;
          case 18: 
            { return new Symbol(sym.PID ,yyline,yycolumn);
            }
          case 84: break;
          case 19: 
            { return new Symbol(sym.PCOM,yyline,yycolumn,yytext());
            }
          case 85: break;
          case 20: 
            { return new Symbol(sym.ICJS,yyline,yycolumn);
            }
          case 86: break;
          case 21: 
            { return new Symbol(sym.ICCS,yyline,yycolumn);
            }
          case 87: break;
          case 22: 
            { return new Symbol(sym.PRUT,yyline,yycolumn);
            }
          case 88: break;
          case 23: 
            { return new Symbol(sym.IECJ,yyline,yycolumn);
            }
          case 89: break;
          case 24: 
            { return new Symbol(sym.PALT,yyline,yycolumn);
            }
          case 90: break;
          case 25: 
            { System.out.print("C");	return new Symbol(sym.IHTML,yyline, yycolumn);
            }
          case 91: break;
          case 26: 
            { return new Symbol(sym.PCLI,yyline,yycolumn);
            }
          case 92: break;
          case 27: 
            { yybegin(YYTEXTO);return new Symbol(sym.IETE,yyline,yycolumn);
            }
          case 93: break;
          case 28: 
            { return new Symbol(sym.IETB,yyline,yycolumn);
            }
          case 94: break;
          case 29: 
            { return new Symbol(sym.IEFI,yyline,yycolumn);
            }
          case 95: break;
          case 30: 
            { return new Symbol(sym.PFON,yyline,yycolumn,yytext());
            }
          case 96: break;
          case 31: 
            { return new Symbol(sym.PANC,yyline,yycolumn);
            }
          case 97: break;
          case 32: 
            { System.out.println("BT");return new Symbol(sym.IEBO,yyline,yycolumn);
            }
          case 98: break;
          case 33: 
            { System.out.print("Pa");return new Symbol(sym.IEPA,yyline,yycolumn);
            }
          case 99: break;
          case 34: 
            { return new Symbol(sym.PGRP,yyline,yycolumn);
            }
          case 100: break;
          case 35: 
            { return new Symbol(sym.PVAL,yyline,yycolumn);
            }
          case 101: break;
          case 36: 
            { System.out.print("U");yybegin(YYCUERPO);return new Symbol(sym.ICUER,yyline, yycolumn);
            }
          case 102: break;
          case 37: 
            { System.out.print("T");return new Symbol(sym.ITIT,yyline,yycolumn);
            }
          case 103: break;
          case 38: 
            { return new Symbol(sym.FECT,yyline,yycolumn);
            }
          case 104: break;
          case 39: 
            { return new Symbol(sym.FECB,yyline,yycolumn);
            }
          case 105: break;
          case 40: 
            { return new Symbol(sym.IEIM,yyline,yycolumn);
            }
          case 106: break;
          case 41: 
            { return new Symbol(sym.IEEN,yyline,yycolumn);
            }
          case 107: break;
          case 42: 
            { return new Symbol(sym.IEOP,yyline,yycolumn);
            }
          case 108: break;
          case 43: 
            { return new Symbol(sym.FCJS,yyline,yycolumn);
            }
          case 109: break;
          case 44: 
            { return new Symbol(sym.IETA,yyline,yycolumn);
            }
          case 110: break;
          case 45: 
            { return new Symbol(sym.IESP,yyline,yycolumn);
            }
          case 111: break;
          case 46: 
            { return new Symbol(sym.FCCS,yyline,yycolumn);
            }
          case 112: break;
          case 47: 
            { return new Symbol(sym.FECJ,yyline,yycolumn);
            }
          case 113: break;
          case 48: 
            { return new Symbol(sym.PALI,yyline,yycolumn);
            }
          case 114: break;
          case 49: 
            { System.out.print("F");	return new Symbol(sym.FHTML,yyline, yycolumn);
            }
          case 115: break;
          case 50: 
            { return new Symbol(sym.FETB,yyline,yycolumn);
            }
          case 116: break;
          case 51: 
            { return new Symbol(sym.FEFI,yyline,yycolumn);
            }
          case 117: break;
          case 52: 
            { System.out.print("/BT");return new Symbol(sym.FEBO,yyline,yycolumn);
            }
          case 118: break;
          case 53: 
            { System.out.print("/Pa");return new Symbol(sym.FEPA,yyline,yycolumn);
            }
          case 119: break;
          case 54: 
            { return new Symbol(sym.ESAL,yyline,yycolumn);
            }
          case 120: break;
          case 55: 
            { yybegin(YYCUERPO); return new Symbol(sym.FETE,yyline,yycolumn);
            }
          case 121: break;
          case 56: 
            { System.out.print("E");yybegin(YYCABEZA); return new Symbol(sym.IENCA,yyline, yycolumn);
            }
          case 122: break;
          case 57: 
            { System.out.print("FT");return new Symbol(sym.FTIT,yyline,yycolumn);
            }
          case 123: break;
          case 58: 
            { return new Symbol(sym.IECA,yyline,yycolumn);
            }
          case 124: break;
          case 59: 
            { yybegin(YYINITIAL);System.out.print("/CU"); return new Symbol(sym.FCUER,yyline, yycolumn);
            }
          case 125: break;
          case 60: 
            { return new Symbol(sym.FEIM,yyline,yycolumn);
            }
          case 126: break;
          case 61: 
            { return new Symbol(sym.FEOP,yyline,yycolumn);
            }
          case 127: break;
          case 62: 
            { return new Symbol(sym.FETA,yyline,yycolumn);
            }
          case 128: break;
          case 63: 
            { return new Symbol(sym.FEEN,yyline,yycolumn);
            }
          case 129: break;
          case 64: 
            { return new Symbol(sym.FESP,yyline,yycolumn);
            }
          case 130: break;
          case 65: 
            { System.out.print("FE");yybegin(YYINITIAL); return new Symbol(sym.FENCA,yyline, yycolumn);
            }
          case 131: break;
          case 66: 
            { return new Symbol(sym.FECA,yyline,yycolumn);
            }
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
