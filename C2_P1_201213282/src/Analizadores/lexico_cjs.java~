/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
import static Analizadores.Tokens.*;
import java_cup.runtime.*;
import java.io.Reader;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico_CCSS</tt>
 */
public class lexico_cjs implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\2\1\54\1\4\1\4\22\0\1\2\1\0\1\5"+
    "\5\0\1\34\1\35\1\3\1\24\1\30\1\25\1\53\1\1\12\52"+
    "\1\26\1\27\1\0\1\31\3\0\1\14\1\41\1\6\1\36\1\11"+
    "\1\44\1\40\1\45\1\16\1\50\1\0\1\21\1\10\1\12\1\7"+
    "\1\22\1\42\1\15\1\23\1\13\1\20\1\43\1\0\1\37\1\47"+
    "\1\46\1\32\1\0\1\33\1\0\1\17\1\0\1\14\1\41\1\6"+
    "\1\36\1\11\1\44\1\40\1\45\1\16\1\50\1\0\1\21\1\10"+
    "\1\12\1\7\1\22\1\42\1\15\1\23\1\13\1\20\1\43\1\0"+
    "\1\37\1\47\1\46\1\0\1\51\10\0\1\54\252\0\2\16\115\0"+
    "\1\23\u1ea8\0\1\54\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\11\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\7\1\1\3\1\17\16\0\1\20\12\0\1\21\73\0"+
    "\1\22\3\0\1\23\1\0\1\24\1\0\1\25\1\26"+
    "\13\0\1\27\22\0\1\30\3\0\1\31\3\0\1\32"+
    "\1\0\1\33\1\0\1\34\4\0\1\35\3\0\1\36"+
    "\1\0\1\37\1\0\1\40\4\0\1\41\1\42\1\43"+
    "\1\44\1\0\1\45\6\0\1\46\4\0\1\47\7\0"+
    "\1\50\5\0\1\51\1\0\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\55\0\132\0\55\0\207\0\264\0\341"+
    "\0\u010e\0\u013b\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u021c"+
    "\0\55\0\55\0\55\0\55\0\55\0\55\0\55\0\55"+
    "\0\u0249\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384"+
    "\0\u021c\0\u03b1\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf"+
    "\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\55"+
    "\0\u0627\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"+
    "\0\u078f\0\u07bc\0\55\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d"+
    "\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e\0\u09ab\0\u09d8\0\u0a05"+
    "\0\u0a32\0\u0a5f\0\u0a8c\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d"+
    "\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d"+
    "\0\u0e6a\0\u0e97\0\u0ec4\0\u0ef1\0\u0f1e\0\u0f4b\0\u0f78\0\u0fa5"+
    "\0\u0fd2\0\u0fff\0\u102c\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d"+
    "\0\u113a\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\55\0\u1248"+
    "\0\u1275\0\u12a2\0\55\0\u12cf\0\55\0\u12fc\0\55\0\55"+
    "\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a\0\u1437\0\u1464"+
    "\0\u1491\0\u14be\0\u14eb\0\55\0\u1518\0\u1545\0\u1572\0\u159f"+
    "\0\u15cc\0\u15f9\0\u1626\0\u1653\0\u1680\0\u16ad\0\u16da\0\u1707"+
    "\0\u1734\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\55\0\u1842"+
    "\0\u186f\0\u189c\0\55\0\u18c9\0\u18f6\0\u1923\0\55\0\u1950"+
    "\0\55\0\u197d\0\55\0\u19aa\0\u19d7\0\u1a04\0\u1a31\0\55"+
    "\0\u1a5e\0\u1a8b\0\u1ab8\0\55\0\u1ae5\0\55\0\u1b12\0\55"+
    "\0\u1b3f\0\u1b6c\0\u1b99\0\u1bc6\0\55\0\55\0\55\0\55"+
    "\0\u1bf3\0\55\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7\0\u1cd4\0\u1d01"+
    "\0\55\0\u1d2e\0\u1d5b\0\u1d88\0\u1db5\0\55\0\u1de2\0\u1e0f"+
    "\0\u1e3c\0\u1e69\0\u1e96\0\u1ec3\0\u1ef0\0\55\0\u1f1d\0\u1f4a"+
    "\0\u1f77\0\u1fa4\0\u1fd1\0\55\0\u1ffe\0\55";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\2\1\15\2\2"+
    "\1\16\2\2\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\2\1\32\1\33"+
    "\1\2\1\34\1\35\1\36\2\2\1\37\1\40\1\41"+
    "\1\2\60\0\1\4\1\0\1\4\44\0\1\4\3\0"+
    "\55\42\7\0\1\43\1\0\1\44\2\0\1\45\3\0"+
    "\1\46\56\0\1\47\46\0\1\50\1\0\1\51\47\0"+
    "\1\52\54\0\1\53\2\0\1\54\60\0\1\55\1\56"+
    "\3\0\1\57\65\0\1\60\7\0\1\61\17\0\1\62"+
    "\115\0\1\41\13\0\1\63\60\0\1\64\46\0\1\65"+
    "\56\0\1\66\4\0\1\67\45\0\1\70\54\0\1\71"+
    "\65\0\1\72\36\0\1\4\1\0\1\4\44\0\1\4"+
    "\1\41\7\0\1\73\57\0\1\74\10\0\1\75\45\0"+
    "\1\76\64\0\1\77\47\0\1\100\53\0\1\101\107\0"+
    "\1\102\17\0\1\103\102\0\1\104\53\0\1\105\25\0"+
    "\1\106\57\0\1\107\57\0\1\110\104\0\1\111\50\0"+
    "\1\112\25\0\1\113\56\0\1\114\57\0\1\115\51\0"+
    "\1\116\54\0\1\117\62\0\1\120\43\0\1\121\2\0"+
    "\1\122\54\0\1\123\62\0\1\124\42\0\1\125\52\0"+
    "\1\126\60\0\1\127\57\0\1\130\61\0\1\131\73\0"+
    "\1\132\32\0\1\133\54\0\1\134\51\0\1\135\52\0"+
    "\1\136\54\0\1\137\50\0\1\140\57\0\1\141\115\0"+
    "\1\142\21\0\1\143\51\0\1\144\50\0\1\145\65\0"+
    "\1\146\70\0\1\147\31\0\1\150\57\0\1\151\74\0"+
    "\1\152\26\0\1\153\62\0\1\154\51\0\1\155\53\0"+
    "\1\156\57\0\1\157\54\0\1\160\52\0\1\161\57\0"+
    "\1\162\56\0\1\163\57\0\1\164\54\0\1\165\47\0"+
    "\1\166\45\0\1\167\56\0\1\170\60\0\1\171\50\0"+
    "\1\172\43\0\2\142\1\173\25\142\1\173\24\142\16\0"+
    "\1\174\52\0\1\175\46\0\1\176\55\0\1\177\56\0"+
    "\1\200\61\0\1\201\77\0\1\202\22\0\1\203\61\0"+
    "\1\204\106\0\1\205\24\0\1\206\51\0\1\207\54\0"+
    "\1\210\55\0\1\211\54\0\1\212\103\0\1\213\22\0"+
    "\1\214\51\0\1\215\54\0\1\216\67\0\1\217\72\0"+
    "\1\220\26\0\1\221\57\0\1\222\51\0\1\223\110\0"+
    "\1\224\15\0\1\225\67\0\1\226\44\0\1\227\56\0"+
    "\1\230\50\0\1\231\111\0\1\232\24\0\1\233\51\0"+
    "\1\234\101\0\1\235\37\0\1\236\47\0\1\237\60\0"+
    "\1\240\54\0\1\241\55\0\1\242\46\0\1\243\77\0"+
    "\1\244\54\0\1\245\33\0\1\246\53\0\1\247\54\0"+
    "\1\250\51\0\1\251\64\0\1\252\42\0\1\253\57\0"+
    "\1\254\60\0\1\255\53\0\1\256\76\0\1\257\24\0"+
    "\1\260\72\0\1\261\50\0\1\262\54\0\1\263\47\0"+
    "\1\264\56\0\1\265\45\0\1\266\103\0\1\267\37\0"+
    "\1\270\44\0\1\271\56\0\1\272\47\0\1\273\64\0"+
    "\1\274\51\0\1\275\54\0\1\276\55\0\1\277\54\0"+
    "\1\300\50\0\1\301\60\0\1\302\50\0\1\303\60\0"+
    "\1\304\54\0\1\305\47\0\1\306\56\0\1\307\54\0"+
    "\1\310\64\0\1\311\71\0\1\312\35\0\1\313\47\0"+
    "\1\314\54\0\1\315\51\0\1\316\55\0\1\317\12\0"+
    "\1\320\54\0\1\321\44\0\1\322\61\0\1\323\52\0"+
    "\1\324\54\0\1\325\45\0\1\326\66\0\1\327\43\0"+
    "\1\330\53\0\1\331\60\0\1\332\63\0\1\333\44\0"+
    "\1\334\60\0\1\330\57\0\1\335\44\0\1\336\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8235];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\13\1\10\11\11\1\16\0"+
    "\1\11\12\0\1\11\73\0\1\11\3\0\1\11\1\0"+
    "\1\11\1\0\2\11\13\0\1\11\22\0\1\11\3\0"+
    "\1\11\3\0\1\11\1\0\1\11\1\0\1\11\4\0"+
    "\1\11\3\0\1\11\1\0\1\11\1\0\1\11\4\0"+
    "\4\11\1\0\1\11\6\0\1\11\4\0\1\11\7\0"+
    "\1\11\5\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
    private Symbol Symbol(int type){
        return new Symbol(type ,yyline, yycolumn);
    }
    private Symbol Symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    public static void errorLexico(String error,int x, int y ){
       errores+="error lexico \""+error+"\" en linea: "+Integer.toString(y)+" colulmna: "+Integer.toString(x)+"\n";
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_cjs(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 222) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter Invalido: "+yytext()+" Linea: "+ (int)(yyline+1)+" columa:"+(int)yycolumn+";");
            }
          case 42: break;
          case 2: 
            { return new Symbol(symc.SDIV,yyline,yycolumn);
            }
          case 43: break;
          case 3: 
            { /*Ignore*/
            }
          case 44: break;
          case 4: 
            { return new Symbol(symc.SMUL,yyline,yycolumn);
            }
          case 45: break;
          case 5: 
            { return new Symbol(symc.SMAS,yyline,yycolumn);
            }
          case 46: break;
          case 6: 
            { return new Symbol(symc.SMEN,yyline,yycolumn);
            }
          case 47: break;
          case 7: 
            { return new Symbol(symc.SDPU,yyline,yycolumn);
            }
          case 48: break;
          case 8: 
            { return new Symbol(symj.SPYC,yyline,yycolumn);
            }
          case 49: break;
          case 9: 
            { return new Symbol(symc.SCOM,yyline,yycolumn);
            }
          case 50: break;
          case 10: 
            { return new Symbol(symc.SIGU,yyline,yycolumn);
            }
          case 51: break;
          case 11: 
            { return new Symbol(symc.SICO,yyline,yycolumn);
            }
          case 52: break;
          case 12: 
            { return new Symbol(symc.SFCO,yyline,yycolumn);
            }
          case 53: break;
          case 13: 
            { return new Symbol(symc.SIPA,yyline,yycolumn);
            }
          case 54: break;
          case 14: 
            { return new Symbol(symc.SFPA,yyline,yycolumn);
            }
          case 55: break;
          case 15: 
            { return new Symbol(symj.PNUM,yyline,yycolumn);
            }
          case 56: break;
          case 16: 
            { return new Symbol(symc.RID,yyline,yycolumn);
            }
          case 57: break;
          case 17: 
            { return new Symbol(symj.PCOM,yyline,yycolumn,yytext());
            }
          case 58: break;
          case 18: 
            { return new Symbol(symj.RTEX,yyline,yycolumn);
            }
          case 59: break;
          case 19: 
            { return new Symbol(symj.PID,yyline, yycolumn,yytext());
            }
          case 60: break;
          case 20: 
            { return new Symbol(symj.RLET,yyline,yycolumn);
            }
          case 61: break;
          case 21: 
            { return new Symbol(symj.RGRU,yyline,yycolumn);
            }
          case 62: break;
          case 22: 
            { return new Symbol(symj.RBOR,yyline,yycolumn);
            }
          case 63: break;
          case 23: 
            { return new Symbol(symj.ROPA,yyline,yycolumn);
            }
          case 64: break;
          case 24: 
            { return new Symbol(symj.RCUR,yyline,yycolumn);
            }
          case 65: break;
          case 25: 
            { return new Symbol(symj.RTAM,yyline,yycolumn);
            }
          case 66: break;
          case 26: 
            { return new Symbol(symj.RDER,yyline,yycolumn);
            }
          case 67: break;
          case 27: 
            { return new Symbol(symj.RVIS,yyline,yycolumn);
            }
          case 68: break;
          case 28: 
            { return new Symbol(symj.RFOR,yyline,yycolumn);
            }
          case 69: break;
          case 29: 
            { return new Symbol(symj.RCEN,yyline,yycolumn);
            }
          case 70: break;
          case 30: 
            { return new Symbol(symj.RNEG,yyline,yycolumn);
            }
          case 71: break;
          case 31: 
            { return new Symbol(symj.RALI,yyline,yycolumn);
            }
          case 72: break;
          case 32: 
            { return new Symbol(symj.RVER,yyline,yycolumn);
            }
          case 73: break;
          case 33: 
            { return new Symbol(symj.RCOL,yyline,yycolumn);
            }
          case 74: break;
          case 34: 
            { return new Symbol(symj.RCAP,yyline,yycolumn);
            }
          case 75: break;
          case 35: 
            { return new Symbol(symj.RMAY,yyline,yycolumn);
            }
          case 76: break;
          case 36: 
            { return new Symbol(symj.RMIN,yyline,yycolumn);
            }
          case 77: break;
          case 37: 
            { return new Symbol(symj.RIZQ,yyline,yycolumn);
            }
          case 78: break;
          case 38: 
            { return new Symbol(symj.RHOR,yyline,yycolumn);
            }
          case 79: break;
          case 39: 
            { return new Symbol(symj.RJUS,yyline,yycolumn);
            }
          case 80: break;
          case 40: 
            { return new Symbol(symj.RFEL,yyline,yycolumn);
            }
          case 81: break;
          case 41: 
            { return new Symbol(symj.RAUR,yyline,yycolumn);
            }
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
