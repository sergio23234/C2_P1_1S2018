
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package Analizadores;

import java.io.FileReader;
import Principal.NCCSS;
import Principal.Nodo_error;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico_CCSS extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symc.class;
}

  /** Default constructor. */
  public Sintactico_CCSS() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico_CCSS(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico_CCSS(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\012\004\000\002\012\003\000\002\013\006" +
    "\000\002\015\004\000\002\015\003\000\002\014\006\000" +
    "\002\014\006\000\002\014\006\000\002\014\006\000\002" +
    "\005\013\000\002\016\007\000\002\017\007\000\002\011" +
    "\007\000\002\021\007\000\002\022\013\000\002\022\013" +
    "\000\002\023\007\000\002\006\007\000\002\025\007\000" +
    "\002\026\015\000\002\027\006\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\030" +
    "\005\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\031\010\000" +
    "\002\031\010\000\002\032\004\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\004\000\002\033\003\000\002\004\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\004\004\010\001\002\000\004\002\000\001" +
    "\002\000\004\002\221\001\002\000\006\002\uffff\004\010" +
    "\001\002\000\006\002\ufffd\004\ufffd\001\002\000\004\021" +
    "\011\001\002\000\006\030\013\034\015\001\002\000\010" +
    "\024\ufffa\030\ufffa\034\ufffa\001\002\000\004\025\213\001" +
    "\002\000\010\024\212\030\013\034\015\001\002\000\004" +
    "\025\016\001\002\000\004\004\017\001\002\000\004\027" +
    "\020\001\002\000\004\026\021\001\002\000\032\006\030" +
    "\007\033\031\032\033\053\035\044\036\047\037\050\040" +
    "\027\044\036\051\041\053\046\054\034\001\002\000\040" +
    "\006\uffdc\007\uffdc\024\uffdc\030\uffdc\031\uffdc\033\uffdc\034" +
    "\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\044\uffdc\051\uffdc" +
    "\053\uffdc\054\uffdc\001\002\000\040\006\uffd4\007\uffd4\024" +
    "\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\044\uffd4\051\uffd4\053\uffd4\054\uffd4\001" +
    "\002\000\040\006\uffd2\007\uffd2\024\uffd2\030\uffd2\031\uffd2" +
    "\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\044" +
    "\uffd2\051\uffd2\053\uffd2\054\uffd2\001\002\000\040\006\uffda" +
    "\007\uffda\024\uffda\030\uffda\031\uffda\033\uffda\034\uffda\035" +
    "\uffda\036\uffda\037\uffda\040\uffda\044\uffda\051\uffda\053\uffda" +
    "\054\uffda\001\002\000\040\006\uffd5\007\uffd5\024\uffd5\030" +
    "\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\044\uffd5\051\uffd5\053\uffd5\054\uffd5\001\002\000" +
    "\004\014\173\001\002\000\004\014\167\001\002\000\040" +
    "\006\uffd6\007\uffd6\024\uffd6\030\uffd6\031\uffd6\033\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\044\uffd6\051\uffd6" +
    "\053\uffd6\054\uffd6\001\002\000\004\014\163\001\002\000" +
    "\004\014\153\001\002\000\004\014\140\001\002\000\040" +
    "\006\uffd7\007\uffd7\024\uffd7\030\uffd7\031\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\044\uffd7\051\uffd7" +
    "\053\uffd7\054\uffd7\001\002\000\004\014\132\001\002\000" +
    "\040\006\uffd0\007\uffd0\024\uffd0\030\uffd0\031\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\044\uffd0\051" +
    "\uffd0\053\uffd0\054\uffd0\001\002\000\040\006\030\007\033" +
    "\024\uffde\030\uffde\031\032\033\053\034\uffde\035\044\036" +
    "\047\037\050\040\027\044\036\051\041\053\046\054\034" +
    "\001\002\000\004\014\125\001\002\000\004\026\124\001" +
    "\002\000\040\006\uffd8\007\uffd8\024\uffd8\030\uffd8\031\uffd8" +
    "\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040\uffd8\044" +
    "\uffd8\051\uffd8\053\uffd8\054\uffd8\001\002\000\004\014\120" +
    "\001\002\000\040\006\uffdb\007\uffdb\024\uffdb\030\uffdb\031" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\044\uffdb\051\uffdb\053\uffdb\054\uffdb\001\002\000\004\014" +
    "\114\001\002\000\004\014\102\001\002\000\004\014\076" +
    "\001\002\000\040\006\uffd3\007\uffd3\024\uffd3\030\uffd3\031" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\044\uffd3\051\uffd3\053\uffd3\054\uffd3\001\002\000\040\006" +
    "\uffd9\007\uffd9\024\uffd9\030\uffd9\031\uffd9\033\uffd9\034\uffd9" +
    "\035\uffd9\036\uffd9\037\uffd9\040\uffd9\044\uffd9\051\uffd9\053" +
    "\uffd9\054\uffd9\001\002\000\004\014\054\001\002\000\004" +
    "\016\055\001\002\000\006\012\056\013\057\001\002\000" +
    "\020\005\uffc9\010\uffc9\011\uffc9\017\uffc9\020\uffc9\024\uffc9" +
    "\026\uffc9\001\002\000\022\005\uffc8\010\uffc8\011\uffc8\015" +
    "\074\017\uffc8\020\uffc8\024\uffc8\026\uffc8\001\002\000\020" +
    "\005\uffcf\010\065\011\066\017\067\020\064\024\uffcf\026" +
    "\uffcf\001\002\000\004\026\063\001\002\000\020\005\uffca" +
    "\010\uffca\011\uffca\017\uffca\020\uffca\024\uffca\026\uffca\001" +
    "\002\000\040\006\ufff3\007\ufff3\024\ufff3\030\ufff3\031\ufff3" +
    "\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\044" +
    "\ufff3\051\ufff3\053\ufff3\054\ufff3\001\002\000\006\012\056" +
    "\013\057\001\002\000\006\012\056\013\057\001\002\000" +
    "\006\012\056\013\057\001\002\000\006\012\056\013\057" +
    "\001\002\000\020\005\uffcc\010\uffcc\011\uffcc\017\uffcc\020" +
    "\uffcc\024\uffcc\026\uffcc\001\002\000\020\005\uffcd\010\uffcd" +
    "\011\uffcd\017\uffcd\020\uffcd\024\uffcd\026\uffcd\001\002\000" +
    "\020\005\uffce\010\uffce\011\uffce\017\uffce\020\uffce\024\uffce" +
    "\026\uffce\001\002\000\020\005\uffcb\010\uffcb\011\uffcb\017" +
    "\uffcb\020\uffcb\024\uffcb\026\uffcb\001\002\000\004\013\075" +
    "\001\002\000\020\005\uffc7\010\uffc7\011\uffc7\017\uffc7\020" +
    "\uffc7\024\uffc7\026\uffc7\001\002\000\004\016\077\001\002" +
    "\000\004\004\100\001\002\000\004\026\101\001\002\000" +
    "\040\006\uffee\007\uffee\024\uffee\030\uffee\031\uffee\033\uffee" +
    "\034\uffee\035\uffee\036\uffee\037\uffee\040\uffee\044\uffee\051" +
    "\uffee\053\uffee\054\uffee\001\002\000\004\016\103\001\002" +
    "\000\004\021\104\001\002\000\006\012\056\013\057\001" +
    "\002\000\004\005\106\001\002\000\006\012\056\013\057" +
    "\001\002\000\004\005\110\001\002\000\004\004\111\001" +
    "\002\000\004\024\112\001\002\000\004\026\113\001\002" +
    "\000\040\006\uffeb\007\uffeb\024\uffeb\030\uffeb\031\uffeb\033" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\044\uffeb" +
    "\051\uffeb\053\uffeb\054\uffeb\001\002\000\004\016\115\001" +
    "\002\000\006\012\056\013\057\001\002\000\004\026\117" +
    "\001\002\000\040\006\ufff1\007\ufff1\024\ufff1\030\ufff1\031" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\044\ufff1\051\ufff1\053\ufff1\054\ufff1\001\002\000\004\016" +
    "\121\001\002\000\004\004\122\001\002\000\004\026\123" +
    "\001\002\000\040\006\uffed\007\uffed\024\uffed\030\uffed\031" +
    "\uffed\033\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040\uffed" +
    "\044\uffed\051\uffed\053\uffed\054\uffed\001\002\000\040\006" +
    "\uffd1\007\uffd1\024\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\044\uffd1\051\uffd1\053" +
    "\uffd1\054\uffd1\001\002\000\004\016\126\001\002\000\006" +
    "\012\056\013\057\001\002\000\004\026\130\001\002\000" +
    "\040\006\uffec\007\uffec\024\uffec\030\uffec\031\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\044\uffec\051" +
    "\uffec\053\uffec\054\uffec\001\002\000\040\006\uffdd\007\uffdd" +
    "\024\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\044\uffdd\051\uffdd\053\uffdd\054\uffdd" +
    "\001\002\000\004\016\133\001\002\000\012\041\137\042" +
    "\136\045\134\052\135\001\002\000\040\006\ufff9\007\ufff9" +
    "\024\ufff9\030\ufff9\031\ufff9\033\ufff9\034\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\044\ufff9\051\ufff9\053\ufff9\054\ufff9" +
    "\001\002\000\040\006\ufff6\007\ufff6\024\ufff6\030\ufff6\031" +
    "\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6" +
    "\044\ufff6\051\ufff6\053\ufff6\054\ufff6\001\002\000\040\006" +
    "\ufff7\007\ufff7\024\ufff7\030\ufff7\031\ufff7\033\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\044\ufff7\051\ufff7\053" +
    "\ufff7\054\ufff7\001\002\000\040\006\ufff8\007\ufff8\024\ufff8" +
    "\030\ufff8\031\ufff8\033\ufff8\034\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\044\ufff8\051\ufff8\053\ufff8\054\ufff8\001\002" +
    "\000\004\016\141\001\002\000\004\021\142\001\002\000" +
    "\004\004\143\001\002\000\004\005\144\001\002\000\006" +
    "\022\145\023\146\001\002\000\004\024\151\001\002\000" +
    "\004\024\147\001\002\000\004\026\150\001\002\000\040" +
    "\006\uffef\007\uffef\024\uffef\030\uffef\031\uffef\033\uffef\034" +
    "\uffef\035\uffef\036\uffef\037\uffef\040\uffef\044\uffef\051\uffef" +
    "\053\uffef\054\uffef\001\002\000\004\026\152\001\002\000" +
    "\040\006\ufff0\007\ufff0\024\ufff0\030\ufff0\031\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\044\ufff0\051" +
    "\ufff0\053\ufff0\054\ufff0\001\002\000\004\016\154\001\002" +
    "\000\004\021\155\001\002\000\006\012\056\013\057\001" +
    "\002\000\004\005\157\001\002\000\006\012\056\013\057" +
    "\001\002\000\004\024\161\001\002\000\004\026\162\001" +
    "\002\000\040\006\ufff5\007\ufff5\024\ufff5\030\ufff5\031\ufff5" +
    "\033\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\044" +
    "\ufff5\051\ufff5\053\ufff5\054\ufff5\001\002\000\004\016\164" +
    "\001\002\000\006\012\056\013\057\001\002\000\004\026" +
    "\166\001\002\000\040\006\ufff4\007\ufff4\024\ufff4\030\ufff4" +
    "\031\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\044\ufff4\051\ufff4\053\ufff4\054\ufff4\001\002\000\004" +
    "\016\170\001\002\000\006\012\056\013\057\001\002\000" +
    "\004\026\172\001\002\000\040\006\ufff2\007\ufff2\024\ufff2" +
    "\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2\037" +
    "\ufff2\040\ufff2\044\ufff2\051\ufff2\053\ufff2\054\ufff2\001\002" +
    "\000\004\016\174\001\002\000\014\032\175\043\177\046" +
    "\200\047\201\050\202\001\002\000\006\005\uffe3\026\uffe3" +
    "\001\002\000\006\005\203\026\uffea\001\002\000\006\005" +
    "\uffe4\026\uffe4\001\002\000\006\005\uffe2\026\uffe2\001\002" +
    "\000\006\005\uffe1\026\uffe1\001\002\000\006\005\uffe0\026" +
    "\uffe0\001\002\000\014\032\204\043\206\046\205\047\207" +
    "\050\210\001\002\000\006\005\uffe8\026\uffe8\001\002\000" +
    "\006\005\uffe7\026\uffe7\001\002\000\006\005\uffe9\026\uffe9" +
    "\001\002\000\006\005\uffe6\026\uffe6\001\002\000\006\005" +
    "\uffe5\026\uffe5\001\002\000\010\024\ufffb\030\ufffb\034\ufffb" +
    "\001\002\000\006\002\ufffc\004\ufffc\001\002\000\004\004" +
    "\214\001\002\000\004\027\215\001\002\000\004\026\216" +
    "\001\002\000\032\006\030\007\033\031\032\033\053\035" +
    "\044\036\047\037\050\040\027\044\036\051\041\053\046" +
    "\054\034\001\002\000\040\006\030\007\033\024\uffdf\030" +
    "\uffdf\031\032\033\053\034\uffdf\035\044\036\047\037\050" +
    "\040\027\044\036\051\041\053\046\054\034\001\002\000" +
    "\006\002\ufffe\004\ufffe\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\012\002\004\003\003\012\005\013\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\013\031\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\210\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\050" +
    "\006\042\011\023\014\025\016\022\017\036\021\034\022" +
    "\044\023\024\025\051\026\030\027\041\032\037\033\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\050\006\042\011" +
    "\023\014\025\016\022\017\036\021\034\022\044\023\024" +
    "\025\051\026\030\027\041\033\130\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\060\007\057\010" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\072\010\061\001\001\000\006\007\071" +
    "\010\061\001\001\000\006\007\070\010\061\001\001\000" +
    "\006\007\067\010\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\104\007\057\010\061\001\001" +
    "\000\002\001\001\000\010\004\106\007\057\010\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\115\007\057\010\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\126\007\057\010\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\155" +
    "\007\057\010\061\001\001\000\002\001\001\000\010\004" +
    "\157\007\057\010\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\164\007\057\010\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\170\007\057\010" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\030\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\050\006\042\011\023\014\025\016\022\017\036\021" +
    "\034\022\044\023\024\025\051\026\030\027\041\032\216" +
    "\033\021\001\001\000\034\005\050\006\042\011\023\014" +
    "\025\016\022\017\036\021\034\022\044\023\024\025\051" +
    "\026\030\027\041\033\130\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico_CCSS$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico_CCSS$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico_CCSS$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static ArrayList<Nodo_error> Errores = new ArrayList<Nodo_error>();
    public static boolean errores=false;
    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right) +", Linea: "+(s.left+1)+ " no esperado");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }
    public NCCSS regresar_raiz(){
        return RCCSS;
    }

 /*codig de usuario */
 String total = "";
 public NCCSS RCCSS = null;
 //public ArrayList<Nodo> e = new ArrayList<Nodo>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico_CCSS$actions {


    public String estado="";

  private final Sintactico_CCSS parser;

  /** Constructor */
  CUP$Sintactico_CCSS$actions(Sintactico_CCSS parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico_CCSS$do_action_part00000000(
    int                        CUP$Sintactico_CCSS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_CCSS$parser,
    java.util.Stack            CUP$Sintactico_CCSS$stack,
    int                        CUP$Sintactico_CCSS$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico_CCSS$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico_CCSS$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Start EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico_CCSS$parser.done_parsing();
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Start ::= UNO 
            {
              Object RESULT =null;

              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Start",0, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // UNO ::= ESTRUCTURA_CSS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RCCSS =e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("UNO",1, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ESTRUCTURA_CSS ::= ESTRUCTURA_CSS ESTRUCTURA_ID 
            {
              NCCSS RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		e2.hijos.add(e1); RESULT = e2;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CSS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ESTRUCTURA_CSS ::= ESTRUCTURA_ID 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_CSS",8, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ESTRUCTURA_ID ::= PID SICO CUERPO_ID SFCO 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="inicio"; nuevo.valor=e1.toString(); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ID",9, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CUERPO_ID ::= CUERPO_ID ESTRUCTURA_GENE 
            {
              NCCSS RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		e2.hijos.add(e1); RESULT = e2;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("CUERPO_ID",11, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_ID ::= ESTRUCTURA_GENE 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("CUERPO_ID",11, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ESTRUCTURA_ALIN ::= RALI SDPU SIGU RIZQ 
            {
              NCCSS RESULT =null;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="alineado"; nuevo.valor="izquierdo"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ALIN",10, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESTRUCTURA_ALIN ::= RALI SDPU SIGU RDER 
            {
              NCCSS RESULT =null;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="alineado"; nuevo.valor="derecha"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ALIN",10, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESTRUCTURA_ALIN ::= RALI SDPU SIGU RCEN 
            {
              NCCSS RESULT =null;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="alineado"; nuevo.valor="centrado"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ALIN",10, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESTRUCTURA_ALIN ::= RALI SDPU SIGU RJUS 
            {
              NCCSS RESULT =null;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="alineado"; nuevo.valor="justificado"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_ALIN",10, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESTRUCTURA_TAM_EL ::= RTAE SDPU SIGU SICO EXPRESION SCOM EXPRESION SFCO SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Tamelemento"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_TAM_EL",3, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESTRUCTURA_TEXT ::= RTEX SDPU SIGU EXPRESION SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="texto"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_TEXT",12, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESTRUCTURA_LETR ::= RLET SDPU SIGU EXPRESION SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="letra"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_LETR",13, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESTRUCTURA_TAMT ::= RTAM SDPU SIGU EXPRESION SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="tamatext"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_TAMT",7, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESTRUCTURA_FOND ::= RFEL SDPU SIGU EXPRESION SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Fondoelemento"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FOND",15, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ESTRUCTURA_AUTO ::= RAUR SDPU SIGU SICO PID SCOM RHOR SFCO SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="AUTOREDIMENSION"; nuevo.valor=e1.toString()+",0"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_AUTO",16, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ESTRUCTURA_AUTO ::= RAUR SDPU SIGU SICO PID SCOM RVER SFCO SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="AUTOREDIMENSION"; nuevo.valor=e1.toString()+",1"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_AUTO",16, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ESTRUCTURA_VISI ::= RVIS SDPU SIGU PID SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="visible"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_VISI",17, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ESTRUCTURA_OPAQ ::= ROPA SDPU SIGU PID SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="opaque"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_OPAQ",4, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ESTRUCTURA_COLT ::= RCOL SDPU SIGU EXPRESION SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="colortext"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_COLT",19, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ESTRUCTURA_BORD ::= RBOR SDPU SIGU SICO EXPRESION SCOM EXPRESION SCOM PID SFCO SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-6)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-6)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-6)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-4)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Borde"; nuevo.valor=e1.toString()+"/"+e2+"/"+e3; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_BORD",20, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ESTRUCTURA_FORM ::= RFOR SDPU SIGU Lista_For 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="formato"; nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_FORM",21, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Lista_For ::= Lista_For SCOM RNEG 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="negrita"; RESULT = nuevo; e1.hijos.add(nuevo); RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Lista_For ::= Lista_For SCOM RCUR 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="cursiva"; RESULT = nuevo; e1.hijos.add(nuevo); RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Lista_For ::= Lista_For SCOM RMAY 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="mayuscula"; RESULT = nuevo; e1.hijos.add(nuevo); RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Lista_For ::= Lista_For SCOM RMIN 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="minuscula"; RESULT = nuevo; e1.hijos.add(nuevo); RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Lista_For ::= Lista_For SCOM RCAP 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="capital-T"; RESULT = nuevo; e1.hijos.add(nuevo); RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Lista_For ::= RNEG 
            {
              NCCSS RESULT =null;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="negrita"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Lista_For ::= RCUR 
            {
              NCCSS RESULT =null;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="cursiva"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Lista_For ::= RMAY 
            {
              NCCSS RESULT =null;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="mayuscula"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Lista_For ::= RMIN 
            {
              NCCSS RESULT =null;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="minuscula"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Lista_For ::= RCAP 
            {
              NCCSS RESULT =null;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Lista_For"; nuevo.valor="capital-T"; RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Lista_For",22, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ESTRUCTURA_GENE ::= RID SIPA PID SFPA SPYC CUERPO_GENE 
            {
              NCCSS RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="ID"; nuevo.valor=e2.toString(); nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_GENE",23, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ESTRUCTURA_GENE ::= RGRU SIPA PID SFPA SPYC CUERPO_GENE 
            {
              NCCSS RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta="Grupo"; nuevo.valor=e2.toString();nuevo.hijos.add(e1); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("ESTRUCTURA_GENE",23, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CUERPO_GENE ::= CUERPO_GENE TIPO_CUERPO_G 
            {
              NCCSS RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		e2.hijos.add(e1); RESULT = e2;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("CUERPO_GENE",24, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CUERPO_GENE ::= TIPO_CUERPO_G 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("CUERPO_GENE",24, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_CUERPO_G ::= ESTRUCTURA_AUTO 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_CUERPO_G ::= ESTRUCTURA_VISI 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_CUERPO_G ::= ESTRUCTURA_COLT 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_CUERPO_G ::= ESTRUCTURA_OPAQ 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO_CUERPO_G ::= ESTRUCTURA_FOND 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO_CUERPO_G ::= ESTRUCTURA_BORD 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO_CUERPO_G ::= ESTRUCTURA_ALIN 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO_CUERPO_G ::= ESTRUCTURA_TEXT 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO_CUERPO_G ::= ESTRUCTURA_TAM_EL 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO_CUERPO_G ::= ESTRUCTURA_TAMT 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIPO_CUERPO_G ::= ESTRUCTURA_FORM SPYC 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TIPO_CUERPO_G ::= ESTRUCTURA_LETR 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("TIPO_CUERPO_G",25, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= OP_ARITMETICA 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT = e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("EXPRESION",2, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP_ARITMETICA ::= OP_ARITMETICA SMAS OP_ARITMETICA 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta ="OPA"; nuevo.valor="+"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT= nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP_ARITMETICA ::= OP_ARITMETICA SMEN OP_ARITMETICA 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta ="OPA"; nuevo.valor="-"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT= nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_ARITMETICA ::= OP_ARITMETICA SMUL OP_ARITMETICA 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta ="OPA"; nuevo.valor="*"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT= nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_ARITMETICA ::= OP_ARITMETICA SDIV OP_ARITMETICA 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e2 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta ="OPA"; nuevo.valor="/"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT= nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_ARITMETICA ::= Estructura_VAR 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		NCCSS e1 = (NCCSS)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		RESULT= e1;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICA",5, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Estructura_VAR ::= PCOM 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta ="string"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Estructura_VAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Estructura_VAR ::= PNUM 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta ="doble"; nuevo.valor=e1.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Estructura_VAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Estructura_VAR ::= PNUM SPUN PNUM 
            {
              NCCSS RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico_CCSS$stack.peek()).value;
		NCCSS nuevo = new NCCSS(); nuevo.etiqueta ="doble"; nuevo.valor=e1.toString()+"."+e2.toString(); RESULT = nuevo;
              CUP$Sintactico_CCSS$result = parser.getSymbolFactory().newSymbol("Estructura_VAR",6, ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.elementAt(CUP$Sintactico_CCSS$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico_CCSS$stack.peek()), RESULT);
            }
          return CUP$Sintactico_CCSS$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico_CCSS$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico_CCSS$do_action(
    int                        CUP$Sintactico_CCSS$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico_CCSS$parser,
    java.util.Stack            CUP$Sintactico_CCSS$stack,
    int                        CUP$Sintactico_CCSS$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico_CCSS$do_action_part00000000(
                               CUP$Sintactico_CCSS$act_num,
                               CUP$Sintactico_CCSS$parser,
                               CUP$Sintactico_CCSS$stack,
                               CUP$Sintactico_CCSS$top);
    }
}

}
