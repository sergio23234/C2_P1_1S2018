package Analizadores;
import java.io.FileReader;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.ArrayList;

/*codigo publico*/
parser code {:
    public static ArrayList<Nodo_error> Errores = new ArrayList<Nodo_error>();
    public static boolean errores=false;
    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right) +", Linea: "+(s.left+1)+ " no esperado");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }

 /*codig de usuario */
 String total = "";
 public ArrayList<Nodo> e = new ArrayList<Nodo>();
:}
action code {:
    public String estado="";
:}
/* terminales del lenguaje*/
terminal RDOC,PHOR,SPUN,SMAS,SMEN,SMUL,SDIV,SPOT,SMOD,SMAY,PNUM,SMEN,SIPA,SFPA,SIGU,SCOM,SPYC,SDPN,SNOT,SILL,SFLL,SOR,SAND,RSI,RSIN,RPAR,RDIM,RCAS,RCON,RFUN,ROBT,RDEF,RDET,RMEN,RRET,RIMP,RATE,RMIE,ROBS,RSEL,RSET,PCOM,PID,PFEC;
/*aqui estan los no terminales */
non terminal Start,UNO; 
non terminal NCJS ;
precedence lef terminal SMAS,SMEN,SMUL,SDIV;
precedence right terminal SPOT;        
start with Start;
Start ::= UNO;
/*----------------------------ESTRUCTURA DE CJS-------------------------*/
/*declaracion de variables*/
ESTRUCTURA_DEC_VAR ::= RDIM LISTA_VAR SPYC{::}
                    |  RDIM LISTA_VAR SDPN EXPRESION SPYC{::};
                    |  RDIM LISTA_VAR SDPN SILL LISTA_EXP SFLL SPYC{::};
/*asignacion de variable*/
ESTRUCTURA_ASIGNAR ::= LISTA_VAR SDPN EXPRESION SPYC{::};
/*Setencia Si y SINO*/
ESTRUCTURA_SI      ::= RSI SIPA OP_LOGICA SFPA SILL ESTRUCTURA_CUERPO SFLL{::}
                    |  RSI SIPA OP_LOGICA SFPA SILL ESTRUCTURA_CUERPO SFLL ESTRUCTURA_SINO{::};

ESTRUCTURA_SINO    ::= RSIN SILL ESTRUCTURA_CUERPO SFLL{::};                     
/*Setencia Selecciona*/
ESTRUCTURA_SELE    ::= RSEL SIPA EXPRESION SFPA SILL CUERPO_SELEC SFLL{::};

CUERPO_SELEC       ::=              RCAS EXPRESION SDPN ESTRUCTURA_CUERPO{::}
                    |  CUERPO_SELEC RCAS EXPRESION SDPN ESTRUCTURA_CUERPO{::}
                    |  CUERPO_SELEC RDEF           SDPN ESTRUCTURA_CUERPO{::}
                    |               RDEF           SDPN ESTRUCTURA_CUERPO{::};   
/*Setencia Para*/
ESTRUCTURA_PARA    ::= RPAR SIPA LISTA_VAR SDPN EXPRESION SPYC OP_LOGICA SPYC EXPRESION SFPA SILL ESTRUCTURA_CUERPO SFLL{::};
/*Setencia Mientras*/
ESTRUCTURA_MIEN    ::= RMIE SIPA OP_LOGICA SFPA SILL ESTRUCTURA_CUERPO SFLL{::};
/*Setencia imprmir*/
ESTRUCTURA_IMPRI   ::= RIMP SIPA EXPRESION SFPA SPYC{::};
/*Funciones*/
ESTRUCTURA_FUNCI   ::= RFUN PID SIPA LISTA_VAR SFPA SILL ESTRUCTURA_CUERPO SFLL{::};
/*Estructura Mensaje*/
ESTRUCTURA_MENS    ::= RMEN SIPA EXPRESION SFPA SPYC{::};
/*Estructuras varias*/
ESTRUCTURA_VARIAS  ::= PID SPUN RCON{::}
                    |  PID SPUN RATE{::}
                    |  RDOC SPUN ROBT SIPA EXPRESION SFPA{::}
/*Valores que pueden tomar las datos*/
A_VAR   ::=  PCOM{::}
            |PNUM{::}
            |PFEC{::}
            |PHOR{::};
/*Operaciones Aritmeticas*/
OP_ARITMETICA ::=       OP_ARITMETICA SMAS OP_ARITMETICA{::}
                    |   OP_ARITMETICA SMEN OP_ARITMETICA{::}
                    |   OP_ARITMETICA SMUL OP_ARITMETICA{::}
                    |   OP_ARITMETICA SDIV OP_ARITMETICA{::}
                    |   OP_ARITMETICA SPOT OP_ARITMETICA{::}
                    |   OP_ARITMETICA SMOD OP_ARITMETICA{::}
                    |   EXPRESION{::};
/*Operaciones de Comparacion*/
OP_COMPARACION ::=      OP_COMPARACION SIGU SIGU OP_COMPARACION{::}
                    |   OP_COMPARACION SNOT SIGU OP_COMPARACION{::}
                    |   OP_COMPARACION SMAY SIGU OP_COMPARACION{::}
                    |   OP_COMPARACION SMAY      OP_COMPARACION{::}
                    |   OP_COMPARACION SMEN SIGU OP_COMPARACION{::}
                    |   OP_COMPARACION SMEN      OP_COMPARACION{::}
                    |   OP_ARITMETICA{::};
/*Operaciones Logicas*/
OP_LOGICA   ::=                 OP_LOGICA SOR   OP_LOGICA{::}
                    |           OP_LOGICA SAND  OP_LOGICA{::}
                    |   SNOT    OP_LOGICA                {::}
                    |           OP_COMPARACION           {::};