package Analizadores;
import java.io.FileReader;
import Principal.NCJS;
import java_cup.runtime.Symbol;
import java_cup.runtime.*;
import java.util.ArrayList;

/*codigo publico*/
parser code {:
    public static ArrayList<Nodo_error> Errores = new ArrayList<Nodo_error>();
    public static boolean errores=false;
    protected int error_sync_size () {
       return 1;   
    }

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico lexema \"" + s.value+"\" en la Columna: "+(s.right) +", Linea: "+(s.left+1)+ " no esperado");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }

    
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico \"" + s.value+"\" en la Linea: "+(s.right+1) +", Columna: "+(s.left+1)+ "");
        Nodo_error nuevo = new Nodo_error();
        nuevo.dato = String.valueOf(s.value);
        nuevo.linea = (s.left+1);
        nuevo.columna=(s.right);
        Errores.add(nuevo);
        errores=true;
    }

 /*codig de usuario */
 String total = "";
 public NCJS RCJS = null;
 public ArrayList<Nodo> e = new ArrayList<Nodo>();
:}
action code {:
    public String estado="";
:}
/* terminales del lenguaje*/
terminal RDOC,PHOR,SPUN,SMAS,SMEN,SMUL,SDIV,SPOT,SMOD,SMAY,PNUM,SIPA,SFPA,SIGU,SCOM,SPYC,SDPN,SNOT,SILL,SFLL,SOR,SAND,RSI,RSIN,RPAR,RDIM,RCAS,RCON,RFUN,ROBT,RDEF,RDET,RMEN,RRET,RIMP,RATE,RMIE,ROBS,RSEL,RSET,PCOM,PID,PFEC;
/*aqui estan los no terminales */
non terminal Start,UNO; 
non terminal NCJS ESTRUCTURA_IMPRI,LISTA_VAR,LISTA_EXP,ESTRUCTURA_CUERPO,ESTRUCTURA_CUERPO_P,ESTRUCTURA_ASIGNAR,ESTRUCTURA_DEC_VAR,ESTRUCTURA_SI,ESTRUCTURA_SINO,ESTRUCTURA_SELE,CUERPO_SELEC,ESTRUCTURA_PARA,ESTRUCTURA_MIEN,ESTRUCTURA_IMPI,ESTRUCTURA_FUNCI,ESTRUCTURA_MENS,ESTRUCTURA_VARIAS,A_VAR,Estructura_VAR,OP_ARITMETICA,OP_COMPARACION,OP_LOGICA,EXPRESION;
non terminal String Tipo_COMPARACION;
precedence left  SMAS,SMEN,SMUL,SDIV,SMOD,SOR,SAND;
precedence right SPOT,SNOT;        
start with Start;
Start ::= UNO;
/*----------------------------ESTRUCTURA DE CJS-------------------------*/
UNO ::= ESTRUCTURA_CUERPO:e1    {: RCJS=e1;:};

ESTRUCTURA_CUERPO    ::= ESTRUCTURA_CUERPO:e1 ESTRUCTURA_CUERPO_P:e2    {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="cuerpo" nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                        |ESTRUCTURA_CUERPO_P:e1                         {:RESULT = e1;:};
/*posibles estructuras que vengan dentor de un CJS*/
ESTRUCTURA_CUERPO_P  ::= ESTRUCTURA_ASIGNAR:e1  {:RESULT = e1;:}
                    |   ESTRUCTURA_SI:e1        {:RESULT = e1;:}
                    |   ESTRUCTURA_SELE:e1      {:RESULT = e1;:}
                    |   ESTRUCTURA_PARA:e1      {:RESULT = e1;:}
                    |   ESTRUCTURA_MIEN:e1      {:RESULT = e1;:}
                    |   ESTRUCTURA_IMPRI:e1     {:RESULT = e1;:}
                    |   ESTRUCTURA_FUNCI:e1     {:RESULT = e1;:}
                    |   ESTRUCTURA_DEC_VAR:e1   {:RESULT = e1;:};
/*declaracion de variables*/
ESTRUCTURA_DEC_VAR ::= RDIM LISTA_VAR:e1 SPYC                               {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="variable" nuevo.hijos.add(e1); RESULT = nuevo;:}
                    |  RDIM LISTA_VAR:e1 SDPN EXPRESION:e2 SPYC             {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="variable" nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |  RDIM LISTA_VAR:e1 SDPN SILL LISTA_EXP:e2 SFLL SPYC   {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="variable" nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:};
/*asignacion de variable*/
ESTRUCTURA_ASIGNAR ::= LISTA_VAR:e1 SDPN EXPRESION:e2 SPYC{:NCJS nuevo = new NCJS(); nuevo.etiqueta ="asignar" nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:};
/*Setencia Si y SINO*/
ESTRUCTURA_SI      ::= RSI SIPA OP_LOGICA:e1 SFPA SILL ESTRUCTURA_CUERPO:e2 SFLL                    {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="si" nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |  RSI SIPA OP_LOGICA:e1 SFPA SILL ESTRUCTURA_CUERPO:e2 SFLL ESTRUCTURA_SINO:e3 {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="si" nuevo.hijos.add(e1); nuevo.hijos.add(e2); nuevo.hijos.add(e3); RESULT = nuevo;:};

ESTRUCTURA_SINO    ::= RSIN SILL ESTRUCTURA_CUERPO:e1 SFLL              {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="sino" nuevo.hijos.add(e1); RESULT = nuevo;:};                     
/*Setencia Selecciona*/
ESTRUCTURA_SELE    ::= RSEL SIPA EXPRESION:e1 SFPA SILL CUERPO_SELEC:e2 SFLL  {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="seleccion" nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:};

CUERPO_SELEC       ::=                  RCAS EXPRESION:e2 SDPN ESTRUCTURA_CUERPO:e3    {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="caso"; nuevo.hijos.add(e2); nuevo.hijos.add(e3); RESULT = nuevo;:}
                    |  CUERPO_SELEC:e1  RCAS EXPRESION:e2 SDPN ESTRUCTURA_CUERPO:e3    {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="caso"; nuevo.hijos.add(e2); nuevo.hijos.add(e3); e1.hijos.add(nuevo); RESULT = e1;:}
                    |  CUERPO_SELEC:e1  RDEF              SDPN ESTRUCTURA_CUERPO:e3    {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="default"; nuevo.hijos.add(e3); e1.hijos.add(nuevo); RESULT = e1;:}
                    |                   RDEF              SDPN ESTRUCTURA_CUERPO:e3    {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="default"; nuevo.hijos.add(e3); RESULT = nuevo;:};   
/*Setencia Para*/
ESTRUCTURA_PARA    ::= RPAR SIPA ESTRUCTURA_ASIGNAR:e1 SPYC OP_LOGICA:e2 SPYC LISTA_VAR:e3 SMAS SMAS SFPA SILL ESTRUCTURA_CUERPO:e4 SFLL{:NCJS nuevo = new NCJS(); nuevo.etiqueta ="para"; nuevo.valor="sumar"; nuevo.hijos.add(e1);  nuevo.hijos.add(e2); nuevo.hijos.add(e3); nuevo.hijos.add(e4);RESULT = nuevo;:}
                    |  RPAR SIPA ESTRUCTURA_ASIGNAR:e1 SPYC OP_LOGICA:e2 SPYC LISTA_VAR:e3 SMEN SMEN SFPA SILL ESTRUCTURA_CUERPO:e4 SFLL{:NCJS nuevo = new NCJS(); nuevo.etiqueta ="para"; nuevo.valor="restar"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); nuevo.hijos.add(e3); nuevo.hijos.add(e4);RESULT = nuevo;:};
/*Setencia Mientras*/
ESTRUCTURA_MIEN    ::= RMIE SIPA OP_LOGICA:e1 SFPA SILL ESTRUCTURA_CUERPO:e2 SFLL{:NCJS nuevo = new NCJS(); nuevo.etiqueta ="mientras"; nuevo.hijos.add(e1);nuevo.hijos.add(e2); RESULT = nuevo;:};
/*Setencia imprmir*/
ESTRUCTURA_IMPRI   ::= RIMP SIPA EXPRESION:e1 SFPA SPYC {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="imprimir"; nuevo.hijos.add(e1); RESULT = nuevo;:};
/*Funciones*/
ESTRUCTURA_FUNCI   ::= RFUN PID:e1 SIPA LISTA_VAR:e2 SFPA SILL ESTRUCTURA_CUERPO:e3 SFLL{:NCJS nuevo = new NCJS(); nuevo.etiqueta ="funcion"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:};
/*Estructura Mensaje*/
ESTRUCTURA_MENS    ::= RMEN SIPA EXPRESION:e1 SFPA SPYC{:NCJS nuevo = new NCJS(); nuevo.etiqueta ="mensaje"; nuevo.hijos.add(e1); RESULT = nuevo;:};
/*Estructuras varias*/
ESTRUCTURA_VARIAS  ::= PID SPUN RCON{::}
                    |  PID SPUN RATE{::}
                    |  RDOC SPUN ROBT SIPA EXPRESION SFPA{::};
/*Valores que pueden tomar las datos*/
A_VAR   ::=  PCOM:e1                {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="string"; nuevo.valor=e1.ToString(); RESULT = nuevo;:}
            |PNUM:e1                {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="doble"; nuevo.valor=e1.ToString(); RESULT = nuevo;:}
            |PNUM:e1 SPUN PNUM:e2   {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="doble"; nuevo.valor=e1.ToString()+"."+e2.ToString(); RESULT = nuevo;:}
            |PFEC:e1                {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="fecha";  nuevo.valor=e1.ToString(); RESULT = nuevo;:}
            |PHOR:e1                {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="hora";   nuevo.valor=e1.ToString(); RESULT = nuevo;:};
/*Variables que pueden venir*/
Estructura_VAR ::=      PID:e1      {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="ID";      nuevo.valor=e1.ToString(); RESULT = nuevo;:}
                    |   A_VAR:e1    {:RESULT = e1;:};

 EXPRESION     ::= OP_ARITMETICA:e1     {:RESULT = e1;:};                   
/*Operaciones Aritmeticas*/
OP_ARITMETICA ::=       OP_ARITMETICA:e1 SMAS OP_ARITMETICA:e2  {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="+"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |   OP_ARITMETICA:e1 SMEN OP_ARITMETICA:e2  {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="-"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |   OP_ARITMETICA:e1 SMUL OP_ARITMETICA:e2  {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="*"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |   OP_ARITMETICA:e1 SDIV OP_ARITMETICA:e2  {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="/"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |   OP_ARITMETICA:e1 SPOT OP_ARITMETICA:e2  {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="^"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |   OP_ARITMETICA:e1 SMOD OP_ARITMETICA:e2  {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPA"; nuevo.valor="%"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |   Estructura_VAR:e1                       {:RESULT = e1;:};
/*Operaciones de Comparacion*/
OP_COMPARACION ::=      OP_ARITMETICA:e1 Tipo_COMPARACION:e3 OP_ARITMETICA:e2   {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPC"; nuevo.valor=e3; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |   OP_ARITMETICA:e1                                        {:RESULT = e1;:};

Tipo_COMPARACION ::=    SIGU SIGU {:RESULT ="==";:}
                    |   SNOT SIGU {:RESULT ="!=";:}
                    |   SMAY SIGU {:RESULT =">=";:}
                    |   SMEN SIGU {:RESULT ="<=";:}
                    |   SMAY      {:RESULT =">";:}
                    |   SMEN      {:RESULT ="<";:};                    
/*Operaciones Logicas*/
OP_LOGICA   ::=                 OP_LOGICA:e1 SOR   OP_LOGICA:e2 {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPL"; nuevo.valor="OR";  nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |           OP_LOGICA:e1 SAND  OP_LOGICA:e2 {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPL"; nuevo.valor="AND"; nuevo.hijos.add(e1); nuevo.hijos.add(e2); RESULT = nuevo;:}
                    |   SNOT    OP_LOGICA:e1                    {:NCJS nuevo = new NCJS(); nuevo.etiqueta ="OPL"; nuevo.valor="NOT"; nuevo.hijos.add(e1);                       RESULT = nuevo;:}
                    |           OP_COMPARACION:e1               {:RESULT = e1;:};