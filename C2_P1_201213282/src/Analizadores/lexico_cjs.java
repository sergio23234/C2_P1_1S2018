/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
import java_cup.runtime.*;
import java.io.Reader;
//esto ya es un cambio

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico_CJS</tt>
 */
public class lexico_cjs implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\56\1\2\1\2\1\57\1\2\1\2\16\56\4\0\1\2\1\40"+
    "\1\54\1\0\1\55\1\27\1\44\1\1\1\32\1\33\1\25\1\23"+
    "\1\35\1\24\1\22\1\3\12\53\1\37\1\36\1\31\1\34\1\30"+
    "\2\0\1\12\1\50\1\4\1\45\1\7\1\47\2\55\1\14\1\51"+
    "\1\55\1\17\1\6\1\10\1\5\1\20\1\55\1\13\1\21\1\11"+
    "\1\16\1\46\1\55\1\52\2\55\3\0\1\26\1\15\1\0\1\12"+
    "\1\50\1\4\1\45\1\7\1\47\2\55\1\14\1\51\1\55\1\17"+
    "\1\6\1\10\1\5\1\20\1\55\1\13\1\21\1\11\1\16\1\46"+
    "\1\55\1\52\2\55\1\41\1\43\1\42\1\0\6\56\1\60\32\56"+
    "\2\0\4\55\4\0\1\55\2\0\1\56\7\0\1\55\4\0\1\55"+
    "\5\0\27\55\1\0\37\55\1\0\70\55\2\14\115\55\1\21\u0142\55"+
    "\4\0\14\55\16\0\5\55\7\0\1\55\1\0\1\55\21\0\160\56"+
    "\5\55\1\0\2\55\2\0\4\55\10\0\1\55\1\0\3\55\1\0"+
    "\1\55\1\0\24\55\1\0\123\55\1\0\213\55\1\0\5\56\2\0"+
    "\236\55\11\0\46\55\2\0\1\55\7\0\47\55\7\0\1\55\1\0"+
    "\55\56\1\0\1\56\1\0\2\56\1\0\2\56\1\0\1\56\10\0"+
    "\33\55\5\0\3\55\15\0\5\56\6\0\1\55\4\0\13\56\5\0"+
    "\53\55\37\56\4\0\2\55\1\56\143\55\1\0\1\55\10\56\1\0"+
    "\6\56\2\55\2\56\1\0\4\56\2\55\12\56\3\55\2\0\1\55"+
    "\17\0\1\56\1\55\1\56\36\55\33\56\2\0\131\55\13\56\1\55"+
    "\16\0\12\56\41\55\11\56\2\55\4\0\1\55\5\0\26\55\4\56"+
    "\1\55\11\56\1\55\3\56\1\55\5\56\22\0\31\55\3\56\104\0"+
    "\1\55\1\0\13\55\67\0\33\56\1\0\4\56\66\55\3\56\1\55"+
    "\22\56\1\55\7\56\12\55\2\56\2\0\12\56\1\0\7\55\1\0"+
    "\7\55\1\0\3\56\1\0\10\55\2\0\2\55\2\0\26\55\1\0"+
    "\7\55\1\0\1\55\3\0\4\55\2\0\1\56\1\55\7\56\2\0"+
    "\2\56\2\0\3\56\1\55\10\0\1\56\4\0\2\55\1\0\3\55"+
    "\2\56\2\0\12\56\4\55\7\0\1\55\5\0\3\56\1\0\6\55"+
    "\4\0\2\55\2\0\26\55\1\0\7\55\1\0\2\55\1\0\2\55"+
    "\1\0\2\55\2\0\1\56\1\0\5\56\4\0\2\56\2\0\3\56"+
    "\3\0\1\56\7\0\4\55\1\0\1\55\7\0\14\56\3\55\1\56"+
    "\13\0\3\56\1\0\11\55\1\0\3\55\1\0\26\55\1\0\7\55"+
    "\1\0\2\55\1\0\5\55\2\0\1\56\1\55\10\56\1\0\3\56"+
    "\1\0\3\56\2\0\1\55\17\0\2\55\2\56\2\0\12\56\1\0"+
    "\1\55\17\0\3\56\1\0\10\55\2\0\2\55\2\0\26\55\1\0"+
    "\7\55\1\0\2\55\1\0\5\55\2\0\1\56\1\55\7\56\2\0"+
    "\2\56\2\0\3\56\10\0\2\56\4\0\2\55\1\0\3\55\2\56"+
    "\2\0\12\56\1\0\1\55\20\0\1\56\1\55\1\0\6\55\3\0"+
    "\3\55\1\0\4\55\3\0\2\55\1\0\1\55\1\0\2\55\3\0"+
    "\2\55\3\0\3\55\3\0\14\55\4\0\5\56\3\0\3\56\1\0"+
    "\4\56\2\0\1\55\6\0\1\56\16\0\12\56\11\0\1\55\7\0"+
    "\3\56\1\0\10\55\1\0\3\55\1\0\27\55\1\0\12\55\1\0"+
    "\5\55\3\0\1\55\7\56\1\0\3\56\1\0\4\56\7\0\2\56"+
    "\1\0\2\55\6\0\2\55\2\56\2\0\12\56\22\0\2\56\1\0"+
    "\10\55\1\0\3\55\1\0\27\55\1\0\12\55\1\0\5\55\2\0"+
    "\1\56\1\55\7\56\1\0\3\56\1\0\4\56\7\0\2\56\7\0"+
    "\1\55\1\0\2\55\2\56\2\0\12\56\1\0\2\55\17\0\2\56"+
    "\1\0\10\55\1\0\3\55\1\0\51\55\2\0\1\55\7\56\1\0"+
    "\3\56\1\0\4\56\1\55\10\0\1\56\10\0\2\55\2\56\2\0"+
    "\12\56\12\0\6\55\2\0\2\56\1\0\22\55\3\0\30\55\1\0"+
    "\11\55\1\0\1\55\2\0\7\55\3\0\1\56\4\0\6\56\1\0"+
    "\1\56\1\0\10\56\22\0\2\56\15\0\60\55\1\56\2\55\7\56"+
    "\4\0\10\55\10\56\1\0\12\56\47\0\2\55\1\0\1\55\2\0"+
    "\2\55\1\0\1\55\2\0\1\55\6\0\4\55\1\0\7\55\1\0"+
    "\3\55\1\0\1\55\1\0\1\55\2\0\2\55\1\0\4\55\1\56"+
    "\2\55\6\56\1\0\2\56\1\55\2\0\5\55\1\0\1\55\1\0"+
    "\6\56\2\0\12\56\2\0\4\55\40\0\1\55\27\0\2\56\6\0"+
    "\12\56\13\0\1\56\1\0\1\56\1\0\1\56\4\0\2\56\10\55"+
    "\1\0\44\55\4\0\24\56\1\0\2\56\5\55\13\56\1\0\44\56"+
    "\11\0\1\56\71\0\53\55\24\56\1\55\12\56\6\0\6\55\4\56"+
    "\4\55\3\56\1\55\3\56\2\55\7\56\3\55\4\56\15\55\14\56"+
    "\1\55\17\56\2\0\46\55\1\0\1\55\5\0\1\55\2\0\53\55"+
    "\1\0\u014d\55\1\0\4\55\2\0\7\55\1\0\1\55\1\0\4\55"+
    "\2\0\51\55\1\0\4\55\2\0\41\55\1\0\4\55\2\0\7\55"+
    "\1\0\1\55\1\0\4\55\2\0\17\55\1\0\71\55\1\0\4\55"+
    "\2\0\103\55\2\0\3\56\40\0\20\55\20\0\125\55\14\0\u026c\55"+
    "\2\0\21\55\1\0\32\55\5\0\113\55\3\0\3\55\17\0\15\55"+
    "\1\0\4\55\3\56\13\0\22\55\3\56\13\0\22\55\2\56\14\0"+
    "\15\55\1\0\3\55\1\0\2\56\14\0\64\55\40\56\3\0\1\55"+
    "\3\0\2\55\1\56\2\0\12\56\41\0\3\56\2\0\12\56\6\0"+
    "\130\55\10\0\51\55\1\56\1\55\5\0\106\55\12\0\35\55\3\0"+
    "\14\56\4\0\14\56\12\0\12\56\36\55\2\0\5\55\13\0\54\55"+
    "\4\0\21\56\7\55\2\56\6\0\12\56\46\0\27\55\5\56\4\0"+
    "\65\55\12\56\1\0\35\56\2\0\13\56\6\0\12\56\15\0\1\55"+
    "\130\0\5\56\57\55\21\56\7\55\4\0\12\56\21\0\11\56\14\0"+
    "\3\56\36\55\15\56\2\55\12\56\54\55\16\56\14\0\44\55\24\56"+
    "\10\0\12\56\3\0\3\55\12\56\44\55\122\0\3\56\1\0\25\56"+
    "\4\55\1\56\4\55\3\56\2\55\11\0\300\55\47\56\25\0\4\56"+
    "\u0116\55\2\0\6\55\2\0\46\55\2\0\6\55\2\0\10\55\1\0"+
    "\1\55\1\0\1\55\1\0\1\55\1\0\37\55\2\0\65\55\1\0"+
    "\7\55\1\0\1\55\3\0\3\55\1\0\7\55\3\0\4\55\2\0"+
    "\6\55\4\0\15\55\5\0\3\55\1\0\7\55\16\0\5\56\30\0"+
    "\1\57\1\57\5\56\20\0\2\55\23\0\1\55\13\0\5\56\5\0"+
    "\6\56\1\0\1\55\15\0\1\55\20\0\15\55\3\0\33\55\25\0"+
    "\15\56\4\0\1\56\3\0\14\56\21\0\1\55\4\0\1\55\2\0"+
    "\12\55\1\0\1\55\3\0\5\55\6\0\1\55\1\0\1\55\1\0"+
    "\1\55\1\0\4\55\1\0\13\55\2\0\4\55\5\0\5\55\4\0"+
    "\1\55\21\0\51\55\u0a77\0\57\55\1\0\57\55\1\0\205\55\6\0"+
    "\4\55\3\56\2\55\14\0\46\55\1\0\1\55\5\0\1\55\2\0"+
    "\70\55\7\0\1\55\17\0\1\56\27\55\11\0\7\55\1\0\7\55"+
    "\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55\1\0\7\55"+
    "\1\0\7\55\1\0\40\56\57\0\1\55\u01d5\0\3\55\31\0\11\55"+
    "\6\56\1\0\5\55\2\0\5\55\4\0\126\55\2\0\2\56\2\0"+
    "\3\55\1\0\132\55\1\0\4\55\5\0\51\55\3\0\136\55\21\0"+
    "\33\55\65\0\20\55\u0200\0\u19b6\55\112\0\u51cd\55\63\0\u048d\55\103\0"+
    "\56\55\2\0\u010d\55\3\0\20\55\12\56\2\55\24\0\57\55\1\56"+
    "\4\0\12\56\1\0\31\55\7\0\1\56\120\55\2\56\45\0\11\55"+
    "\2\0\147\55\2\0\4\55\1\0\4\55\14\0\13\55\115\0\12\55"+
    "\1\56\3\55\1\56\4\55\1\56\27\55\5\56\20\0\1\55\7\0"+
    "\64\55\14\0\2\56\62\55\21\56\13\0\12\56\6\0\22\56\6\55"+
    "\3\0\1\55\4\0\12\56\34\55\10\56\2\0\27\55\15\56\14\0"+
    "\35\55\3\0\4\56\57\55\16\56\16\0\1\55\12\56\46\0\51\55"+
    "\16\56\11\0\3\55\1\56\10\55\2\56\2\0\12\56\6\0\27\55"+
    "\3\0\1\55\1\56\4\0\60\55\1\56\1\55\3\56\2\55\2\56"+
    "\5\55\2\56\1\55\1\56\1\55\30\0\3\55\2\0\13\55\5\56"+
    "\2\0\3\55\2\56\12\0\6\55\2\0\6\55\2\0\6\55\11\0"+
    "\7\55\1\0\7\55\221\0\43\55\10\56\1\0\2\56\2\0\12\56"+
    "\6\0\u2ba4\55\14\0\27\55\4\0\61\55\u2104\0\u016e\55\2\0\152\55"+
    "\46\0\7\55\14\0\5\55\5\0\1\55\1\56\12\55\1\0\15\55"+
    "\1\0\5\55\1\0\1\55\1\0\2\55\1\0\2\55\1\0\154\55"+
    "\41\0\u016b\55\22\0\100\55\2\0\66\55\50\0\15\55\3\0\20\56"+
    "\20\0\7\56\14\0\2\55\30\0\3\55\31\0\1\55\6\0\5\55"+
    "\1\0\207\55\2\0\1\56\4\0\1\55\13\0\12\56\7\0\32\55"+
    "\4\0\1\55\1\0\32\55\13\0\131\55\3\0\6\55\2\0\6\55"+
    "\2\0\6\55\2\0\3\55\3\0\2\55\3\0\2\55\22\0\3\56"+
    "\4\0\14\55\1\0\32\55\1\0\23\55\1\0\2\55\1\0\17\55"+
    "\2\0\16\55\42\0\173\55\105\0\65\55\210\0\1\56\202\0\35\55"+
    "\3\0\61\55\57\0\37\55\21\0\33\55\65\0\36\55\2\0\44\55"+
    "\4\0\10\55\1\0\5\55\52\0\236\55\2\0\12\56\u0356\0\6\55"+
    "\2\0\1\55\1\0\54\55\1\0\2\55\3\0\1\55\2\0\27\55"+
    "\252\0\26\55\12\0\32\55\106\0\70\55\6\0\2\55\100\0\1\55"+
    "\3\56\1\0\2\56\5\0\4\56\4\55\1\0\3\55\1\0\33\55"+
    "\4\0\3\56\4\0\1\56\40\0\35\55\203\0\66\55\12\0\26\55"+
    "\12\0\23\55\215\0\111\55\u03b7\0\3\56\65\55\17\56\37\0\12\56"+
    "\20\0\3\56\55\55\13\56\2\0\1\56\22\0\31\55\7\0\12\56"+
    "\6\0\3\56\44\55\16\56\1\0\12\56\100\0\3\56\60\55\16\56"+
    "\4\55\13\0\12\56\u04a6\0\53\55\15\56\10\0\12\56\u0936\0\u036f\55"+
    "\221\0\143\55\u0b9d\0\u042f\55\u33d1\0\u0239\55\u04c7\0\105\55\13\0\1\55"+
    "\56\56\20\0\4\56\15\55\u4060\0\2\55\u2163\0\5\56\3\0\26\56"+
    "\2\0\7\56\36\0\4\56\224\0\3\56\u01bb\0\125\55\1\0\107\55"+
    "\1\0\2\55\2\0\1\55\2\0\2\55\2\0\4\55\1\0\14\55"+
    "\1\0\1\55\1\0\7\55\1\0\101\55\1\0\4\55\2\0\10\55"+
    "\1\0\7\55\1\0\34\55\1\0\4\55\1\0\5\55\1\0\1\55"+
    "\3\0\7\55\1\0\u0154\55\2\0\31\55\1\0\31\55\1\0\37\55"+
    "\1\0\31\55\1\0\37\55\1\0\31\55\1\0\37\55\1\0\31\55"+
    "\1\0\37\55\1\0\31\55\1\0\10\55\2\0\62\56\u1600\0\4\55"+
    "\1\0\33\55\1\0\2\55\1\0\1\55\2\0\1\55\1\0\12\55"+
    "\1\0\4\55\1\0\1\55\1\0\1\55\6\0\1\55\4\0\1\55"+
    "\1\0\1\55\1\0\1\55\1\0\3\55\1\0\2\55\1\0\1\55"+
    "\2\0\1\55\1\0\1\55\1\0\1\55\1\0\1\55\1\0\1\55"+
    "\1\0\2\55\1\0\1\55\2\0\4\55\1\0\7\55\1\0\4\55"+
    "\1\0\4\55\1\0\1\55\1\0\12\55\1\0\21\55\5\0\3\55"+
    "\1\0\5\55\1\0\21\55\u1144\0\ua6d7\55\51\0\u1035\55\13\0\336\55"+
    "\u3fe2\0\u021e\55\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\56\36\0\140\56\200\0\360\56\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\11\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\10\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\3"+
    "\1\1\2\5\1\26\1\1\1\0\12\5\1\27\1\30"+
    "\4\5\2\0\23\5\1\31\1\0\2\5\1\32\7\5"+
    "\1\33\2\5\1\34\3\5\1\35\1\5\1\0\17\5"+
    "\1\0\1\5\1\36\15\5\1\37\1\5\1\40\1\5"+
    "\1\41\1\5\1\0\5\5\1\42\1\43\1\44\2\5"+
    "\1\45\1\46\1\47\1\50\7\5\1\51\1\5\1\52"+
    "\1\5\1\53\1\5\1\54\11\5\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\61\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\61\0\u027d"+
    "\0\u027d\0\61\0\61\0\61\0\61\0\61\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\61\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u027d\0\u0372\0\u03a3\0\u03d4\0\u0405"+
    "\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d"+
    "\0\u05be\0\61\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c"+
    "\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4"+
    "\0\u0a25\0\u0a56\0\u0a87\0\61\0\u0ab8\0\u0ae9\0\u0b1a\0\u0157"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0157"+
    "\0\u0ca2\0\u0cd3\0\u0157\0\u0d04\0\u0d35\0\u0d66\0\u0157\0\u0d97"+
    "\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7"+
    "\0\u10d8\0\u1109\0\u0157\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\61\0\u13b7\0\u0157\0\u13e8\0\u0157\0\u1419\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u0157\0\u0157\0\u0157\0\u1570"+
    "\0\u15a1\0\u0157\0\61\0\u0157\0\u0157\0\u15d2\0\u1603\0\u1634"+
    "\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u0157\0\u1729\0\u0157\0\u175a"+
    "\0\u0157\0\u178b\0\u0157\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880"+
    "\0\u18b1\0\u18e2\0\u1913\0\u1944\0\u0157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\11"+
    "\1\12\1\13\1\14\3\11\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\11\1\43\3\11\1\44\1\45\1\11"+
    "\1\2\136\0\1\46\7\0\1\4\40\0\1\4\21\0"+
    "\1\11\1\47\4\11\1\50\7\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\16\11\2\0"+
    "\1\11\20\0\3\11\1\51\3\11\1\0\2\11\1\0"+
    "\1\11\4\0\3\11\1\52\4\11\1\53\5\11\2\0"+
    "\1\11\20\0\7\11\1\0\2\11\1\0\1\11\4\0"+
    "\16\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\5\11\1\54\10\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\3\11\1\55"+
    "\12\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\2\11\1\56\13\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\6\11\1\57"+
    "\7\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\3\11\1\60\4\11\1\61\5\11\2\0"+
    "\1\11\20\0\7\11\1\0\2\11\1\0\1\11\53\0"+
    "\1\44\7\0\1\4\40\0\1\4\7\0\1\44\51\0"+
    "\1\62\20\0\1\11\1\63\1\11\1\64\4\11\1\65"+
    "\5\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\12\11\1\66\3\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\61\67\3\0\1\70"+
    "\47\0\1\46\11\0\2\11\1\71\1\11\1\72\11\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\15\11\1\73\2\0\1\11\20\0\7\11\1\0"+
    "\2\11\1\0\1\11\4\0\5\11\1\74\7\11\1\75"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\4\11\1\76\11\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\3\11\1\77\12\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\3\11\1\100\12\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\5\11\1\101\10\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\14\11\1\102\1\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\7\11\1\103\6\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\5\11\1\104\5\11\1\105\2\11\2\0\1\11"+
    "\20\0\7\11\1\0\2\11\1\0\1\11\4\0\4\11"+
    "\1\106\11\11\2\0\1\11\20\0\7\11\1\0\2\11"+
    "\1\0\1\11\4\0\1\107\15\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\5\11\1\110"+
    "\10\11\2\0\1\11\20\0\2\11\1\111\4\11\1\0"+
    "\2\11\1\0\1\11\4\0\2\11\1\112\13\11\2\0"+
    "\1\11\20\0\7\11\1\0\2\11\1\0\1\11\4\0"+
    "\4\11\1\113\11\11\2\0\1\11\20\0\7\11\1\0"+
    "\2\11\1\0\1\11\54\0\1\114\57\0\1\115\11\0"+
    "\3\11\1\116\12\11\2\0\1\11\20\0\7\11\1\0"+
    "\2\11\1\0\1\11\4\0\5\11\1\117\10\11\2\0"+
    "\1\11\20\0\7\11\1\0\2\11\1\0\1\11\4\0"+
    "\1\11\1\120\14\11\2\0\1\11\20\0\7\11\1\0"+
    "\2\11\1\0\1\11\4\0\3\11\1\121\12\11\2\0"+
    "\1\11\20\0\7\11\1\0\2\11\1\0\1\11\4\0"+
    "\3\11\1\122\12\11\2\0\1\11\20\0\7\11\1\0"+
    "\2\11\1\0\1\11\4\0\15\11\1\123\2\0\1\11"+
    "\20\0\7\11\1\0\2\11\1\0\1\11\4\0\4\11"+
    "\1\124\11\11\2\0\1\11\20\0\7\11\1\0\2\11"+
    "\1\0\1\11\4\0\16\11\2\0\1\11\20\0\5\11"+
    "\1\125\1\11\1\0\2\11\1\0\1\11\4\0\1\11"+
    "\1\126\14\11\2\0\1\11\20\0\7\11\1\0\2\11"+
    "\1\0\1\11\4\0\7\11\1\127\6\11\2\0\1\11"+
    "\20\0\7\11\1\0\2\11\1\0\1\11\4\0\6\11"+
    "\1\130\7\11\2\0\1\11\20\0\7\11\1\0\2\11"+
    "\1\0\1\11\4\0\3\11\1\131\12\11\2\0\1\11"+
    "\20\0\7\11\1\0\2\11\1\0\1\11\4\0\3\11"+
    "\1\132\12\11\2\0\1\11\20\0\7\11\1\0\2\11"+
    "\1\0\1\11\4\0\1\11\1\133\14\11\2\0\1\11"+
    "\20\0\7\11\1\0\2\11\1\0\1\11\4\0\12\11"+
    "\1\134\3\11\2\0\1\11\20\0\7\11\1\0\2\11"+
    "\1\0\1\11\4\0\3\11\1\135\12\11\2\0\1\11"+
    "\20\0\7\11\1\0\2\11\1\0\1\11\4\0\3\11"+
    "\1\136\12\11\2\0\1\11\20\0\7\11\1\0\2\11"+
    "\1\0\1\11\4\0\16\11\2\0\1\11\20\0\1\11"+
    "\1\137\5\11\1\0\2\11\1\0\1\11\4\0\1\140"+
    "\15\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\3\0\1\141\47\0\1\115\11\0\4\11\1\142"+
    "\11\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\3\11\1\143\12\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\4\11\1\144"+
    "\11\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\7\11\1\145\6\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\6\11\1\146"+
    "\7\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\5\11\1\147\10\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\5\11\1\150"+
    "\10\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\7\11\1\151\6\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\10\11\1\152"+
    "\5\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\13\11\1\153\2\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\1\154\15\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\2\11\1\155\13\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\4\11\1\156\11\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\1\157\15\11\2\0\1\11\20\0\7\11\1\0"+
    "\2\11\1\0\1\11\4\0\10\11\1\160\5\11\2\0"+
    "\1\11\20\0\7\11\1\0\2\11\1\0\1\11\53\0"+
    "\1\161\11\0\5\11\1\162\10\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\1\11\1\163"+
    "\14\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\3\11\1\164\12\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\16\11\2\0"+
    "\1\11\20\0\1\11\1\165\5\11\1\0\2\11\1\0"+
    "\1\11\4\0\16\11\2\0\1\11\20\0\4\11\1\166"+
    "\2\11\1\0\2\11\1\0\1\11\4\0\7\11\1\167"+
    "\6\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\1\11\1\170\14\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\4\11\1\171"+
    "\11\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\2\11\1\172\13\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\3\11\1\173"+
    "\12\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\1\174\15\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\3\11\1\175\12\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\3\11\1\176\12\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\5\11\1\177\10\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\1\11\1\200\14\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\1\0\1\201\51\0\1\161"+
    "\11\0\6\11\1\202\7\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\7\11\1\203\6\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\6\11\1\204\7\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\3\11\1\205\12\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\6\11\1\206\7\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\16\11\2\0\1\11"+
    "\5\0\1\207\12\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\6\11\1\210\7\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\10\11\1\211\5\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\2\11\1\212\13\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\10\11\1\213\5\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\4\11\1\214\11\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\7\11\1\215\6\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\1\11\1\216\14\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\4\11\1\217\11\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\7\11\1\220\6\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\16\11\2\0\1\11"+
    "\20\0\1\221\6\11\1\0\2\11\1\0\1\11\4\0"+
    "\15\11\1\222\2\0\1\11\20\0\7\11\1\0\2\11"+
    "\1\0\1\11\33\0\1\223\31\0\7\11\1\224\6\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\7\11\1\225\6\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\3\11\1\226\12\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\1\11\1\227\14\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\5\11\1\230\10\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\10\11\1\231\5\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\1\11\1\232\14\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\4\11\1\233\11\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\4\11\1\234\11\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\1\11\1\235\14\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\1\11\1\236\14\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\7\11\1\237\6\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\5\11\1\240\10\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\6\11\1\241\7\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\11\11\1\242\4\11"+
    "\2\0\1\11\20\0\7\11\1\0\2\11\1\0\1\11"+
    "\4\0\1\11\1\243\14\11\2\0\1\11\20\0\7\11"+
    "\1\0\2\11\1\0\1\11\4\0\2\11\1\244\12\11"+
    "\1\245\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\12\11\1\246\3\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\10\11\1\247"+
    "\5\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\13\11\1\250\2\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\2\11\1\251"+
    "\13\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\5\11\1\252\10\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\14\11\1\253"+
    "\1\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\10\11\1\251\5\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11\4\0\13\11\1\254"+
    "\2\11\2\0\1\11\20\0\7\11\1\0\2\11\1\0"+
    "\1\11\4\0\3\11\1\255\12\11\2\0\1\11\20\0"+
    "\7\11\1\0\2\11\1\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6517];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\11\1\1\11\2\1\16\11"+
    "\6\1\1\0\13\1\1\11\4\1\2\0\23\1\1\11"+
    "\1\0\23\1\1\0\17\1\1\0\17\1\1\11\5\1"+
    "\1\0\13\1\1\11\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
    private Symbol Symbol(int type){
        return new Symbol(type ,yyline, yycolumn);
    }
    private Symbol Symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    public static void errorLexico(String error,int x, int y ){
       errores+="error lexico \""+error+"\" en linea: "+Integer.toString(y)+" colulmna: "+Integer.toString(x)+"\n";
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_cjs(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2904) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter Invalido: "+yytext()+" Linea: "+ (int)(yyline+1)+" columa:"+(int)yycolumn+";");
            }
          case 45: break;
          case 2: 
            { return new Symbol(symj.PHOR,yyline, yycolumn,yytext());
            }
          case 46: break;
          case 3: 
            { /*Ignore*/
            }
          case 47: break;
          case 4: 
            { return new Symbol(symj.SDIV,yyline,yycolumn);
            }
          case 48: break;
          case 5: 
            { System.out.print("ID"); return new Symbol(symj.PID,yyline, yycolumn,yytext());
            }
          case 49: break;
          case 6: 
            { return new Symbol(symj.SPUN,yyline,yycolumn);
            }
          case 50: break;
          case 7: 
            { return new Symbol(symj.SMAS,yyline,yycolumn);
            }
          case 51: break;
          case 8: 
            { return new Symbol(symj.SMEN,yyline,yycolumn);
            }
          case 52: break;
          case 9: 
            { return new Symbol(symj.SMUL,yyline,yycolumn);
            }
          case 53: break;
          case 10: 
            { return new Symbol(symj.SPOT,yyline,yycolumn);
            }
          case 54: break;
          case 11: 
            { return new Symbol(symj.SMOD,yyline,yycolumn);
            }
          case 55: break;
          case 12: 
            { return new Symbol(symj.SMAY,yyline,yycolumn);
            }
          case 56: break;
          case 13: 
            { return new Symbol(symj.SIPA,yyline,yycolumn);
            }
          case 57: break;
          case 14: 
            { return new Symbol(symj.SFPA,yyline,yycolumn);
            }
          case 58: break;
          case 15: 
            { return new Symbol(symj.SIGU,yyline,yycolumn);
            }
          case 59: break;
          case 16: 
            { return new Symbol(symj.SCOM,yyline,yycolumn);
            }
          case 60: break;
          case 17: 
            { return new Symbol(symj.SPYC,yyline,yycolumn);
            }
          case 61: break;
          case 18: 
            { return new Symbol(symj.SDPN,yyline,yycolumn);
            }
          case 62: break;
          case 19: 
            { return new Symbol(symj.SNOT,yyline,yycolumn);
            }
          case 63: break;
          case 20: 
            { return new Symbol(symj.SILL,yyline,yycolumn);
            }
          case 64: break;
          case 21: 
            { return new Symbol(symj.SFLL,yyline,yycolumn);
            }
          case 65: break;
          case 22: 
            { return new Symbol(symj.PNUM,yyline,yycolumn);
            }
          case 66: break;
          case 23: 
            { System.out.print("Si");return new Symbol(symj.RSI,yyline,yycolumn);
            }
          case 67: break;
          case 24: 
            { return new Symbol(symj.SAND,yyline,yycolumn);
            }
          case 68: break;
          case 25: 
            { return new Symbol(symj.PCOM,yyline,yycolumn,yytext());
            }
          case 69: break;
          case 26: 
            { return new Symbol(symj.RCAS,yyline,yycolumn);
            }
          case 70: break;
          case 27: 
            { return new Symbol(symj.RPAR,yyline,yycolumn);
            }
          case 71: break;
          case 28: 
            { return new Symbol(symj.RSIN,yyline,yycolumn);
            }
          case 72: break;
          case 29: 
            { return new Symbol(symj.RDIM,yyline,yycolumn);
            }
          case 73: break;
          case 30: 
            { return new Symbol(symj.RCON,yyline,yycolumn);
            }
          case 74: break;
          case 31: 
            { return new Symbol(symj.PFEC,yyline, yycolumn,yytext());
            }
          case 75: break;
          case 32: 
            { return new Symbol(symj.ROBT,yyline,yycolumn);
            }
          case 76: break;
          case 33: 
            { return new Symbol(symj.RMEN,yyline,yycolumn);
            }
          case 77: break;
          case 34: 
            { return new Symbol(symj.RDET,yyline,yycolumn);
            }
          case 78: break;
          case 35: 
            { return new Symbol(symj.RDEF,yyline,yycolumn);
            }
          case 79: break;
          case 36: 
            { return new Symbol(symj.RFUN,yyline,yycolumn);
            }
          case 80: break;
          case 37: 
            { return new Symbol(symj.RMIE,yyline,yycolumn);
            }
          case 81: break;
          case 38: 
            { return new Symbol(symj.RATE,yyline,yycolumn);
            }
          case 82: break;
          case 39: 
            { return new Symbol(symj.RRET,yyline,yycolumn);
            }
          case 83: break;
          case 40: 
            { return new Symbol(symj.RIMP,yyline,yycolumn);
            }
          case 84: break;
          case 41: 
            { return new Symbol(symj.RDOC,yyline,yycolumn);
            }
          case 85: break;
          case 42: 
            { return new Symbol(symj.ROBS,yyline,yycolumn);
            }
          case 86: break;
          case 43: 
            { return new Symbol(symj.RSEL,yyline,yycolumn);
            }
          case 87: break;
          case 44: 
            { return new Symbol(symj.RSET,yyline,yycolumn);
            }
          case 88: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
