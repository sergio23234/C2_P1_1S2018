/* The following code was generated by JFlex 1.6.1 */

package Analizadores;
//import static Analizadores.Tokens.*;
import java_cup.runtime.*;
import java.io.Reader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexico_CHTML</tt>
 */
public class lexico_chtml implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int YYCABEZA = 2;
  public static final int YYCUERPO = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\47\1\1\1\30\1\31\1\30\1\30\16\47\4\0\1\1\1\0"+
    "\1\2\1\0\1\37\7\0\1\41\1\16\1\40\1\5\12\47\1\0"+
    "\1\36\1\3\1\35\1\4\2\0\1\20\1\21\1\6\1\23\1\17"+
    "\1\13\1\43\1\7\1\14\1\33\1\46\1\12\1\11\1\15\1\24"+
    "\1\27\1\37\1\26\1\34\1\10\1\25\1\45\1\37\1\42\1\37"+
    "\1\22\4\0\1\44\1\0\1\20\1\21\1\6\1\23\1\17\1\13"+
    "\1\43\1\7\1\14\1\33\1\46\1\12\1\11\1\15\1\24\1\27"+
    "\1\37\1\26\1\34\1\10\1\25\1\45\1\37\1\42\1\37\1\22"+
    "\1\0\1\1\2\0\6\47\1\32\32\47\2\0\4\37\4\0\1\37"+
    "\2\0\1\47\7\0\1\37\4\0\1\37\5\0\27\37\1\0\37\37"+
    "\1\0\70\37\2\14\115\37\1\34\u0142\37\4\0\14\37\16\0\5\37"+
    "\7\0\1\37\1\0\1\37\21\0\160\47\5\37\1\0\2\37\2\0"+
    "\4\37\10\0\1\37\1\0\3\37\1\0\1\37\1\0\24\37\1\0"+
    "\123\37\1\0\213\37\1\0\5\47\2\0\236\37\11\0\46\37\2\0"+
    "\1\37\7\0\47\37\7\0\1\37\1\0\55\47\1\0\1\47\1\0"+
    "\2\47\1\0\2\47\1\0\1\47\10\0\33\37\5\0\3\37\15\0"+
    "\5\47\6\0\1\37\4\0\13\47\5\0\53\37\37\47\4\0\2\37"+
    "\1\47\143\37\1\0\1\37\10\47\1\0\6\47\2\37\2\47\1\0"+
    "\4\47\2\37\12\47\3\37\2\0\1\37\17\0\1\47\1\37\1\47"+
    "\36\37\33\47\2\0\131\37\13\47\1\37\16\0\12\47\41\37\11\47"+
    "\2\37\4\0\1\37\5\0\26\37\4\47\1\37\11\47\1\37\3\47"+
    "\1\37\5\47\22\0\31\37\3\47\104\0\1\37\1\0\13\37\67\0"+
    "\33\47\1\0\4\47\66\37\3\47\1\37\22\47\1\37\7\47\12\37"+
    "\2\47\2\0\12\47\1\0\7\37\1\0\7\37\1\0\3\47\1\0"+
    "\10\37\2\0\2\37\2\0\26\37\1\0\7\37\1\0\1\37\3\0"+
    "\4\37\2\0\1\47\1\37\7\47\2\0\2\47\2\0\3\47\1\37"+
    "\10\0\1\47\4\0\2\37\1\0\3\37\2\47\2\0\12\47\4\37"+
    "\7\0\1\37\5\0\3\47\1\0\6\37\4\0\2\37\2\0\26\37"+
    "\1\0\7\37\1\0\2\37\1\0\2\37\1\0\2\37\2\0\1\47"+
    "\1\0\5\47\4\0\2\47\2\0\3\47\3\0\1\47\7\0\4\37"+
    "\1\0\1\37\7\0\14\47\3\37\1\47\13\0\3\47\1\0\11\37"+
    "\1\0\3\37\1\0\26\37\1\0\7\37\1\0\2\37\1\0\5\37"+
    "\2\0\1\47\1\37\10\47\1\0\3\47\1\0\3\47\2\0\1\37"+
    "\17\0\2\37\2\47\2\0\12\47\1\0\1\37\17\0\3\47\1\0"+
    "\10\37\2\0\2\37\2\0\26\37\1\0\7\37\1\0\2\37\1\0"+
    "\5\37\2\0\1\47\1\37\7\47\2\0\2\47\2\0\3\47\10\0"+
    "\2\47\4\0\2\37\1\0\3\37\2\47\2\0\12\47\1\0\1\37"+
    "\20\0\1\47\1\37\1\0\6\37\3\0\3\37\1\0\4\37\3\0"+
    "\2\37\1\0\1\37\1\0\2\37\3\0\2\37\3\0\3\37\3\0"+
    "\14\37\4\0\5\47\3\0\3\47\1\0\4\47\2\0\1\37\6\0"+
    "\1\47\16\0\12\47\11\0\1\37\7\0\3\47\1\0\10\37\1\0"+
    "\3\37\1\0\27\37\1\0\12\37\1\0\5\37\3\0\1\37\7\47"+
    "\1\0\3\47\1\0\4\47\7\0\2\47\1\0\2\37\6\0\2\37"+
    "\2\47\2\0\12\47\22\0\2\47\1\0\10\37\1\0\3\37\1\0"+
    "\27\37\1\0\12\37\1\0\5\37\2\0\1\47\1\37\7\47\1\0"+
    "\3\47\1\0\4\47\7\0\2\47\7\0\1\37\1\0\2\37\2\47"+
    "\2\0\12\47\1\0\2\37\17\0\2\47\1\0\10\37\1\0\3\37"+
    "\1\0\51\37\2\0\1\37\7\47\1\0\3\47\1\0\4\47\1\37"+
    "\10\0\1\47\10\0\2\37\2\47\2\0\12\47\12\0\6\37\2\0"+
    "\2\47\1\0\22\37\3\0\30\37\1\0\11\37\1\0\1\37\2\0"+
    "\7\37\3\0\1\47\4\0\6\47\1\0\1\47\1\0\10\47\22\0"+
    "\2\47\15\0\60\37\1\47\2\37\7\47\4\0\10\37\10\47\1\0"+
    "\12\47\47\0\2\37\1\0\1\37\2\0\2\37\1\0\1\37\2\0"+
    "\1\37\6\0\4\37\1\0\7\37\1\0\3\37\1\0\1\37\1\0"+
    "\1\37\2\0\2\37\1\0\4\37\1\47\2\37\6\47\1\0\2\47"+
    "\1\37\2\0\5\37\1\0\1\37\1\0\6\47\2\0\12\47\2\0"+
    "\4\37\40\0\1\37\27\0\2\47\6\0\12\47\13\0\1\47\1\0"+
    "\1\47\1\0\1\47\4\0\2\47\10\37\1\0\44\37\4\0\24\47"+
    "\1\0\2\47\5\37\13\47\1\0\44\47\11\0\1\47\71\0\53\37"+
    "\24\47\1\37\12\47\6\0\6\37\4\47\4\37\3\47\1\37\3\47"+
    "\2\37\7\47\3\37\4\47\15\37\14\47\1\37\17\47\2\0\46\37"+
    "\1\0\1\37\5\0\1\37\2\0\53\37\1\0\u014d\37\1\0\4\37"+
    "\2\0\7\37\1\0\1\37\1\0\4\37\2\0\51\37\1\0\4\37"+
    "\2\0\41\37\1\0\4\37\2\0\7\37\1\0\1\37\1\0\4\37"+
    "\2\0\17\37\1\0\71\37\1\0\4\37\2\0\103\37\2\0\3\47"+
    "\40\0\20\37\20\0\125\37\14\0\u026c\37\2\0\21\37\1\0\32\37"+
    "\5\0\113\37\3\0\3\37\17\0\15\37\1\0\4\37\3\47\13\0"+
    "\22\37\3\47\13\0\22\37\2\47\14\0\15\37\1\0\3\37\1\0"+
    "\2\47\14\0\64\37\40\47\3\0\1\37\3\0\2\37\1\47\2\0"+
    "\12\47\41\0\3\47\2\0\12\47\6\0\130\37\10\0\51\37\1\47"+
    "\1\37\5\0\106\37\12\0\35\37\3\0\14\47\4\0\14\47\12\0"+
    "\12\47\36\37\2\0\5\37\13\0\54\37\4\0\21\47\7\37\2\47"+
    "\6\0\12\47\46\0\27\37\5\47\4\0\65\37\12\47\1\0\35\47"+
    "\2\0\13\47\6\0\12\47\15\0\1\37\130\0\5\47\57\37\21\47"+
    "\7\37\4\0\12\47\21\0\11\47\14\0\3\47\36\37\15\47\2\37"+
    "\12\47\54\37\16\47\14\0\44\37\24\47\10\0\12\47\3\0\3\37"+
    "\12\47\44\37\122\0\3\47\1\0\25\47\4\37\1\47\4\37\3\47"+
    "\2\37\11\0\300\37\47\47\25\0\4\47\u0116\37\2\0\6\37\2\0"+
    "\46\37\2\0\6\37\2\0\10\37\1\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\37\37\2\0\65\37\1\0\7\37\1\0\1\37\3\0"+
    "\3\37\1\0\7\37\3\0\4\37\2\0\6\37\4\0\15\37\5\0"+
    "\3\37\1\0\7\37\16\0\5\47\30\0\1\31\1\31\5\47\20\0"+
    "\2\37\23\0\1\37\13\0\5\47\5\0\6\47\1\0\1\37\15\0"+
    "\1\37\20\0\15\37\3\0\33\37\25\0\15\47\4\0\1\47\3\0"+
    "\14\47\21\0\1\37\4\0\1\37\2\0\12\37\1\0\1\37\3\0"+
    "\5\37\6\0\1\37\1\0\1\37\1\0\1\37\1\0\1\46\3\37"+
    "\1\0\13\37\2\0\4\37\5\0\5\37\4\0\1\37\21\0\51\37"+
    "\u0a77\0\57\37\1\0\57\37\1\0\205\37\6\0\4\37\3\47\2\37"+
    "\14\0\46\37\1\0\1\37\5\0\1\37\2\0\70\37\7\0\1\37"+
    "\17\0\1\47\27\37\11\0\7\37\1\0\7\37\1\0\7\37\1\0"+
    "\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0\7\37\1\0"+
    "\40\47\57\0\1\37\u01d5\0\3\37\31\0\11\37\6\47\1\0\5\37"+
    "\2\0\5\37\4\0\126\37\2\0\2\47\2\0\3\37\1\0\132\37"+
    "\1\0\4\37\5\0\51\37\3\0\136\37\21\0\33\37\65\0\20\37"+
    "\u0200\0\u19b6\37\112\0\u51cd\37\63\0\u048d\37\103\0\56\37\2\0\u010d\37"+
    "\3\0\20\37\12\47\2\37\24\0\57\37\1\47\4\0\12\47\1\0"+
    "\31\37\7\0\1\47\120\37\2\47\45\0\11\37\2\0\147\37\2\0"+
    "\4\37\1\0\4\37\14\0\13\37\115\0\12\37\1\47\3\37\1\47"+
    "\4\37\1\47\27\37\5\47\20\0\1\37\7\0\64\37\14\0\2\47"+
    "\62\37\21\47\13\0\12\47\6\0\22\47\6\37\3\0\1\37\4\0"+
    "\12\47\34\37\10\47\2\0\27\37\15\47\14\0\35\37\3\0\4\47"+
    "\57\37\16\47\16\0\1\37\12\47\46\0\51\37\16\47\11\0\3\37"+
    "\1\47\10\37\2\47\2\0\12\47\6\0\27\37\3\0\1\37\1\47"+
    "\4\0\60\37\1\47\1\37\3\47\2\37\2\47\5\37\2\47\1\37"+
    "\1\47\1\37\30\0\3\37\2\0\13\37\5\47\2\0\3\37\2\47"+
    "\12\0\6\37\2\0\6\37\2\0\6\37\11\0\7\37\1\0\7\37"+
    "\221\0\43\37\10\47\1\0\2\47\2\0\12\47\6\0\u2ba4\37\14\0"+
    "\27\37\4\0\61\37\u2104\0\u016e\37\2\0\152\37\46\0\7\37\14\0"+
    "\5\37\5\0\1\37\1\47\12\37\1\0\15\37\1\0\5\37\1\0"+
    "\1\37\1\0\2\37\1\0\2\37\1\0\154\37\41\0\u016b\37\22\0"+
    "\100\37\2\0\66\37\50\0\15\37\3\0\20\47\20\0\7\47\14\0"+
    "\2\37\30\0\3\37\31\0\1\37\6\0\5\37\1\0\207\37\2\0"+
    "\1\47\4\0\1\37\13\0\12\47\7\0\32\37\4\0\1\37\1\0"+
    "\32\37\13\0\131\37\3\0\6\37\2\0\6\37\2\0\6\37\2\0"+
    "\3\37\3\0\2\37\3\0\2\37\22\0\3\47\4\0\14\37\1\0"+
    "\32\37\1\0\23\37\1\0\2\37\1\0\17\37\2\0\16\37\42\0"+
    "\173\37\105\0\65\37\210\0\1\47\202\0\35\37\3\0\61\37\57\0"+
    "\37\37\21\0\33\37\65\0\36\37\2\0\44\37\4\0\10\37\1\0"+
    "\5\37\52\0\236\37\2\0\12\47\u0356\0\6\37\2\0\1\37\1\0"+
    "\54\37\1\0\2\37\3\0\1\37\2\0\27\37\252\0\26\37\12\0"+
    "\32\37\106\0\70\37\6\0\2\37\100\0\1\37\3\47\1\0\2\47"+
    "\5\0\4\47\4\37\1\0\3\37\1\0\33\37\4\0\3\47\4\0"+
    "\1\47\40\0\35\37\203\0\66\37\12\0\26\37\12\0\23\37\215\0"+
    "\111\37\u03b7\0\3\47\65\37\17\47\37\0\12\47\20\0\3\47\55\37"+
    "\13\47\2\0\1\47\22\0\31\37\7\0\12\47\6\0\3\47\44\37"+
    "\16\47\1\0\12\47\100\0\3\47\60\37\16\47\4\37\13\0\12\47"+
    "\u04a6\0\53\37\15\47\10\0\12\47\u0936\0\u036f\37\221\0\143\37\u0b9d\0"+
    "\u042f\37\u33d1\0\u0239\37\u04c7\0\105\37\13\0\1\37\56\47\20\0\4\47"+
    "\15\37\u4060\0\2\37\u2163\0\5\47\3\0\26\47\2\0\7\47\36\0"+
    "\4\47\224\0\3\47\u01bb\0\125\37\1\0\107\37\1\0\2\37\2\0"+
    "\1\37\2\0\2\37\2\0\4\37\1\0\14\37\1\0\1\37\1\0"+
    "\7\37\1\0\101\37\1\0\4\37\2\0\10\37\1\0\7\37\1\0"+
    "\34\37\1\0\4\37\1\0\5\37\1\0\1\37\3\0\7\37\1\0"+
    "\u0154\37\2\0\31\37\1\0\31\37\1\0\37\37\1\0\31\37\1\0"+
    "\37\37\1\0\31\37\1\0\37\37\1\0\31\37\1\0\37\37\1\0"+
    "\31\37\1\0\10\37\2\0\62\47\u1600\0\4\37\1\0\33\37\1\0"+
    "\2\37\1\0\1\37\2\0\1\37\1\0\12\37\1\0\4\37\1\0"+
    "\1\37\1\0\1\37\6\0\1\37\4\0\1\37\1\0\1\37\1\0"+
    "\1\37\1\0\3\37\1\0\2\37\1\0\1\37\2\0\1\37\1\0"+
    "\1\37\1\0\1\37\1\0\1\37\1\0\1\37\1\0\2\37\1\0"+
    "\1\37\2\0\4\37\1\0\7\37\1\0\4\37\1\0\4\37\1\0"+
    "\1\37\1\0\12\37\1\0\21\37\5\0\3\37\1\0\5\37\1\0"+
    "\21\37\u1144\0\ua6d7\37\51\0\u1035\37\13\0\336\37\u3fe2\0\u021e\37\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\47\36\0\140\47\200\0\360\47\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\3\4\1\1\4\6\1\1\5"+
    "\1\6\16\7\14\0\1\10\2\7\1\11\6\7\1\12"+
    "\3\7\1\0\10\7\1\4\4\0\1\13\1\0\1\14"+
    "\1\15\3\0\24\7\4\0\1\16\2\0\1\17\1\7"+
    "\1\20\3\7\1\0\3\7\1\21\4\7\1\17\5\7"+
    "\1\22\7\0\1\23\1\7\1\24\1\25\1\26\11\0"+
    "\1\27\3\7\1\30\1\31\1\7\1\32\2\7\1\33"+
    "\1\34\1\35\2\0\1\36\4\0\2\7\1\37\1\0"+
    "\1\40\12\0\1\41\1\42\1\7\1\43\1\0\1\7"+
    "\3\0\1\44\2\0\1\7\1\45\13\0\1\7\1\0"+
    "\1\46\2\0\1\47\2\0\1\7\1\50\12\0\1\51"+
    "\1\0\1\52\3\0\1\7\2\0\1\53\1\54\1\55"+
    "\2\0\1\56\1\0\1\57\1\0\1\60\1\61\1\62"+
    "\1\0\1\63\1\0\1\64\1\0\1\65\1\0\1\66"+
    "\3\0\1\67\1\70\1\71\4\0\1\72\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\170\0\310"+
    "\0\360\0\u0118\0\u0140\0\240\0\u0168\0\u0190\0\u01b8\0\u01e0"+
    "\0\u0208\0\u0230\0\170\0\170\0\u0258\0\u0280\0\u02a8\0\u02d0"+
    "\0\u02f8\0\u0320\0\u0348\0\u0370\0\u0398\0\u03c0\0\u03e8\0\u0410"+
    "\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550"+
    "\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0280\0\u0668"+
    "\0\u0690\0\u0280\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780"+
    "\0\u0280\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\170\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\170\0\u0a28\0\170\0\u01b8\0\u0a50\0\u0a78"+
    "\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8"+
    "\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8"+
    "\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38"+
    "\0\u0e60\0\170\0\u0e88\0\u0eb0\0\170\0\u0ed8\0\u0f00\0\u0f28"+
    "\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u0280\0\u1040"+
    "\0\u1068\0\u1090\0\u10b8\0\u06b8\0\u10e0\0\u1108\0\u1130\0\u1158"+
    "\0\u1180\0\170\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270"+
    "\0\u1298\0\u0280\0\u12c0\0\u12e8\0\u06b8\0\u0280\0\u1310\0\u1338"+
    "\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428\0\u1450\0\u0280"+
    "\0\u1478\0\u14a0\0\u14c8\0\u0280\0\u0280\0\u14f0\0\u0280\0\u1518"+
    "\0\u1540\0\u0280\0\u0280\0\170\0\u1568\0\u1590\0\170\0\u15b8"+
    "\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\170\0\u16a8\0\170"+
    "\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u1798\0\u17c0\0\u17e8"+
    "\0\u1810\0\u1838\0\u0280\0\u0280\0\u1860\0\u0280\0\u1888\0\u18b0"+
    "\0\u18d8\0\u1900\0\u1928\0\170\0\u1950\0\u1978\0\u19a0\0\u06b8"+
    "\0\u19c8\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0"+
    "\0\u1b08\0\u1b30\0\u1b58\0\u1b80\0\u1ba8\0\u0280\0\u1bd0\0\u1bf8"+
    "\0\170\0\u1c20\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8\0\u1d10"+
    "\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\u1e28\0\u0280"+
    "\0\u1e50\0\170\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40"+
    "\0\u1f68\0\170\0\170\0\u1f90\0\u1fb8\0\170\0\u1fe0\0\170"+
    "\0\u2008\0\170\0\170\0\170\0\u2030\0\u0280\0\u2058\0\170"+
    "\0\u2080\0\170\0\u20a8\0\170\0\u20d0\0\u20f8\0\u2120\0\170"+
    "\0\170\0\170\0\u2148\0\u2170\0\u2198\0\u21c0\0\170\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\4\4"+
    "\1\12\2\4\1\10\1\13\10\4\1\14\2\0\16\4"+
    "\1\5\1\15\1\6\1\7\1\10\1\16\1\17\1\20"+
    "\2\17\1\21\2\17\1\10\7\17\1\22\1\17\1\14"+
    "\2\0\2\17\1\23\1\24\1\17\2\4\5\17\2\4"+
    "\1\5\1\15\1\6\1\7\1\10\1\25\1\26\1\27"+
    "\2\26\1\30\1\31\1\26\1\10\1\32\1\33\1\34"+
    "\2\26\1\35\1\26\1\36\1\37\1\14\1\0\2\26"+
    "\1\40\1\23\1\24\1\26\2\4\1\26\1\41\1\26"+
    "\1\42\2\26\51\0\1\14\26\0\1\14\17\0\50\43"+
    "\7\0\1\44\15\0\1\45\36\0\1\46\50\0\1\47"+
    "\32\0\50\50\6\0\1\51\24\0\1\52\4\0\1\53"+
    "\47\0\1\53\23\0\1\54\23\0\1\53\23\0\1\55"+
    "\23\0\1\53\34\0\1\56\12\0\1\53\15\0\2\26"+
    "\1\57\1\26\1\60\3\26\1\0\1\26\1\61\1\62"+
    "\6\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\10\26\1\0\1\26\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\10\26\1\0\1\64\1\65"+
    "\7\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\6\26\1\66\1\26\1\0\1\26\1\63\3\26\1\67"+
    "\3\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\3\26\1\70\4\26\1\0\1\26\1\63\2\26\1\71"+
    "\4\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\7\26\1\72\1\0\1\26\1\63\7\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\6\0\4\26\1\73\2\26"+
    "\1\74\1\75\1\26\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\10\26\1\0\1\26\1\63"+
    "\3\26\1\76\3\26\2\0\3\26\2\0\1\26\2\0"+
    "\6\26\6\0\10\26\1\0\1\26\1\63\6\26\1\77"+
    "\2\0\3\26\2\0\1\26\2\0\6\26\6\0\10\26"+
    "\1\0\1\26\1\63\4\26\1\100\2\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\6\0\10\26\1\0\1\26"+
    "\1\101\7\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\6\0\10\26\1\0\1\26\1\102\6\26\1\103\2\0"+
    "\3\26\2\0\1\26\2\0\6\26\6\0\10\26\1\0"+
    "\1\26\1\63\5\26\1\104\1\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\10\26\1\0\1\26\1\105"+
    "\7\26\2\0\3\26\2\0\1\26\2\0\6\26\4\0"+
    "\2\106\10\0\1\106\41\0\1\107\56\0\1\110\45\0"+
    "\1\111\40\0\1\112\43\0\1\113\101\0\1\114\47\0"+
    "\1\115\13\0\2\53\3\116\34\53\1\116\6\53\10\0"+
    "\1\117\54\0\1\120\42\0\1\121\45\0\6\26\1\122"+
    "\1\26\1\0\1\26\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\10\26\1\75\1\26\1\63"+
    "\7\26\2\0\1\26\1\123\1\26\2\0\1\26\2\0"+
    "\6\26\6\0\10\26\1\75\1\26\1\63\7\26\2\0"+
    "\3\26\2\0\1\26\2\0\6\26\6\0\10\26\1\0"+
    "\1\26\1\63\7\26\2\0\3\26\2\0\1\26\2\0"+
    "\1\124\5\26\6\0\10\26\1\75\1\26\1\63\1\125"+
    "\6\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\4\26\1\126\2\26\1\127\1\0\1\26\1\63\7\26"+
    "\2\0\3\26\2\0\1\26\2\0\6\26\6\0\7\26"+
    "\1\130\1\0\1\26\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\10\26\1\0\1\26\1\131"+
    "\7\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\4\26\1\132\3\26\1\0\1\26\1\63\7\26\2\0"+
    "\3\26\2\0\1\26\2\0\6\26\6\0\2\26\1\133"+
    "\3\26\1\134\1\26\1\0\1\26\1\63\7\26\2\0"+
    "\3\26\2\0\1\26\2\0\6\26\6\0\1\135\7\26"+
    "\1\0\1\26\1\63\7\26\2\0\3\26\2\0\1\26"+
    "\2\0\6\26\22\0\1\26\33\0\2\26\1\136\5\26"+
    "\1\0\1\26\1\63\7\26\2\0\3\26\2\0\1\26"+
    "\2\0\6\26\6\0\1\137\7\26\1\0\1\26\1\63"+
    "\7\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\2\26\1\140\5\26\1\0\1\26\1\63\7\26\2\0"+
    "\3\26\2\0\1\26\2\0\6\26\6\0\7\26\1\141"+
    "\1\75\1\26\1\63\7\26\2\0\3\26\2\0\1\26"+
    "\2\0\6\26\6\0\4\26\1\142\3\26\1\75\1\26"+
    "\1\63\7\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\6\0\6\26\1\143\1\26\1\0\1\26\1\63\7\26"+
    "\2\0\3\26\2\0\1\26\2\0\6\26\6\0\10\26"+
    "\1\0\1\26\1\63\4\26\1\144\2\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\6\0\4\26\1\145\3\26"+
    "\1\75\1\26\1\63\7\26\2\0\3\26\2\0\1\26"+
    "\2\0\6\26\11\0\1\146\64\0\1\147\37\0\1\150"+
    "\51\0\1\151\63\0\1\152\40\0\1\153\40\0\1\154"+
    "\51\0\1\155\35\0\1\156\7\26\1\0\1\26\1\63"+
    "\7\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\10\26\1\0\1\26\1\157\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\2\26\1\160\5\26\1\0"+
    "\1\26\1\63\7\26\2\0\3\26\2\0\1\26\2\0"+
    "\6\26\6\0\4\26\1\161\3\26\1\0\1\26\1\63"+
    "\7\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\10\26\1\0\1\26\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\2\26\1\162\3\26\6\0\10\26\1\163"+
    "\1\26\1\63\7\26\2\0\3\26\2\0\1\26\2\0"+
    "\6\26\6\0\10\26\1\0\1\26\1\63\2\26\1\164"+
    "\4\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\10\26\1\75\1\26\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\1\26\1\165\4\26\6\0\10\26\1\0"+
    "\1\26\1\166\7\26\2\0\3\26\2\0\1\26\2\0"+
    "\6\26\6\0\10\26\1\0\1\26\1\63\3\26\1\167"+
    "\3\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\7\26\1\170\1\0\1\26\1\63\7\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\6\0\1\26\1\171\6\26"+
    "\1\0\1\26\1\63\7\26\2\0\3\26\2\0\1\26"+
    "\2\0\6\26\6\0\10\26\1\0\1\26\1\63\3\26"+
    "\1\172\3\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\6\0\6\26\1\173\1\26\1\0\1\26\1\63\7\26"+
    "\2\0\3\26\2\0\1\26\2\0\6\26\6\0\10\26"+
    "\1\0\1\26\1\174\7\26\2\0\3\26\2\0\1\26"+
    "\2\0\6\26\6\0\10\26\1\0\1\175\1\63\7\26"+
    "\2\0\3\26\2\0\1\26\2\0\6\26\6\0\2\26"+
    "\1\176\5\26\1\0\1\26\1\63\7\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\6\0\7\26\1\177\1\0"+
    "\1\26\1\63\7\26\2\0\3\26\2\0\1\26\2\0"+
    "\6\26\6\0\10\26\1\0\1\26\1\63\6\26\1\200"+
    "\2\0\3\26\2\0\1\26\2\0\6\26\6\0\10\26"+
    "\1\0\1\26\1\63\3\26\1\201\3\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\12\0\1\202\64\0\1\203"+
    "\26\0\1\204\62\0\1\205\40\0\1\206\43\0\1\207"+
    "\1\0\1\210\6\0\1\211\36\0\10\26\1\0\1\26"+
    "\1\63\7\26\2\0\3\26\2\0\1\26\2\0\4\26"+
    "\1\212\1\26\6\0\10\26\1\75\1\26\1\63\7\26"+
    "\2\0\3\26\2\0\1\26\2\0\2\26\1\213\3\26"+
    "\6\0\10\26\1\0\1\26\1\63\3\26\1\214\3\26"+
    "\2\0\3\26\2\0\1\26\2\0\6\26\6\0\10\26"+
    "\1\0\1\26\1\215\7\26\2\0\3\26\2\0\1\26"+
    "\2\0\6\26\6\0\2\26\1\216\5\26\1\0\1\26"+
    "\1\63\7\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\6\0\1\217\1\0\1\220\2\0\1\221\1\222\2\0"+
    "\1\223\1\0\1\224\2\0\1\225\2\0\1\226\4\0"+
    "\1\227\21\0\10\26\1\0\1\26\1\63\3\26\1\230"+
    "\3\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\10\26\1\0\1\231\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\1\232\7\26\1\75\1\26"+
    "\1\63\7\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\6\0\10\26\1\0\1\233\1\63\7\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\6\0\10\26\1\0\1\26"+
    "\1\63\3\26\1\234\3\26\2\0\3\26\2\0\1\26"+
    "\2\0\6\26\6\0\7\26\1\235\1\0\1\26\1\63"+
    "\7\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\10\26\1\0\1\26\1\63\3\26\1\236\3\26\2\0"+
    "\3\26\2\0\1\26\2\0\6\26\6\0\4\26\1\237"+
    "\3\26\1\0\1\26\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\10\26\1\0\1\26\1\63"+
    "\3\26\1\240\3\26\2\0\3\26\2\0\1\26\2\0"+
    "\6\26\6\0\7\26\1\241\1\0\1\26\1\63\7\26"+
    "\2\0\3\26\2\0\1\26\2\0\6\26\6\0\10\26"+
    "\1\0\1\26\1\63\3\26\1\242\3\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\6\0\10\26\1\0\1\26"+
    "\1\63\5\26\1\243\1\26\2\0\3\26\2\0\1\26"+
    "\2\0\6\26\24\0\1\244\32\0\1\245\57\0\1\246"+
    "\54\0\1\247\31\0\1\250\24\0\1\251\30\0\1\252"+
    "\50\0\1\253\40\0\2\26\1\254\5\26\1\0\1\26"+
    "\1\63\7\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\6\0\10\26\1\0\1\26\1\63\7\26\2\0\3\26"+
    "\2\0\1\26\2\0\2\26\1\255\3\26\10\0\1\256"+
    "\7\0\1\257\1\260\3\0\1\261\41\0\1\262\1\263"+
    "\43\0\1\264\44\0\1\265\53\0\1\266\56\0\1\267"+
    "\52\0\1\270\40\0\1\271\56\0\1\272\26\0\7\26"+
    "\1\273\1\0\1\26\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\10\26\1\0\1\274\1\63"+
    "\7\26\2\0\3\26\2\0\1\26\2\0\6\26\6\0"+
    "\10\26\1\0\1\26\1\275\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\6\0\7\26\1\276\1\0\1\26"+
    "\1\63\7\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\6\0\10\26\1\277\1\26\1\63\7\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\6\0\10\26\1\0\1\300"+
    "\1\63\7\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\10\0\1\301\61\0\1\302\61\0\1\303\47\0\1\304"+
    "\23\0\1\305\45\0\1\306\47\0\10\26\1\0\1\307"+
    "\1\63\7\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\6\0\10\26\1\0\1\26\1\310\7\26\2\0\3\26"+
    "\2\0\1\26\2\0\6\26\33\0\1\311\33\0\1\312"+
    "\72\0\1\313\26\0\1\314\40\0\1\315\55\0\1\316"+
    "\35\0\1\317\51\0\1\320\45\0\1\321\56\0\1\322"+
    "\46\0\1\323\41\0\10\26\1\75\1\26\1\63\2\26"+
    "\1\324\4\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\13\0\1\325\42\0\10\26\1\0\1\26\1\63\5\26"+
    "\1\326\1\26\2\0\3\26\2\0\1\26\2\0\6\26"+
    "\11\0\1\327\56\0\1\330\63\0\1\331\40\0\1\332"+
    "\42\0\1\333\35\0\10\26\1\0\1\26\1\63\7\26"+
    "\2\0\3\26\2\0\1\26\2\0\1\334\5\26\20\0"+
    "\1\335\55\0\1\336\31\0\1\337\51\0\1\340\101\0"+
    "\1\341\46\0\1\342\16\0\1\343\61\0\1\344\37\0"+
    "\1\345\52\0\1\346\45\0\1\347\40\0\10\26\1\0"+
    "\1\26\1\63\3\26\1\350\3\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\14\0\1\351\45\0\1\352\60\0"+
    "\1\353\36\0\1\354\56\0\1\355\34\0\2\26\1\356"+
    "\5\26\1\0\1\26\1\63\7\26\2\0\3\26\2\0"+
    "\1\26\2\0\6\26\44\0\1\357\32\0\1\360\44\0"+
    "\1\361\43\0\1\362\37\0\1\363\56\0\1\364\50\0"+
    "\1\365\44\0\1\366\56\0\1\367\35\0\1\370\52\0"+
    "\1\371\47\0\1\372\56\0\1\373\47\0\1\374\42\0"+
    "\1\375\36\0\10\26\1\0\1\26\1\63\3\26\1\376"+
    "\3\26\2\0\3\26\2\0\1\26\2\0\6\26\10\0"+
    "\1\377\63\0\1\u0100\67\0\1\u0101\20\0\1\u0102\66\0"+
    "\1\u0103\30\0\1\u0104\51\0\1\u0105\52\0\1\u0106\44\0"+
    "\1\u0107\50\0\1\u0108\46\0\1\u0109\56\0\1\u010a\41\0"+
    "\1\u010b\71\0\1\u010c\30\0\1\u010d\34\0\1\u010e\63\0"+
    "\1\u010f\47\0\1\u0110\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8680];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\2\1\1\11\13\1\2\11\16\1\14\0"+
    "\16\1\1\0\10\1\1\11\4\0\1\11\1\0\1\11"+
    "\1\1\3\0\24\1\4\0\1\11\2\0\1\11\5\1"+
    "\1\0\16\1\1\11\7\0\5\1\11\0\14\1\1\11"+
    "\2\0\1\11\4\0\2\1\1\11\1\0\1\11\12\0"+
    "\4\1\1\0\1\1\3\0\1\11\2\0\2\1\13\0"+
    "\1\1\1\0\1\1\2\0\1\11\2\0\2\1\12\0"+
    "\1\1\1\0\1\11\3\0\1\1\2\0\1\1\2\11"+
    "\2\0\1\11\1\0\1\11\1\0\3\11\1\0\1\1"+
    "\1\0\1\11\1\0\1\11\1\0\1\11\3\0\3\11"+
    "\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[272];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public static String errores="";
    private Symbol Symbol(int type){
        return new Symbol(type ,yyline, yycolumn);
    }
    private Symbol Symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    public static void errorLexico(String error,int x, int y ){
       errores+="error lexico \""+error+"\" en linea: "+Integer.toString(y)+" colulmna: "+Integer.toString(x)+"\n";
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public lexico_chtml(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2898) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Caracter Invalido: "+yytext()+" Linea: "+ (int)(yyline+1)+" columa:"+(int)yycolumn+";");
            }
          case 60: break;
          case 2: 
            { return new Symbol(sym.INI,yyline,yycolumn);
            }
          case 61: break;
          case 3: 
            { return new Symbol(sym.FIN,yyline,yycolumn);
            }
          case 62: break;
          case 4: 
            { /*Ignore*/
            }
          case 63: break;
          case 5: 
            { return new Symbol(sym.SIGU,yyline,yycolumn);
            }
          case 64: break;
          case 6: 
            { return new Symbol(sym.SPYC,yyline,yycolumn);
            }
          case 65: break;
          case 7: 
            { return new Symbol(sym.PNOR,yyline, yycolumn,yytext());
            }
          case 66: break;
          case 8: 
            { return new Symbol(sym.IECT,yyline,yycolumn);
            }
          case 67: break;
          case 9: 
            { return new Symbol(sym.IECB,yyline,yycolumn);
            }
          case 68: break;
          case 10: 
            { return new Symbol(sym.PID ,yyline,yycolumn);
            }
          case 69: break;
          case 11: 
            { return new Symbol(sym.PCOM,yyline,yycolumn,yytext());
            }
          case 70: break;
          case 12: 
            { return new Symbol(sym.ICJS,yyline,yycolumn);
            }
          case 71: break;
          case 13: 
            { return new Symbol(sym.PNOR,yyline,yycolumn,yytext());
            }
          case 72: break;
          case 14: 
            { return new Symbol(sym.ICCS,yyline,yycolumn);
            }
          case 73: break;
          case 15: 
            { return new Symbol(sym.PRUT,yyline,yycolumn);
            }
          case 74: break;
          case 16: 
            { return new Symbol(sym.IECJ,yyline,yycolumn);
            }
          case 75: break;
          case 17: 
            { return new Symbol(sym.PALT,yyline,yycolumn);
            }
          case 76: break;
          case 18: 
            { return new Symbol(sym.IHTML,yyline, yycolumn);
            }
          case 77: break;
          case 19: 
            { return new Symbol(sym.PCLI,yyline,yycolumn);
            }
          case 78: break;
          case 20: 
            { return new Symbol(sym.IETE,yyline,yycolumn);
            }
          case 79: break;
          case 21: 
            { return new Symbol(sym.IETB,yyline,yycolumn);
            }
          case 80: break;
          case 22: 
            { return new Symbol(sym.IEFI,yyline,yycolumn);
            }
          case 81: break;
          case 23: 
            { return new Symbol(sym.PFON,yyline,yycolumn);
            }
          case 82: break;
          case 24: 
            { return new Symbol(sym.PANC,yyline,yycolumn);
            }
          case 83: break;
          case 25: 
            { return new Symbol(sym.IEBO,yyline,yycolumn);
            }
          case 84: break;
          case 26: 
            { return new Symbol(sym.IEPA,yyline,yycolumn);
            }
          case 85: break;
          case 27: 
            { return new Symbol(sym.PGRP,yyline,yycolumn);
            }
          case 86: break;
          case 28: 
            { return new Symbol(sym.PVAL,yyline,yycolumn);
            }
          case 87: break;
          case 29: 
            { yybegin(YYCUERPO);return new Symbol(sym.ICUER,yyline, yycolumn);
            }
          case 88: break;
          case 30: 
            { return new Symbol(sym.ITIT,yyline,yycolumn);
            }
          case 89: break;
          case 31: 
            { return new Symbol(sym.FECT,yyline,yycolumn);
            }
          case 90: break;
          case 32: 
            { return new Symbol(sym.FECB,yyline,yycolumn);
            }
          case 91: break;
          case 33: 
            { return new Symbol(sym.IEIM,yyline,yycolumn);
            }
          case 92: break;
          case 34: 
            { return new Symbol(sym.IEEN,yyline,yycolumn);
            }
          case 93: break;
          case 35: 
            { return new Symbol(sym.IEOP,yyline,yycolumn);
            }
          case 94: break;
          case 36: 
            { return new Symbol(sym.FCJS,yyline,yycolumn);
            }
          case 95: break;
          case 37: 
            { return new Symbol(sym.IETA,yyline,yycolumn);
            }
          case 96: break;
          case 38: 
            { return new Symbol(sym.IESP,yyline,yycolumn);
            }
          case 97: break;
          case 39: 
            { return new Symbol(sym.FCCS,yyline,yycolumn);
            }
          case 98: break;
          case 40: 
            { return new Symbol(sym.FECJ,yyline,yycolumn);
            }
          case 99: break;
          case 41: 
            { return new Symbol(sym.PALI,yyline,yycolumn);
            }
          case 100: break;
          case 42: 
            { return new Symbol(sym.FHTML,yyline, yycolumn);
            }
          case 101: break;
          case 43: 
            { return new Symbol(sym.FETE,yyline,yycolumn);
            }
          case 102: break;
          case 44: 
            { return new Symbol(sym.FETB,yyline,yycolumn);
            }
          case 103: break;
          case 45: 
            { return new Symbol(sym.FEFI,yyline,yycolumn);
            }
          case 104: break;
          case 46: 
            { return new Symbol(sym.FEBO,yyline,yycolumn);
            }
          case 105: break;
          case 47: 
            { return new Symbol(sym.FEPA,yyline,yycolumn);
            }
          case 106: break;
          case 48: 
            { return new Symbol(sym.ESAL,yyline,yycolumn);
            }
          case 107: break;
          case 49: 
            { yybegin(YYCABEZA); return new Symbol(sym.IENCA,yyline, yycolumn);
            }
          case 108: break;
          case 50: 
            { return new Symbol(sym.FTIT,yyline,yycolumn);
            }
          case 109: break;
          case 51: 
            { return new Symbol(sym.IECA,yyline,yycolumn);
            }
          case 110: break;
          case 52: 
            { yybegin(YYINITIAL); return new Symbol(sym.FCUER,yyline, yycolumn);
            }
          case 111: break;
          case 53: 
            { return new Symbol(sym.FEIM,yyline,yycolumn);
            }
          case 112: break;
          case 54: 
            { return new Symbol(sym.FEOP,yyline,yycolumn);
            }
          case 113: break;
          case 55: 
            { return new Symbol(sym.FETA,yyline,yycolumn);
            }
          case 114: break;
          case 56: 
            { return new Symbol(sym.FEEN,yyline,yycolumn);
            }
          case 115: break;
          case 57: 
            { return new Symbol(sym.FESP,yyline,yycolumn);
            }
          case 116: break;
          case 58: 
            { yybegin(YYINITIAL); return new Symbol(sym.FENCA,yyline, yycolumn);
            }
          case 117: break;
          case 59: 
            { return new Symbol(sym.FECA,yyline,yycolumn);
            }
          case 118: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
